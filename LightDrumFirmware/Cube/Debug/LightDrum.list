
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08011f30  08011f30  00012f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123d4  080123d4  00014070  2**0
                  CONTENTS
  4 .ARM          00000008  080123d4  080123d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123dc  080123dc  00014070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080123dc  080123dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080123e4  080123e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080123ec  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b0  20000070  0801245c  00014070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001720  0801245c  00014720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033b01  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000783b  00000000  00000000  00047ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b0  00000000  00000000  0004f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e96  00000000  00000000  00051b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e824  00000000  00000000  00053a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000370eb  00000000  00000000  0008224a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef0f0  00000000  00000000  000b9335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a8425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b484  00000000  00000000  001a8468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001b38ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011f18 	.word	0x08011f18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08011f18 	.word	0x08011f18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin>:
 *      Author: Daxxn
 */

#include <RotaryEncoder.h>

RotaryEncoder::RotaryEncoder(GPIO_TypeDef *portA, uint16_t pinA, GPIO_TypeDef *portB, uint16_t pinB, Pin switchPin)
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin+0x70>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffe4 	bl	8000fb8 <_ZN3PinC1Ev>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	765a      	strb	r2, [r3, #25]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
{
	this->portA = portA;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	605a      	str	r2, [r3, #4]
	this->portB = portB;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	609a      	str	r2, [r3, #8]
	this->pinA = pinA;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	88fa      	ldrh	r2, [r7, #6]
 8001018:	819a      	strh	r2, [r3, #12]
	this->pinB = pinB;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8b3a      	ldrh	r2, [r7, #24]
 800101e:	81da      	strh	r2, [r3, #14]
	this->switchPin = switchPin;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3310      	adds	r3, #16
 8001024:	f107 021c 	add.w	r2, r7, #28
 8001028:	6810      	ldr	r0, [r2, #0]
 800102a:	6018      	str	r0, [r3, #0]
 800102c:	8891      	ldrh	r1, [r2, #4]
 800102e:	7992      	ldrb	r2, [r2, #6]
 8001030:	8099      	strh	r1, [r3, #4]
 8001032:	719a      	strb	r2, [r3, #6]
}
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0801206c 	.word	0x0801206c

08001044 <_ZN13RotaryEncoderD1Ev>:

RotaryEncoder::~RotaryEncoder()
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <_ZN13RotaryEncoderD1Ev+0x1c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
{
}
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	0801206c 	.word	0x0801206c

08001064 <_ZN13RotaryEncoderD0Ev>:
RotaryEncoder::~RotaryEncoder()
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
}
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffe9 	bl	8001044 <_ZN13RotaryEncoderD1Ev>
 8001072:	2120      	movs	r1, #32
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f00e fa92 	bl	800f59e <_ZdlPvj>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN13RotaryEncoder4InitEv>:

HAL_StatusTypeDef RotaryEncoder::Init()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	prevStateA = HAL_GPIO_ReadPin(portA, pinA);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	899b      	ldrh	r3, [r3, #12]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f007 ffd4 	bl	8009044 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	761a      	strb	r2, [r3, #24]
	prevStateB = HAL_GPIO_ReadPin(portB, pinB);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	89db      	ldrh	r3, [r3, #14]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f007 ffc8 	bl	8009044 <HAL_GPIO_ReadPin>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	765a      	strb	r2, [r3, #25]
	return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZN13RotaryEncoder6DecodeEv>:

void RotaryEncoder::Decode()
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	this->currStateA = HAL_GPIO_ReadPin(this->portA, this->pinA);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4610      	mov	r0, r2
 80010da:	f007 ffb3 	bl	8009044 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	769a      	strb	r2, [r3, #26]
	this->currStateB = HAL_GPIO_ReadPin(this->portB, this->pinB);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	89db      	ldrh	r3, [r3, #14]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4610      	mov	r0, r2
 80010f2:	f007 ffa7 	bl	8009044 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	76da      	strb	r2, [r3, #27]

	if (this->currStateA == 1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e9b      	ldrb	r3, [r3, #26]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d11c      	bne.n	8001140 <_ZN13RotaryEncoder6DecodeEv+0x7a>
	{
		if (this->currStateA != this->prevStateA)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7e9a      	ldrb	r2, [r3, #26]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7e1b      	ldrb	r3, [r3, #24]
 800110e:	429a      	cmp	r2, r3
 8001110:	d016      	beq.n	8001140 <_ZN13RotaryEncoder6DecodeEv+0x7a>
		{
			if (this->currStateB == 0)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7edb      	ldrb	r3, [r3, #27]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <_ZN13RotaryEncoder6DecodeEv+0x68>
			{
				this->position++;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	8b9b      	ldrh	r3, [r3, #28]
 800111e:	3301      	adds	r3, #1
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	839a      	strh	r2, [r3, #28]
				this->direction = CW;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	779a      	strb	r2, [r3, #30]
 800112c:	e008      	b.n	8001140 <_ZN13RotaryEncoder6DecodeEv+0x7a>
			}
			else
			{
				this->position--;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	8b9b      	ldrh	r3, [r3, #28]
 8001132:	3b01      	subs	r3, #1
 8001134:	b29a      	uxth	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	839a      	strh	r2, [r3, #28]
				this->direction = CCW;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	22ff      	movs	r2, #255	@ 0xff
 800113e:	779a      	strb	r2, [r3, #30]
			}
		}
	}

	this->prevStateA = this->currStateA;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e9a      	ldrb	r2, [r3, #26]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	761a      	strb	r2, [r3, #24]
	this->prevStateB = this->currStateB;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7eda      	ldrb	r2, [r3, #27]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	765a      	strb	r2, [r3, #25]
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4613      	mov	r3, r2
 8001164:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	68b8      	ldr	r0, [r7, #8]
 8001180:	f007 ff78 	bl	8009074 <HAL_GPIO_WritePin>
	};
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef *port, uint16_t pin, GPIO_Default_State defaultState)
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	4611      	mov	r1, r2
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	4613      	mov	r3, r2
 80011a2:	717b      	strb	r3, [r7, #5]
	{
		this->port = port;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	797a      	ldrb	r2, [r7, #5]
 80011b4:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, (GPIO_PinState)defaultState);
 80011b6:	797a      	ldrb	r2, [r7, #5]
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4619      	mov	r1, r3
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f007 ff59 	bl	8009074 <HAL_GPIO_WritePin>
	}
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN12StripCurrentC1Ev>:
 *
 */
class StripCurrent
{
public:
	StripCurrent() {};
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <_ZN9ShiftRegsC1Ev+0x2c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3308      	adds	r3, #8
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fede 	bl	8000fb8 <_ZN3PinC1Ev>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3310      	adds	r3, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fed9 	bl	8000fb8 <_ZN3PinC1Ev>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	080120a0 	.word	0x080120a0

08001214 <_ZN15PCA9634SettingsC1Ev>:
	uint8_t green = 0;
	uint8_t blue = 0;
	bool en = 1;
};

struct PCA9634Settings
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	719a      	strb	r2, [r3, #6]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	71da      	strb	r2, [r3, #7]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	721a      	strb	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	725a      	strb	r2, [r3, #9]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_ZN7PCA9634C1Ev>:
 *
 */
class PCA9634
{
public:
	PCA9634() {};
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	227f      	movs	r2, #127	@ 0x7f
 800124e:	741a      	strb	r2, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3311      	adds	r3, #17
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffdd 	bl	8001214 <_ZN15PCA9634SettingsC1Ev>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	331c      	adds	r3, #28
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff feaa 	bl	8000fb8 <_ZN3PinC1Ev>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <_ZN12StripControlC1Ev>:
 *
 */
class StripControl
{
public:
	StripControl() {};
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <_ZN12StripControlC1Ev+0x54>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3310      	adds	r3, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe98 	bl	8000fb8 <_ZN3PinC1Ev>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3318      	adds	r3, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe93 	bl	8000fb8 <_ZN3PinC1Ev>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3320      	adds	r3, #32
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe8e 	bl	8000fb8 <_ZN3PinC1Ev>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3328      	adds	r3, #40	@ 0x28
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe89 	bl	8000fb8 <_ZN3PinC1Ev>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3330      	adds	r3, #48	@ 0x30
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe84 	bl	8000fb8 <_ZN3PinC1Ev>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3338      	adds	r3, #56	@ 0x38
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe7f 	bl	8000fb8 <_ZN3PinC1Ev>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	080120b0 	.word	0x080120b0

080012c8 <_ZN9ComponentC1EP7Nextionh>:
 *
 */
class Component
{
public:
	Component(Nextion *next, uint8_t id) { nxt = next; ID = id; };
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	4613      	mov	r3, r2
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <_ZN9ComponentC1EP7Nextionh+0x34>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	715a      	strb	r2, [r3, #5]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	711a      	strb	r2, [r3, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	080120f8 	.word	0x080120f8

08001300 <_ZN7ControlC1EP7NextionhPKchh>:
 *
 */
class Control : public Component
{
public:
	Control(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY): Component(nxt, id) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ffd6 	bl	80012c8 <_ZN9ComponentC1EP7Nextionh>
 800131c:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <_ZN7ControlC1EP7NextionhPKchh+0x40>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
		ObjName = name;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	60da      	str	r2, [r3, #12]
		navXIndex = navX;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	7e3a      	ldrb	r2, [r7, #24]
 800132c:	741a      	strb	r2, [r3, #16]
		navYIndex = navY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	7f3a      	ldrb	r2, [r7, #28]
 8001332:	745a      	strb	r2, [r3, #17]
	};
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	0801210c 	.word	0x0801210c

08001344 <_ZN7ControlC1EP7NextionhPKc>:
	Control(Nextion *nxt, uint8_t id, const char* name): Component(nxt, id) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ffb4 	bl	80012c8 <_ZN9ComponentC1EP7Nextionh>
 8001360:	4a06      	ldr	r2, [pc, #24]	@ (800137c <_ZN7ControlC1EP7NextionhPKc+0x38>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]
		navXIndex = IGNORE_NAV;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	22ff      	movs	r2, #255	@ 0xff
 800136a:	741a      	strb	r2, [r3, #16]
		navYIndex = IGNORE_NAV;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	745a      	strb	r2, [r3, #17]
	}
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0801210c 	.word	0x0801210c

08001380 <_ZN6ButtonC1EP7NextionhPKchh>:
 *
 */
class Button : public Control
{
public:
	Button(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY): Control(nxt, id, name, navX, navY) {};
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	7f3b      	ldrb	r3, [r7, #28]
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	7e3b      	ldrb	r3, [r7, #24]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	f7ff ffae 	bl	8001300 <_ZN7ControlC1EP7NextionhPKchh>
 80013a4:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <_ZN6ButtonC1EP7NextionhPKchh+0x3c>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	080120d8 	.word	0x080120d8

080013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>:
 *
 */
class PageButton : public Control
{
public:
	PageButton(Nextion *nxt, uint8_t id, const char* name, uint8_t navX, uint8_t navY, uint8_t pageID, ChangePageCallback callback): Control(nxt, id, name, navX, navY) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	7f3b      	ldrb	r3, [r7, #28]
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	7e3b      	ldrb	r3, [r7, #24]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	f7ff ff8e 	bl	8001300 <_ZN7ControlC1EP7NextionhPKchh>
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE+0x44>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]
		this->pageID = pageID;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013f0:	749a      	strb	r2, [r3, #18]
		this->callback = callback;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f6:	615a      	str	r2, [r3, #20]
	};
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	08012140 	.word	0x08012140

08001408 <_ZN11ProgressBarC1EP7NextionhPKc>:
 *
 */
class ProgressBar : public Control
{
public:
	ProgressBar(Nextion *nxt, uint8_t id, const char* name): Control(nxt, id, name) {};
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4613      	mov	r3, r2
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	f7ff ff90 	bl	8001344 <_ZN7ControlC1EP7NextionhPKc>
 8001424:	4a03      	ldr	r2, [pc, #12]	@ (8001434 <_ZN11ProgressBarC1EP7NextionhPKc+0x2c>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	08012160 	.word	0x08012160

08001438 <_ZN13ScreenControlC1Ev>:
 * Screen Controller used for this specific project.
 */
class ScreenControl
{
public:
	ScreenControl() {};
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <_ZN13ScreenControlC1Ev+0x24>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	22ff      	movs	r2, #255	@ 0xff
 800144a:	741a      	strb	r2, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08012090 	.word	0x08012090

08001460 <_ZN13RotaryEncoderC1Ev>:
 *
 */
class RotaryEncoder
{
public:
	RotaryEncoder() {};
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	4a0c      	ldr	r2, [pc, #48]	@ (800149c <_ZN13RotaryEncoderC1Ev+0x3c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3310      	adds	r3, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fda0 	bl	8000fb8 <_ZN3PinC1Ev>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	761a      	strb	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	765a      	strb	r2, [r3, #25]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	769a      	strb	r2, [r3, #26]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	76da      	strb	r2, [r3, #27]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0801206c 	.word	0x0801206c

080014a0 <_Z20ScreenChangeCallbackh>:

/* Screen Components ---------------------------------------------------------*/
ScreenControl screenCtrl;

void ScreenChangeCallback(uint8_t pageID)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	screenCtrl.ChangePage(pageID);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4803      	ldr	r0, [pc, #12]	@ (80014bc <_Z20ScreenChangeCallbackh+0x1c>)
 80014b0:	f002 f900 	bl	80036b4 <_ZN13ScreenControl10ChangePageEh>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000428 	.word	0x20000428

080014c0 <_ZN9ComponentC1ERKS_>:
class Component
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <_ZN9ComponentC1ERKS_+0x38>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	791a      	ldrb	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	711a      	strb	r2, [r3, #4]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	795a      	ldrb	r2, [r3, #5]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	715a      	strb	r2, [r3, #5]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	080120f8 	.word	0x080120f8

080014fc <_ZN7ControlC1ERKS_>:
class Control : public Component
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ffd7 	bl	80014c0 <_ZN9ComponentC1ERKS_>
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <_ZN7ControlC1ERKS_+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	7c1a      	ldrb	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	741a      	strb	r2, [r3, #16]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	7c5a      	ldrb	r2, [r3, #17]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	745a      	strb	r2, [r3, #17]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0801210c 	.word	0x0801210c

08001540 <_ZN10PageButtonC1ERKS_>:
class PageButton : public Control
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ffd3 	bl	80014fc <_ZN7ControlC1ERKS_>
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <_ZN10PageButtonC1ERKS_+0x38>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	7c9a      	ldrb	r2, [r3, #18]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	749a      	strb	r2, [r3, #18]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	08012140 	.word	0x08012140

0800157c <_ZN4PageC1ERKS_>:
#include "ProgressBar.h"

/*
 *
 */
class Page : public Component
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff97 	bl	80014c0 <_ZN9ComponentC1ERKS_>
 8001592:	4a22      	ldr	r2, [pc, #136]	@ (800161c <_ZN4PageC1ERKS_+0xa0>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	7b1a      	ldrb	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	731a      	strb	r2, [r3, #12]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	7b5a      	ldrb	r2, [r3, #13]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	735a      	strb	r2, [r3, #13]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	69da      	ldr	r2, [r3, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	621a      	str	r2, [r3, #32]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0801212c 	.word	0x0801212c

08001620 <_ZN6ButtonC1ERKS_>:
class Button : public Control
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff63 	bl	80014fc <_ZN7ControlC1ERKS_>
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <_ZN6ButtonC1ERKS_+0x38>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	7c9a      	ldrb	r2, [r3, #18]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	749a      	strb	r2, [r3, #18]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	695a      	ldr	r2, [r3, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	080120d8 	.word	0x080120d8

0800165c <_ZN11ProgressBarC1ERKS_>:
class ProgressBar : public Control
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff45 	bl	80014fc <_ZN7ControlC1ERKS_>
 8001672:	4a06      	ldr	r2, [pc, #24]	@ (800168c <_ZN11ProgressBarC1ERKS_+0x30>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	7c9a      	ldrb	r2, [r3, #18]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	749a      	strb	r2, [r3, #18]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	08012160 	.word	0x08012160

08001690 <_Z7RMSTestv>:

float rms = 0;
float sum = 0;
int rmsI = 0;
void RMSTest()
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	af00      	add	r7, sp, #0
	sum = 0;
 8001694:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <_Z7RMSTestv+0xc8>)
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
	for (rmsI = 0; rmsI < AUDIO_HALF_BUFFER_SIZE; rmsI += 2) {
 800169c:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <_Z7RMSTestv+0xcc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e023      	b.n	80016ec <_Z7RMSTestv+0x5c>
		sum += pow(audioBuffer[rmsI], 2);
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <_Z7RMSTestv+0xcc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <_Z7RMSTestv+0xd0>)
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	2102      	movs	r1, #2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fcc1 	bl	8002038 <_ZSt3powImiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016b6:	ec55 4b10 	vmov	r4, r5, d0
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <_Z7RMSTestv+0xc8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff62 	bl	8000588 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4620      	mov	r0, r4
 80016ca:	4629      	mov	r1, r5
 80016cc:	f7fe fdfe 	bl	80002cc <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff faa6 	bl	8000c28 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <_Z7RMSTestv+0xc8>)
 80016e0:	6013      	str	r3, [r2, #0]
	for (rmsI = 0; rmsI < AUDIO_HALF_BUFFER_SIZE; rmsI += 2) {
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <_Z7RMSTestv+0xcc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3302      	adds	r3, #2
 80016e8:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <_Z7RMSTestv+0xcc>)
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <_Z7RMSTestv+0xcc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80016f2:	ddd7      	ble.n	80016a4 <_Z7RMSTestv+0x14>
	}
	rms = sqrt(1.0 / (float)AUDIO_HALF_BUFFER_SIZE * sum) + TEST_OFFSET;
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <_Z7RMSTestv+0xc8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff45 	bl	8000588 <__aeabi_f2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <_Z7RMSTestv+0xd4>)
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	ec43 2b17 	vmov	d7, r2, r3
 8001710:	eeb0 0a47 	vmov.f32	s0, s14
 8001714:	eef0 0a67 	vmov.f32	s1, s15
 8001718:	f00d ffd4 	bl	800f6c4 <sqrt>
 800171c:	ec51 0b10 	vmov	r0, r1, d0
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_Z7RMSTestv+0xd8>)
 8001726:	f7fe fdcf 	bl	80002c8 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fa79 	bl	8000c28 <__aeabi_d2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4a0c      	ldr	r2, [pc, #48]	@ (800176c <_Z7RMSTestv+0xdc>)
 800173a:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, (uint32_t)rms);
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <_Z7RMSTestv+0xdc>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <_Z7RMSTestv+0xe0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	ee17 2a90 	vmov	r2, s15
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001752:	bf00      	nop
 8001754:	bdb0      	pop	{r4, r5, r7, pc}
 8001756:	bf00      	nop
 8001758:	20001048 	.word	0x20001048
 800175c:	2000104c 	.word	0x2000104c
 8001760:	200001e4 	.word	0x200001e4
 8001764:	3f900000 	.word	0x3f900000
 8001768:	40df4000 	.word	0x40df4000
 800176c:	20001044 	.word	0x20001044
 8001770:	200000b0 	.word	0x200000b0

08001774 <AudioFullCallback>:

void AudioFullCallback()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	RMSTest();
 8001778:	f7ff ff8a 	bl	8001690 <_Z7RMSTestv>
//			max += audioBuffer[i];
//		}
//	}
//	uint32_t avg = max / AUDIO_BUFFER_SIZE;
//	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, avg);
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <CurrentConvFullCallback>:
{

}

void CurrentConvFullCallback()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	stripCurr.Calc();
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <CurrentConvFullCallback+0x10>)
 8001786:	f002 fa5d 	bl	8003c44 <_ZN12StripCurrent4CalcEv>
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000110 	.word	0x20000110

08001794 <_Z24PageChangeCallbackHandleh>:

void PageChangeCallbackHandle(uint8_t pageNumber)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	screenCtrl.ChangePageEvent(pageNumber);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <_Z24PageChangeCallbackHandleh+0x1c>)
 80017a4:	f001 ff6d 	bl	8003682 <_ZN13ScreenControl15ChangePageEventEh>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000428 	.word	0x20000428

080017b4 <_Z24TouchEventCallbackHandlehhh>:

void TouchEventCallbackHandle(uint8_t pageID, uint8_t compID, uint8_t event)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	460b      	mov	r3, r1
 80017c0:	71bb      	strb	r3, [r7, #6]
 80017c2:	4613      	mov	r3, r2
 80017c4:	717b      	strb	r3, [r7, #5]
	screenCtrl.TouchEvent(pageID, compID, event);
 80017c6:	797b      	ldrb	r3, [r7, #5]
 80017c8:	79ba      	ldrb	r2, [r7, #6]
 80017ca:	79f9      	ldrb	r1, [r7, #7]
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <_Z24TouchEventCallbackHandlehhh+0x28>)
 80017ce:	f001 ffb4 	bl	800373a <_ZN13ScreenControl10TouchEventEhhh>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000428 	.word	0x20000428

080017e0 <_Z25StripCurrentAlertCallback18StripCurrentStatus>:
{
	next.Receive();
}

void StripCurrentAlertCallback(StripCurrentStatus status)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]

}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN13RotaryEncoderaSERKS_>:
class RotaryEncoder
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	899a      	ldrh	r2, [r3, #12]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	819a      	strh	r2, [r3, #12]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	89da      	ldrh	r2, [r3, #14]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	81da      	strh	r2, [r3, #14]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	3310      	adds	r3, #16
 8001826:	3210      	adds	r2, #16
 8001828:	6811      	ldr	r1, [r2, #0]
 800182a:	6019      	str	r1, [r3, #0]
 800182c:	8891      	ldrh	r1, [r2, #4]
 800182e:	7992      	ldrb	r2, [r2, #6]
 8001830:	8099      	strh	r1, [r3, #4]
 8001832:	719a      	strb	r2, [r3, #6]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7e1a      	ldrb	r2, [r3, #24]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	761a      	strb	r2, [r3, #24]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	7e5a      	ldrb	r2, [r3, #25]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	765a      	strb	r2, [r3, #25]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	7e9a      	ldrb	r2, [r3, #26]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	769a      	strb	r2, [r3, #26]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7eda      	ldrb	r2, [r3, #27]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	76da      	strb	r2, [r3, #27]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	8b9a      	ldrh	r2, [r3, #28]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	839a      	strh	r2, [r3, #28]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f993 201e 	ldrsb.w	r2, [r3, #30]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	779a      	strb	r2, [r3, #30]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	7fda      	ldrb	r2, [r3, #31]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	77da      	strb	r2, [r3, #31]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	3308      	adds	r3, #8
 8001894:	3208      	adds	r2, #8
 8001896:	6811      	ldr	r1, [r2, #0]
 8001898:	6019      	str	r1, [r3, #0]
 800189a:	8891      	ldrh	r1, [r2, #4]
 800189c:	7992      	ldrb	r2, [r2, #6]
 800189e:	8099      	strh	r1, [r3, #4]
 80018a0:	719a      	strb	r2, [r3, #6]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	3310      	adds	r3, #16
 80018a8:	3210      	adds	r2, #16
 80018aa:	6811      	ldr	r1, [r2, #0]
 80018ac:	6019      	str	r1, [r3, #0]
 80018ae:	8891      	ldrh	r1, [r2, #4]
 80018b0:	7992      	ldrb	r2, [r2, #6]
 80018b2:	8099      	strh	r1, [r3, #4]
 80018b4:	719a      	strb	r2, [r3, #6]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	8b1a      	ldrh	r2, [r3, #24]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	831a      	strh	r2, [r3, #24]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	61da      	str	r2, [r3, #28]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_ZN12StripControlaSERKS_>:
class StripControl
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	7a1a      	ldrb	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	721a      	strb	r2, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	7a5a      	ldrb	r2, [r3, #9]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	725a      	strb	r2, [r3, #9]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	7a9a      	ldrb	r2, [r3, #10]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	729a      	strb	r2, [r3, #10]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	7ada      	ldrb	r2, [r3, #11]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	72da      	strb	r2, [r3, #11]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	7b1a      	ldrb	r2, [r3, #12]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	731a      	strb	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	3310      	adds	r3, #16
 800191c:	3210      	adds	r2, #16
 800191e:	6811      	ldr	r1, [r2, #0]
 8001920:	6019      	str	r1, [r3, #0]
 8001922:	8891      	ldrh	r1, [r2, #4]
 8001924:	7992      	ldrb	r2, [r2, #6]
 8001926:	8099      	strh	r1, [r3, #4]
 8001928:	719a      	strb	r2, [r3, #6]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	3318      	adds	r3, #24
 8001930:	3218      	adds	r2, #24
 8001932:	6811      	ldr	r1, [r2, #0]
 8001934:	6019      	str	r1, [r3, #0]
 8001936:	8891      	ldrh	r1, [r2, #4]
 8001938:	7992      	ldrb	r2, [r2, #6]
 800193a:	8099      	strh	r1, [r3, #4]
 800193c:	719a      	strb	r2, [r3, #6]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	3320      	adds	r3, #32
 8001944:	3220      	adds	r2, #32
 8001946:	6811      	ldr	r1, [r2, #0]
 8001948:	6019      	str	r1, [r3, #0]
 800194a:	8891      	ldrh	r1, [r2, #4]
 800194c:	7992      	ldrb	r2, [r2, #6]
 800194e:	8099      	strh	r1, [r3, #4]
 8001950:	719a      	strb	r2, [r3, #6]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	3328      	adds	r3, #40	@ 0x28
 8001958:	3228      	adds	r2, #40	@ 0x28
 800195a:	6811      	ldr	r1, [r2, #0]
 800195c:	6019      	str	r1, [r3, #0]
 800195e:	8891      	ldrh	r1, [r2, #4]
 8001960:	7992      	ldrb	r2, [r2, #6]
 8001962:	8099      	strh	r1, [r3, #4]
 8001964:	719a      	strb	r2, [r3, #6]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	3330      	adds	r3, #48	@ 0x30
 800196c:	3230      	adds	r2, #48	@ 0x30
 800196e:	6811      	ldr	r1, [r2, #0]
 8001970:	6019      	str	r1, [r3, #0]
 8001972:	8891      	ldrh	r1, [r2, #4]
 8001974:	7992      	ldrb	r2, [r2, #6]
 8001976:	8099      	strh	r1, [r3, #4]
 8001978:	719a      	strb	r2, [r3, #6]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	3338      	adds	r3, #56	@ 0x38
 8001980:	3238      	adds	r2, #56	@ 0x38
 8001982:	6811      	ldr	r1, [r2, #0]
 8001984:	6019      	str	r1, [r3, #0]
 8001986:	8891      	ldrh	r1, [r2, #4]
 8001988:	7992      	ldrb	r2, [r2, #6]
 800198a:	8099      	strh	r1, [r3, #4]
 800198c:	719a      	strb	r2, [r3, #6]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <Init>:
		UART_HandleTypeDef   *in_huart3,

		RTC_HandleTypeDef    *in_hrtc,
		SD_HandleTypeDef     *in_hsd
	)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b0e2      	sub	sp, #392	@ 0x188
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 80019a6:	f5a4 74b6 	sub.w	r4, r4, #364	@ 0x16c
 80019aa:	6020      	str	r0, [r4, #0]
 80019ac:	f507 70bc 	add.w	r0, r7, #376	@ 0x178
 80019b0:	f5a0 70b8 	sub.w	r0, r0, #368	@ 0x170
 80019b4:	6001      	str	r1, [r0, #0]
 80019b6:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 80019ba:	f5a1 71ba 	sub.w	r1, r1, #372	@ 0x174
 80019be:	600a      	str	r2, [r1, #0]
 80019c0:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 80019c4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80019c8:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(in_htim3, TIM_CHANNEL_4);
 80019ca:	210c      	movs	r1, #12
 80019cc:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80019d0:	f00a fe3a 	bl	800c648 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(in_htim3, TIM_CHANNEL_4, UINT16_HALF);
 80019d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 80019e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019e8:	49c1      	ldr	r1, [pc, #772]	@ (8001cf0 <Init+0x354>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fbb4 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 80019f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019f8:	49bd      	ldr	r1, [pc, #756]	@ (8001cf0 <Init+0x354>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fbac 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin pwmOE = Pin(PWM_OE_GPIO_Port, PWM_OE_Pin, ACTIVE_LOW);
 8001a00:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a04:	2301      	movs	r3, #1
 8001a06:	2240      	movs	r2, #64	@ 0x40
 8001a08:	49ba      	ldr	r1, [pc, #744]	@ (8001cf4 <Init+0x358>)
 8001a0a:	f7ff fbc0 	bl	800118e <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	Pin enc1Sw = Pin(ENC1_SW_GPIO_Port, ENC1_SW_Pin, ACTIVE_LOW);
 8001a0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a12:	2301      	movs	r3, #1
 8001a14:	2220      	movs	r2, #32
 8001a16:	49b6      	ldr	r1, [pc, #728]	@ (8001cf0 <Init+0x354>)
 8001a18:	f7ff fbb9 	bl	800118e <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
	Pin enc2Sw = Pin(ENC2_SW_GPIO_Port, ENC2_SW_Pin, ACTIVE_LOW);
 8001a1c:	f107 001c 	add.w	r0, r7, #28
 8001a20:	2301      	movs	r3, #1
 8001a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a26:	49b2      	ldr	r1, [pc, #712]	@ (8001cf0 <Init+0x354>)
 8001a28:	f7ff fbb1 	bl	800118e <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>

	currentADCHandle = in_hadc1;
 8001a2c:	4ab2      	ldr	r2, [pc, #712]	@ (8001cf8 <Init+0x35c>)
 8001a2e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6013      	str	r3, [r2, #0]
	currentADC_DMAHandle = in_hdma_adc1;
 8001a3a:	4ab0      	ldr	r2, [pc, #704]	@ (8001cfc <Init+0x360>)
 8001a3c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a40:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6013      	str	r3, [r2, #0]

	stripI2cHandle = in_hfmpi2c1;
 8001a48:	4aad      	ldr	r2, [pc, #692]	@ (8001d00 <Init+0x364>)
 8001a4a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a4e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6013      	str	r3, [r2, #0]
	dmaTXStripHandle = in_hdma_fmpi2c1_tx;
 8001a56:	4aab      	ldr	r2, [pc, #684]	@ (8001d04 <Init+0x368>)
 8001a58:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a5c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6013      	str	r3, [r2, #0]

	i2cHandle = in_hi2c1;
 8001a64:	4aa8      	ldr	r2, [pc, #672]	@ (8001d08 <Init+0x36c>)
 8001a66:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001a6a:	6013      	str	r3, [r2, #0]

	audioHandle = in_hi2s5;
 8001a6c:	4aa7      	ldr	r2, [pc, #668]	@ (8001d0c <Init+0x370>)
 8001a6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a72:	6013      	str	r3, [r2, #0]
	dmaRXAudioHandle = hdma_spi5_rx;
 8001a74:	4aa6      	ldr	r2, [pc, #664]	@ (8001d10 <Init+0x374>)
 8001a76:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a7a:	6013      	str	r3, [r2, #0]

	rtcHandle = in_hrtc;
 8001a7c:	4aa5      	ldr	r2, [pc, #660]	@ (8001d14 <Init+0x378>)
 8001a7e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001a82:	6013      	str	r3, [r2, #0]
	sdHandle = in_hsd;
 8001a84:	4aa4      	ldr	r2, [pc, #656]	@ (8001d18 <Init+0x37c>)
 8001a86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a8a:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi4;
 8001a8c:	4aa3      	ldr	r2, [pc, #652]	@ (8001d1c <Init+0x380>)
 8001a8e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a92:	6013      	str	r3, [r2, #0]
	pwm1Handle = in_htim1;
 8001a94:	4aa2      	ldr	r2, [pc, #648]	@ (8001d20 <Init+0x384>)
 8001a96:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8001a9a:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8001a9c:	4aa1      	ldr	r2, [pc, #644]	@ (8001d24 <Init+0x388>)
 8001a9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001aa2:	6013      	str	r3, [r2, #0]
	adcTimHandle = in_htim8;
 8001aa4:	4aa0      	ldr	r2, [pc, #640]	@ (8001d28 <Init+0x38c>)
 8001aa6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001aaa:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 8001aac:	4a9f      	ldr	r2, [pc, #636]	@ (8001d2c <Init+0x390>)
 8001aae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001ab2:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 8001ab4:	4a9e      	ldr	r2, [pc, #632]	@ (8001d30 <Init+0x394>)
 8001ab6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001aba:	6013      	str	r3, [r2, #0]
	dmxHandle = in_huart3;
 8001abc:	4a9d      	ldr	r2, [pc, #628]	@ (8001d34 <Init+0x398>)
 8001abe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ac2:	6013      	str	r3, [r2, #0]


	encoder1 = RotaryEncoder(ENC1_A_GPIO_Port, ENC1_A_Pin, ENC1_B_GPIO_Port, ENC1_B_Pin, enc1Sw);
 8001ac4:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001ac8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001acc:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 8001ad0:	ab01      	add	r3, sp, #4
 8001ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ada:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4b83      	ldr	r3, [pc, #524]	@ (8001cf0 <Init+0x354>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae6:	4994      	ldr	r1, [pc, #592]	@ (8001d38 <Init+0x39c>)
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff fa71 	bl	8000fd0 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin>
 8001aee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001af2:	4619      	mov	r1, r3
 8001af4:	4891      	ldr	r0, [pc, #580]	@ (8001d3c <Init+0x3a0>)
 8001af6:	f7ff fe7e 	bl	80017f6 <_ZN13RotaryEncoderaSERKS_>
 8001afa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff faa0 	bl	8001044 <_ZN13RotaryEncoderD1Ev>
	encoder2 = RotaryEncoder(ENC2_A_GPIO_Port, ENC2_A_Pin, ENC2_B_GPIO_Port, ENC2_B_Pin, enc2Sw);
 8001b04:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001b08:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b0c:	f5a3 72ae 	sub.w	r2, r3, #348	@ 0x15c
 8001b10:	ab01      	add	r3, sp, #4
 8001b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b16:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4b85      	ldr	r3, [pc, #532]	@ (8001d38 <Init+0x39c>)
 8001b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b26:	4984      	ldr	r1, [pc, #528]	@ (8001d38 <Init+0x39c>)
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff fa51 	bl	8000fd0 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_t3Pin>
 8001b2e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b32:	4619      	mov	r1, r3
 8001b34:	4882      	ldr	r0, [pc, #520]	@ (8001d40 <Init+0x3a4>)
 8001b36:	f7ff fe5e 	bl	80017f6 <_ZN13RotaryEncoderaSERKS_>
 8001b3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fa80 	bl	8001044 <_ZN13RotaryEncoderD1Ev>

	encoder1.Init();
 8001b44:	487d      	ldr	r0, [pc, #500]	@ (8001d3c <Init+0x3a0>)
 8001b46:	f7ff fa9d 	bl	8001084 <_ZN13RotaryEncoder4InitEv>
	encoder2.Init();
 8001b4a:	487d      	ldr	r0, [pc, #500]	@ (8001d40 <Init+0x3a4>)
 8001b4c:	f7ff fa9a 	bl	8001084 <_ZN13RotaryEncoder4InitEv>

	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 8001b50:	4b72      	ldr	r3, [pc, #456]	@ (8001d1c <Init+0x380>)
 8001b52:	681d      	ldr	r5, [r3, #0]
 8001b54:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b5c:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8001b60:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001b64:	f5a2 719e 	sub.w	r1, r2, #316	@ 0x13c
 8001b68:	466a      	mov	r2, sp
 8001b6a:	c903      	ldmia	r1, {r0, r1}
 8001b6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b70:	cb0c      	ldmia	r3, {r2, r3}
 8001b72:	4629      	mov	r1, r5
 8001b74:	4620      	mov	r0, r4
 8001b76:	f001 fe31 	bl	80037dc <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 8001b7a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4870      	ldr	r0, [pc, #448]	@ (8001d44 <Init+0x3a8>)
 8001b82:	f7ff fe7b 	bl	800187c <_ZN9ShiftRegsaSERKS_>
 8001b86:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fe68 	bl	8003860 <_ZN9ShiftRegsD1Ev>
	stripCurr = StripCurrent(currentADCHandle, adcTimHandle, StripCurrentAlertCallback);
 8001b90:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <Init+0x35c>)
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	4b64      	ldr	r3, [pc, #400]	@ (8001d28 <Init+0x38c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d48 <Init+0x3ac>)
 8001b9e:	f001 ffea 	bl	8003b76 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefPFv18StripCurrentStatusE>
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d4c <Init+0x3b0>)
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bb6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 f805 	bl	8003bca <_ZN12StripCurrentD1Ev>
	stripCtrl = StripControl(&stripCurr);
 8001bc0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bc4:	4961      	ldr	r1, [pc, #388]	@ (8001d4c <Init+0x3b0>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fede 	bl	8003988 <_ZN12StripControlC1EP12StripCurrent>
 8001bcc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	485f      	ldr	r0, [pc, #380]	@ (8001d50 <Init+0x3b4>)
 8001bd4:	f7ff fe82 	bl	80018dc <_ZN12StripControlaSERKS_>
 8001bd8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 ff6d 	bl	8003abc <_ZN12StripControlD1Ev>
	ledA = PCA9634(0x2A, stripI2cHandle, pwmOE);
 8001be2:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <Init+0x364>)
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001bea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001bee:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	9200      	str	r2, [sp, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	460a      	mov	r2, r1
 8001bfa:	212a      	movs	r1, #42	@ 0x2a
 8001bfc:	f001 fb6a 	bl	80032d4 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>
 8001c00:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <Init+0x3b8>)
 8001c02:	461d      	mov	r5, r3
 8001c04:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8001c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	602b      	str	r3, [r5, #0]
 8001c14:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fb99 	bl	8003350 <_ZN7PCA9634D1Ev>
	ledB = PCA9634(0x2A, stripI2cHandle, pwmOE);
 8001c1e:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <Init+0x364>)
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c2a:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	460a      	mov	r2, r1
 8001c36:	212a      	movs	r1, #42	@ 0x2a
 8001c38:	f001 fb4c 	bl	80032d4 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>
 8001c3c:	4b46      	ldr	r3, [pc, #280]	@ (8001d58 <Init+0x3bc>)
 8001c3e:	461d      	mov	r5, r3
 8001c40:	f507 7492 	add.w	r4, r7, #292	@ 0x124
 8001c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	602b      	str	r3, [r5, #0]
 8001c50:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fb7b 	bl	8003350 <_ZN7PCA9634D1Ev>
	ledC = PCA9634(0x2A, stripI2cHandle, pwmOE);
 8001c5a:	4b29      	ldr	r3, [pc, #164]	@ (8001d00 <Init+0x364>)
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c66:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	460a      	mov	r2, r1
 8001c72:	212a      	movs	r1, #42	@ 0x2a
 8001c74:	f001 fb2e 	bl	80032d4 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>
 8001c78:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <Init+0x3c0>)
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8001c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	602b      	str	r3, [r5, #0]
 8001c8c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 fb5d 	bl	8003350 <_ZN7PCA9634D1Ev>

	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_1);
 8001c96:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <Init+0x384>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00a fcd3 	bl	800c648 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm1Handle, TIM_CHANNEL_3);
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <Init+0x384>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2108      	movs	r1, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00a fccd 	bl	800c648 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm3Handle, TIM_CHANNEL_1);
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <Init+0x388>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00a fcc7 	bl	800c648 <HAL_TIM_PWM_Start>


//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);

	settings = PCA9634Settings();
 8001cba:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	811a      	strh	r2, [r3, #8]
 8001cc6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff faa2 	bl	8001214 <_ZN15PCA9634SettingsC1Ev>
 8001cd0:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <Init+0x3c4>)
 8001cd2:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cd8:	c303      	stmia	r3!, {r0, r1}
 8001cda:	801a      	strh	r2, [r3, #0]
	settings.Driver = PCA9634_OUTPUT_DRIVER::TOTEM_POLE;
 8001cdc:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <Init+0x3c4>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	711a      	strb	r2, [r3, #4]
	settings.Invert = PCA9634_OUTPUT_LOGIC::INVERTED;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <Init+0x3c4>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	709a      	strb	r2, [r3, #2]
	ledA.ChangeSettings(settings);
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <Init+0x3c4>)
 8001cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cec:	e03a      	b.n	8001d64 <Init+0x3c8>
 8001cee:	bf00      	nop
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	2000008c 	.word	0x2000008c
 8001cfc:	20000090 	.word	0x20000090
 8001d00:	20000094 	.word	0x20000094
 8001d04:	20000098 	.word	0x20000098
 8001d08:	2000009c 	.word	0x2000009c
 8001d0c:	200000a0 	.word	0x200000a0
 8001d10:	200000a4 	.word	0x200000a4
 8001d14:	200000c4 	.word	0x200000c4
 8001d18:	200000c8 	.word	0x200000c8
 8001d1c:	200000a8 	.word	0x200000a8
 8001d20:	200000ac 	.word	0x200000ac
 8001d24:	200000b0 	.word	0x200000b0
 8001d28:	200000b4 	.word	0x200000b4
 8001d2c:	200000b8 	.word	0x200000b8
 8001d30:	200000bc 	.word	0x200000bc
 8001d34:	200000c0 	.word	0x200000c0
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	200003e8 	.word	0x200003e8
 8001d40:	20000408 	.word	0x20000408
 8001d44:	200000cc 	.word	0x200000cc
 8001d48:	080017e1 	.word	0x080017e1
 8001d4c:	20000110 	.word	0x20000110
 8001d50:	20000128 	.word	0x20000128
 8001d54:	20000168 	.word	0x20000168
 8001d58:	2000018c 	.word	0x2000018c
 8001d5c:	200001b0 	.word	0x200001b0
 8001d60:	200001d8 	.word	0x200001d8
 8001d64:	4825      	ldr	r0, [pc, #148]	@ (8001dfc <Init+0x460>)
 8001d66:	f001 fb05 	bl	8003374 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>

	shiftReg.Init();
 8001d6a:	4825      	ldr	r0, [pc, #148]	@ (8001e00 <Init+0x464>)
 8001d6c:	f001 fda0 	bl	80038b0 <_ZN9ShiftRegs4InitEv>

	if (stripCurr.Init() != HAL_OK)
 8001d70:	4824      	ldr	r0, [pc, #144]	@ (8001e04 <Init+0x468>)
 8001d72:	f001 ff45 	bl	8003c00 <_ZN12StripCurrent4InitEv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <Init+0x3ee>
	{
		return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e032      	b.n	8001df0 <Init+0x454>
	}

	stripCtrl.Init();
 8001d8a:	481f      	ldr	r0, [pc, #124]	@ (8001e08 <Init+0x46c>)
 8001d8c:	f001 feba 	bl	8003b04 <_ZN12StripControl4InitEv>

	NextionCallbacks callbacks = NextionCallbacks();
 8001d90:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d94:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001da0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
	callbacks.PageChange = PageChangeCallbackHandle;
 8001da8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001db0:	4a16      	ldr	r2, [pc, #88]	@ (8001e0c <Init+0x470>)
 8001db2:	601a      	str	r2, [r3, #0]
	callbacks.TouchEvent = TouchEventCallbackHandle;
 8001db4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001db8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001dbc:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <Init+0x474>)
 8001dbe:	605a      	str	r2, [r3, #4]

	next.Startup(screenHandle, callbacks);
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <Init+0x478>)
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001dc8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001dcc:	cb0c      	ldmia	r3, {r2, r3}
 8001dce:	4812      	ldr	r0, [pc, #72]	@ (8001e18 <Init+0x47c>)
 8001dd0:	f001 f954 	bl	800307c <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks>
	screenCtrl.Init(&next, pages);
 8001dd4:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <Init+0x480>)
 8001dd6:	4910      	ldr	r1, [pc, #64]	@ (8001e18 <Init+0x47c>)
 8001dd8:	4811      	ldr	r0, [pc, #68]	@ (8001e20 <Init+0x484>)
 8001dda:	f001 fc1b 	bl	8003614 <_ZN13ScreenControl4InitEP7NextionP4Page>
	screenCtrl.HomePage();
 8001dde:	4810      	ldr	r0, [pc, #64]	@ (8001e20 <Init+0x484>)
 8001de0:	f001 fc9f 	bl	8003722 <_ZN13ScreenControl8HomePageEv>

//	stripCtrl.Power(GPIO_PIN_SET);

//	HAL_I2S_Receive_DMA(audioHandle, (uint16_t*)audioBuffer, AUDIO_BUFFER_SIZE);

	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_4, 0);
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <Init+0x488>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40
	return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000168 	.word	0x20000168
 8001e00:	200000cc 	.word	0x200000cc
 8001e04:	20000110 	.word	0x20000110
 8001e08:	20000128 	.word	0x20000128
 8001e0c:	08001795 	.word	0x08001795
 8001e10:	080017b5 	.word	0x080017b5
 8001e14:	200000b8 	.word	0x200000b8
 8001e18:	200000f0 	.word	0x200000f0
 8001e1c:	20000ef4 	.word	0x20000ef4
 8001e20:	20000428 	.word	0x20000428
 8001e24:	200000b0 	.word	0x200000b0

08001e28 <InitTest>:

void InitTest()
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
//	shiftReg.IndicatorTest();
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	indicator = !indicator;
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f70 <Main+0x138>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <Main+0x138>)
 8001e48:	701a      	strb	r2, [r3, #0]
	ledA.SetAll(indicator);
 8001e4a:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <Main+0x138>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4848      	ldr	r0, [pc, #288]	@ (8001f74 <Main+0x13c>)
 8001e52:	f001 fac7 	bl	80033e4 <_ZN7PCA96346SetAllEb>
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_1, indicator ? UINT16_MAX / 2 : 0);
 8001e56:	4b46      	ldr	r3, [pc, #280]	@ (8001f70 <Main+0x138>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <Main+0x2c>
 8001e5e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001e62:	e000      	b.n	8001e66 <Main+0x2e>
 8001e64:	2200      	movs	r2, #0
 8001e66:	4b44      	ldr	r3, [pc, #272]	@ (8001f78 <Main+0x140>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(pwm1Handle, TIM_CHANNEL_3, !indicator ? UINT16_MAX : 0);
 8001e6e:	4b40      	ldr	r3, [pc, #256]	@ (8001f70 <Main+0x138>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <Main+0x42>
 8001e76:	2200      	movs	r2, #0
 8001e78:	e001      	b.n	8001e7e <Main+0x46>
 8001e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <Main+0x140>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	63da      	str	r2, [r3, #60]	@ 0x3c

	ledA.SetChannel(0, (uint8_t)(sin(count) * 127 + 127));
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <Main+0x144>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f8f4 	bl	8002078 <_ZSt3sinIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e90:	ec51 0b10 	vmov	r0, r1, d0
 8001e94:	a334      	add	r3, pc, #208	@ (adr r3, 8001f68 <Main+0x130>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fbcd 	bl	8000638 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	a330      	add	r3, pc, #192	@ (adr r3, 8001f68 <Main+0x130>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fa0e 	bl	80002cc <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fe96 	bl	8000be8 <__aeabi_d2uiz>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	482b      	ldr	r0, [pc, #172]	@ (8001f74 <Main+0x13c>)
 8001ec6:	f001 fa79 	bl	80033bc <_ZN7PCA963410SetChannelEhh>
	ledA.SetChannel(1, (uint8_t)(cos(count) * 127 + 127));
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <Main+0x144>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f8ec 	bl	80020ac <_ZSt3cosIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ed4:	ec51 0b10 	vmov	r0, r1, d0
 8001ed8:	a323      	add	r3, pc, #140	@ (adr r3, 8001f68 <Main+0x130>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fbab 	bl	8000638 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	a31f      	add	r3, pc, #124	@ (adr r3, 8001f68 <Main+0x130>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe f9ec 	bl	80002cc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe74 	bl	8000be8 <__aeabi_d2uiz>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	2101      	movs	r1, #1
 8001f08:	481a      	ldr	r0, [pc, #104]	@ (8001f74 <Main+0x13c>)
 8001f0a:	f001 fa57 	bl	80033bc <_ZN7PCA963410SetChannelEhh>
	ledA.SetChannel(2, (uint8_t)(sin(count) * 127 + 64));
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <Main+0x144>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f8b0 	bl	8002078 <_ZSt3sinIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f18:	ec51 0b10 	vmov	r0, r1, d0
 8001f1c:	a312      	add	r3, pc, #72	@ (adr r3, 8001f68 <Main+0x130>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fb89 	bl	8000638 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <Main+0x148>)
 8001f34:	f7fe f9ca 	bl	80002cc <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fe52 	bl	8000be8 <__aeabi_d2uiz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4809      	ldr	r0, [pc, #36]	@ (8001f74 <Main+0x13c>)
 8001f4e:	f001 fa35 	bl	80033bc <_ZN7PCA963410SetChannelEhh>

	ledA.Update();
 8001f52:	4808      	ldr	r0, [pc, #32]	@ (8001f74 <Main+0x13c>)
 8001f54:	f001 fa57 	bl	8003406 <_ZN7PCA96346UpdateEv>

	HAL_Delay(250);
 8001f58:	20fa      	movs	r0, #250	@ 0xfa
 8001f5a:	f004 fb47 	bl	80065ec <HAL_Delay>
//
//	ReadCurrent();
//	shiftReg.Update();

//	next.CheckForTouchEvents();
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	405fc000 	.word	0x405fc000
 8001f70:	200003e4 	.word	0x200003e4
 8001f74:	20000168 	.word	0x20000168
 8001f78:	200000ac 	.word	0x200000ac
 8001f7c:	200001d4 	.word	0x200001d4
 8001f80:	40500000 	.word	0x40500000

08001f84 <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_UP_IND);
	screenCtrl.NavigateVert(-1);
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <MenuUpInterruptCallback+0x14>)
 8001f8e:	f001 fb66 	bl	800365e <_ZN13ScreenControl12NavigateVertEa>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000428 	.word	0x20000428

08001f9c <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_DOWN_IND);
	screenCtrl.NavigateVert(1);
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4802      	ldr	r0, [pc, #8]	@ (8001fac <MenuDownInterruptCallback+0x10>)
 8001fa4:	f001 fb5b 	bl	800365e <_ZN13ScreenControl12NavigateVertEa>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000428 	.word	0x20000428

08001fb0 <MenuLeftInterruptCallback>:
void MenuLeftInterruptCallback()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	screenCtrl.NavigateHorz(-1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <MenuLeftInterruptCallback+0x14>)
 8001fba:	f001 fb3e 	bl	800363a <_ZN13ScreenControl12NavigateHorzEa>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000428 	.word	0x20000428

08001fc8 <MenuRightInterruptCallback>:
void MenuRightInterruptCallback()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
//	shiftReg.ToggleValue(MENU_RIGHT_IND);
	screenCtrl.NavigateHorz(1);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <MenuRightInterruptCallback+0x10>)
 8001fd0:	f001 fb33 	bl	800363a <_ZN13ScreenControl12NavigateHorzEa>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000428 	.word	0x20000428

08001fdc <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 8001fe0:	2108      	movs	r1, #8
 8001fe2:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <MenuActInterruptCallback+0x18>)
 8001fe4:	f001 fca3 	bl	800392e <_ZN9ShiftRegs11ToggleValueEj>
	screenCtrl.Act();
 8001fe8:	4803      	ldr	r0, [pc, #12]	@ (8001ff8 <MenuActInterruptCallback+0x1c>)
 8001fea:	f001 fbd1 	bl	8003790 <_ZN13ScreenControl3ActEv>
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200000cc 	.word	0x200000cc
 8001ff8:	20000428 	.word	0x20000428

08001ffc <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	screenCtrl.HomePage();
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <MenuBackInterruptCallback+0x10>)
 8002002:	f001 fb8e 	bl	8003722 <_ZN13ScreenControl8HomePageEv>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000428 	.word	0x20000428

08002010 <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	encoder1.Decode();
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <Enc1TurnInterruptCallback+0x10>)
 8002016:	f7ff f856 	bl	80010c6 <_ZN13RotaryEncoder6DecodeEv>
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200003e8 	.word	0x200003e8

08002024 <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	encoder2.Decode();
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <Enc2TurnInterruptCallback+0x10>)
 800202a:	f7ff f84c 	bl	80010c6 <_ZN13RotaryEncoder6DecodeEv>
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000408 	.word	0x20000408

08002038 <_ZSt3powImiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fa7e 	bl	8000544 <__aeabi_ui2d>
 8002048:	4604      	mov	r4, r0
 800204a:	460d      	mov	r5, r1
 800204c:	6838      	ldr	r0, [r7, #0]
 800204e:	f7fe fa89 	bl	8000564 <__aeabi_i2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	ec43 2b11 	vmov	d1, r2, r3
 800205a:	ec45 4b10 	vmov	d0, r4, r5
 800205e:	f00d fac1 	bl	800f5e4 <pow>
 8002062:	eeb0 7a40 	vmov.f32	s14, s0
 8002066:	eef0 7a60 	vmov.f32	s15, s1
    }
 800206a:	eeb0 0a47 	vmov.f32	s0, s14
 800206e:	eef0 0a67 	vmov.f32	s1, s15
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}

08002078 <_ZSt3sinIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sin(_Tp __x)
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
    { return __builtin_sin(__x); }
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fa5d 	bl	8000544 <__aeabi_ui2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	ec43 2b10 	vmov	d0, r2, r3
 8002092:	f00d fb99 	bl	800f7c8 <sin>
 8002096:	eeb0 7a40 	vmov.f32	s14, s0
 800209a:	eef0 7a60 	vmov.f32	s15, s1
 800209e:	eeb0 0a47 	vmov.f32	s0, s14
 80020a2:	eef0 0a67 	vmov.f32	s1, s15
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZSt3cosIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    cos(_Tp __x)
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
    { return __builtin_cos(__x); }
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa43 	bl	8000544 <__aeabi_ui2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	ec43 2b10 	vmov	d0, r2, r3
 80020c6:	f00d fb2b 	bl	800f720 <cos>
 80020ca:	eeb0 7a40 	vmov.f32	s14, s0
 80020ce:	eef0 7a60 	vmov.f32	s15, s1
 80020d2:	eeb0 0a47 	vmov.f32	s0, s14
 80020d6:	eef0 0a67 	vmov.f32	s1, s15
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_Z41__static_initialization_and_destruction_0ii>:
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af06      	add	r7, sp, #24
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	f040 84b4 	bne.w	8002a5a <_Z41__static_initialization_and_destruction_0ii+0x97a>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f8:	4293      	cmp	r3, r2
 80020fa:	f040 84ae 	bne.w	8002a5a <_Z41__static_initialization_and_destruction_0ii+0x97a>
ShiftRegs shiftReg;
 80020fe:	48ad      	ldr	r0, [pc, #692]	@ (80023b4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8002100:	f7ff f870 	bl	80011e4 <_ZN9ShiftRegsC1Ev>
Nextion next = Nextion();
 8002104:	48ac      	ldr	r0, [pc, #688]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002106:	f000 ff43 	bl	8002f90 <_ZN7NextionC1Ev>
StripCurrent stripCurr;
 800210a:	48ac      	ldr	r0, [pc, #688]	@ (80023bc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800210c:	f7ff f85e 	bl	80011cc <_ZN12StripCurrentC1Ev>
StripControl stripCtrl;
 8002110:	48ab      	ldr	r0, [pc, #684]	@ (80023c0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8002112:	f7ff f8ad 	bl	8001270 <_ZN12StripControlC1Ev>
PCA9634 ledA;
 8002116:	48ab      	ldr	r0, [pc, #684]	@ (80023c4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8002118:	f7ff f893 	bl	8001242 <_ZN7PCA9634C1Ev>
PCA9634 ledB;
 800211c:	48aa      	ldr	r0, [pc, #680]	@ (80023c8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800211e:	f7ff f890 	bl	8001242 <_ZN7PCA9634C1Ev>
PCA9634 ledC;
 8002122:	48aa      	ldr	r0, [pc, #680]	@ (80023cc <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8002124:	f7ff f88d 	bl	8001242 <_ZN7PCA9634C1Ev>
PCA9634Settings settings;
 8002128:	48a9      	ldr	r0, [pc, #676]	@ (80023d0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800212a:	f7ff f873 	bl	8001214 <_ZN15PCA9634SettingsC1Ev>
RotaryEncoder encoder1;
 800212e:	48a9      	ldr	r0, [pc, #676]	@ (80023d4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8002130:	f7ff f996 	bl	8001460 <_ZN13RotaryEncoderC1Ev>
RotaryEncoder encoder2;
 8002134:	48a8      	ldr	r0, [pc, #672]	@ (80023d8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8002136:	f7ff f993 	bl	8001460 <_ZN13RotaryEncoderC1Ev>
ScreenControl screenCtrl;
 800213a:	48a8      	ldr	r0, [pc, #672]	@ (80023dc <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800213c:	f7ff f97c 	bl	8001438 <_ZN13ScreenControlC1Ev>
PageButton homeBtn = PageButton(&next, 1, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002140:	4ba7      	ldr	r3, [pc, #668]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002142:	9303      	str	r3, [sp, #12]
 8002144:	2301      	movs	r3, #1
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2300      	movs	r3, #0
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	2300      	movs	r3, #0
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4ba4      	ldr	r3, [pc, #656]	@ (80023e4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8002152:	2201      	movs	r2, #1
 8002154:	4998      	ldr	r1, [pc, #608]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002156:	48a4      	ldr	r0, [pc, #656]	@ (80023e8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8002158:	f7ff f932 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton settingsBtn = PageButton(&next, 2, "pb5", 1, 0, 5, ScreenChangeCallback);
 800215c:	4ba0      	ldr	r3, [pc, #640]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800215e:	9303      	str	r3, [sp, #12]
 8002160:	2305      	movs	r3, #5
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2301      	movs	r3, #1
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4b9f      	ldr	r3, [pc, #636]	@ (80023ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800216e:	2202      	movs	r2, #2
 8002170:	4991      	ldr	r1, [pc, #580]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002172:	489f      	ldr	r0, [pc, #636]	@ (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8002174:	f7ff f924 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8002178:	4c9e      	ldr	r4, [pc, #632]	@ (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800217a:	499b      	ldr	r1, [pc, #620]	@ (80023e8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff f9df 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002182:	f104 0318 	add.w	r3, r4, #24
 8002186:	499a      	ldr	r1, [pc, #616]	@ (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f9d9 	bl	8001540 <_ZN10PageButtonC1ERKS_>
PageButton mainPageBtn   = PageButton(&next, 7, "pb1", 0, 0, 2, ScreenChangeCallback);
 800218e:	4b94      	ldr	r3, [pc, #592]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	2302      	movs	r3, #2
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2300      	movs	r3, #0
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4b91      	ldr	r3, [pc, #580]	@ (80023e4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	4985      	ldr	r1, [pc, #532]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80021a4:	4894      	ldr	r0, [pc, #592]	@ (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80021a6:	f7ff f90b 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chnPageBtn    = PageButton(&next, 1, "pb2", 0, 1, 3, ScreenChangeCallback);
 80021aa:	4b8d      	ldr	r3, [pc, #564]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80021ac:	9303      	str	r3, [sp, #12]
 80021ae:	2303      	movs	r3, #3
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4b90      	ldr	r3, [pc, #576]	@ (80023fc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80021bc:	2201      	movs	r2, #1
 80021be:	497e      	ldr	r1, [pc, #504]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80021c0:	488f      	ldr	r0, [pc, #572]	@ (8002400 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80021c2:	f7ff f8fd 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chCfgPageBtn  = PageButton(&next, 6, "pb3", 0, 2, 4, ScreenChangeCallback);
 80021c6:	4b86      	ldr	r3, [pc, #536]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	2304      	movs	r3, #4
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2302      	movs	r3, #2
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002404 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80021d8:	2206      	movs	r2, #6
 80021da:	4977      	ldr	r1, [pc, #476]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80021dc:	488a      	ldr	r0, [pc, #552]	@ (8002408 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80021de:	f7ff f8ef 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton audPageBtn    = PageButton(&next, 4, "pb5", 0, 3, 6, ScreenChangeCallback);
 80021e2:	4b7f      	ldr	r3, [pc, #508]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	2306      	movs	r3, #6
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2303      	movs	r3, #3
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4b7e      	ldr	r3, [pc, #504]	@ (80023ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80021f4:	2204      	movs	r2, #4
 80021f6:	4970      	ldr	r1, [pc, #448]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80021f8:	4884      	ldr	r0, [pc, #528]	@ (800240c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80021fa:	f7ff f8e1 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton patPageBtn    = PageButton(&next, 5, "pb7", 1, 1, 8, ScreenChangeCallback);
 80021fe:	4b78      	ldr	r3, [pc, #480]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	2308      	movs	r3, #8
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2301      	movs	r3, #1
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8002210:	2205      	movs	r2, #5
 8002212:	4969      	ldr	r1, [pc, #420]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002214:	487f      	ldr	r0, [pc, #508]	@ (8002414 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8002216:	f7ff f8d3 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton colPageBtn    = PageButton(&next, 8, "pb6", 1, 2, 7, ScreenChangeCallback);
 800221a:	4b71      	ldr	r3, [pc, #452]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800221c:	9303      	str	r3, [sp, #12]
 800221e:	2307      	movs	r3, #7
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	2302      	movs	r3, #2
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	2301      	movs	r3, #1
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4b7b      	ldr	r3, [pc, #492]	@ (8002418 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800222c:	2208      	movs	r2, #8
 800222e:	4962      	ldr	r1, [pc, #392]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002230:	487a      	ldr	r0, [pc, #488]	@ (800241c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8002232:	f7ff f8c5 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton settPageBtn   = PageButton(&next, 2, "pb4", 1, 3, 5, ScreenChangeCallback);
 8002236:	4b6a      	ldr	r3, [pc, #424]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	2305      	movs	r3, #5
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	2303      	movs	r3, #3
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	2301      	movs	r3, #1
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4b76      	ldr	r3, [pc, #472]	@ (8002420 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8002248:	2202      	movs	r2, #2
 800224a:	495b      	ldr	r1, [pc, #364]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800224c:	4875      	ldr	r0, [pc, #468]	@ (8002424 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800224e:	f7ff f8b7 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8002252:	4c75      	ldr	r4, [pc, #468]	@ (8002428 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8002254:	4968      	ldr	r1, [pc, #416]	@ (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff f972 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 800225c:	3418      	adds	r4, #24
 800225e:	4968      	ldr	r1, [pc, #416]	@ (8002400 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff f96d 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002266:	3418      	adds	r4, #24
 8002268:	4967      	ldr	r1, [pc, #412]	@ (8002408 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff f968 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002270:	3418      	adds	r4, #24
 8002272:	4966      	ldr	r1, [pc, #408]	@ (800240c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff f963 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 800227a:	3418      	adds	r4, #24
 800227c:	4965      	ldr	r1, [pc, #404]	@ (8002414 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff f95e 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002284:	3418      	adds	r4, #24
 8002286:	4965      	ldr	r1, [pc, #404]	@ (800241c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff f959 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 800228e:	f104 0318 	add.w	r3, r4, #24
 8002292:	4964      	ldr	r1, [pc, #400]	@ (8002424 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f953 	bl	8001540 <_ZN10PageButtonC1ERKS_>
Page homePage = Page(&next, 1, NULL, 0, mainBtns, 7);
 800229a:	2307      	movs	r3, #7
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	4b62      	ldr	r3, [pc, #392]	@ (8002428 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2300      	movs	r3, #0
 80022a8:	2201      	movs	r2, #1
 80022aa:	4943      	ldr	r1, [pc, #268]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80022ac:	485f      	ldr	r0, [pc, #380]	@ (800242c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80022ae:	f003 fd57 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button runBtn = Button(&next, 2, "b0", 0, 1);
 80022b2:	2301      	movs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2300      	movs	r3, #0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002430 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80022bc:	2202      	movs	r2, #2
 80022be:	493e      	ldr	r1, [pc, #248]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80022c0:	485c      	ldr	r0, [pc, #368]	@ (8002434 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80022c2:	f7ff f85d 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
};
 80022c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80022c8:	495a      	ldr	r1, [pc, #360]	@ (8002434 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f9a8 	bl	8001620 <_ZN6ButtonC1ERKS_>
PageButton runHomeBtn = PageButton(&next, 2, "pb1", 0, 0, 1, ScreenChangeCallback);
 80022d0:	4b43      	ldr	r3, [pc, #268]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80022d2:	9303      	str	r3, [sp, #12]
 80022d4:	2301      	movs	r3, #1
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	2300      	movs	r3, #0
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80022e2:	2202      	movs	r2, #2
 80022e4:	4934      	ldr	r1, [pc, #208]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80022e6:	4855      	ldr	r0, [pc, #340]	@ (800243c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80022e8:	f7ff f86a 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton runSettingsBtn = PageButton(&next, 3, "pb5", 1, 0, 5, ScreenChangeCallback);
 80022ec:	4b3c      	ldr	r3, [pc, #240]	@ (80023e0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80022ee:	9303      	str	r3, [sp, #12]
 80022f0:	2305      	movs	r3, #5
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2301      	movs	r3, #1
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80022fe:	2203      	movs	r2, #3
 8002300:	492d      	ldr	r1, [pc, #180]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002302:	484f      	ldr	r0, [pc, #316]	@ (8002440 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8002304:	f7ff f85c 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8002308:	4c4e      	ldr	r4, [pc, #312]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800230a:	494c      	ldr	r1, [pc, #304]	@ (800243c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff f917 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002312:	f104 0318 	add.w	r3, r4, #24
 8002316:	494a      	ldr	r1, [pc, #296]	@ (8002440 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff f911 	bl	8001540 <_ZN10PageButtonC1ERKS_>
Page runPage = Page(&next, 2, runBtns, 1, runPageBtns, 2);
 800231e:	2302      	movs	r3, #2
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	4b48      	ldr	r3, [pc, #288]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	2301      	movs	r3, #1
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800232c:	2202      	movs	r2, #2
 800232e:	4922      	ldr	r1, [pc, #136]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002330:	4845      	ldr	r0, [pc, #276]	@ (8002448 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8002332:	f003 fd15 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button srcCh1Btn = Button(&next, 3, "b0", 0, 1);
 8002336:	2301      	movs	r3, #1
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8002340:	2203      	movs	r2, #3
 8002342:	491d      	ldr	r1, [pc, #116]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002344:	4841      	ldr	r0, [pc, #260]	@ (800244c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8002346:	f7ff f81b 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh2Btn = Button(&next, 21, "b1", 1, 1);
 800234a:	2301      	movs	r3, #1
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2301      	movs	r3, #1
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8002354:	2215      	movs	r2, #21
 8002356:	4918      	ldr	r1, [pc, #96]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002358:	483e      	ldr	r0, [pc, #248]	@ (8002454 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800235a:	f7ff f811 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh3Btn = Button(&next, 22, "b2", 2, 1);
 800235e:	2301      	movs	r3, #1
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2302      	movs	r3, #2
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4b3c      	ldr	r3, [pc, #240]	@ (8002458 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8002368:	2216      	movs	r2, #22
 800236a:	4913      	ldr	r1, [pc, #76]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800236c:	483b      	ldr	r0, [pc, #236]	@ (800245c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800236e:	f7ff f807 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh4Btn = Button(&next, 23, "b3", 3, 1);
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2303      	movs	r3, #3
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800237c:	2217      	movs	r2, #23
 800237e:	490e      	ldr	r1, [pc, #56]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002380:	4838      	ldr	r0, [pc, #224]	@ (8002464 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8002382:	f7fe fffd 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh5Btn = Button(&next, 24, "b4", 4, 1);
 8002386:	2301      	movs	r3, #1
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2304      	movs	r3, #4
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8002390:	2218      	movs	r2, #24
 8002392:	4909      	ldr	r1, [pc, #36]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002394:	4835      	ldr	r0, [pc, #212]	@ (800246c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8002396:	f7fe fff3 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh6Btn = Button(&next, 25, "b5", 5, 1);
 800239a:	2301      	movs	r3, #1
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	2305      	movs	r3, #5
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4b33      	ldr	r3, [pc, #204]	@ (8002470 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80023a4:	2219      	movs	r2, #25
 80023a6:	4904      	ldr	r1, [pc, #16]	@ (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80023a8:	4832      	ldr	r0, [pc, #200]	@ (8002474 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80023aa:	f7fe ffe9 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh7Btn = Button(&next, 26, "b6", 6, 1);
 80023ae:	2301      	movs	r3, #1
 80023b0:	e062      	b.n	8002478 <_Z41__static_initialization_and_destruction_0ii+0x398>
 80023b2:	bf00      	nop
 80023b4:	200000cc 	.word	0x200000cc
 80023b8:	200000f0 	.word	0x200000f0
 80023bc:	20000110 	.word	0x20000110
 80023c0:	20000128 	.word	0x20000128
 80023c4:	20000168 	.word	0x20000168
 80023c8:	2000018c 	.word	0x2000018c
 80023cc:	200001b0 	.word	0x200001b0
 80023d0:	200001d8 	.word	0x200001d8
 80023d4:	200003e8 	.word	0x200003e8
 80023d8:	20000408 	.word	0x20000408
 80023dc:	20000428 	.word	0x20000428
 80023e0:	080014a1 	.word	0x080014a1
 80023e4:	08011f30 	.word	0x08011f30
 80023e8:	2000043c 	.word	0x2000043c
 80023ec:	08011f34 	.word	0x08011f34
 80023f0:	20000454 	.word	0x20000454
 80023f4:	2000046c 	.word	0x2000046c
 80023f8:	2000049c 	.word	0x2000049c
 80023fc:	08011f38 	.word	0x08011f38
 8002400:	200004b4 	.word	0x200004b4
 8002404:	08011f3c 	.word	0x08011f3c
 8002408:	200004cc 	.word	0x200004cc
 800240c:	200004e4 	.word	0x200004e4
 8002410:	08011f40 	.word	0x08011f40
 8002414:	200004fc 	.word	0x200004fc
 8002418:	08011f44 	.word	0x08011f44
 800241c:	20000514 	.word	0x20000514
 8002420:	08011f48 	.word	0x08011f48
 8002424:	2000052c 	.word	0x2000052c
 8002428:	20000544 	.word	0x20000544
 800242c:	200005ec 	.word	0x200005ec
 8002430:	08011f4c 	.word	0x08011f4c
 8002434:	2000061c 	.word	0x2000061c
 8002438:	20000634 	.word	0x20000634
 800243c:	2000064c 	.word	0x2000064c
 8002440:	20000664 	.word	0x20000664
 8002444:	2000067c 	.word	0x2000067c
 8002448:	200006ac 	.word	0x200006ac
 800244c:	200006dc 	.word	0x200006dc
 8002450:	08011f50 	.word	0x08011f50
 8002454:	200006f4 	.word	0x200006f4
 8002458:	08011f54 	.word	0x08011f54
 800245c:	2000070c 	.word	0x2000070c
 8002460:	08011f58 	.word	0x08011f58
 8002464:	20000724 	.word	0x20000724
 8002468:	08011f5c 	.word	0x08011f5c
 800246c:	2000073c 	.word	0x2000073c
 8002470:	08011f60 	.word	0x08011f60
 8002474:	20000754 	.word	0x20000754
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2306      	movs	r3, #6
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4bb5      	ldr	r3, [pc, #724]	@ (8002754 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8002480:	221a      	movs	r2, #26
 8002482:	49b5      	ldr	r1, [pc, #724]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002484:	48b5      	ldr	r0, [pc, #724]	@ (800275c <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8002486:	f7fe ff7b 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button srcCh8Btn = Button(&next, 27, "b7", 7, 1);
 800248a:	2301      	movs	r3, #1
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	2307      	movs	r3, #7
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	4bb3      	ldr	r3, [pc, #716]	@ (8002760 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8002494:	221b      	movs	r2, #27
 8002496:	49b0      	ldr	r1, [pc, #704]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002498:	48b2      	ldr	r0, [pc, #712]	@ (8002764 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 800249a:	f7fe ff71 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
ProgressBar ch1Bar = ProgressBar(&next, 1, "j0");
 800249e:	4bb2      	ldr	r3, [pc, #712]	@ (8002768 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	49ad      	ldr	r1, [pc, #692]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024a4:	48b1      	ldr	r0, [pc, #708]	@ (800276c <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80024a6:	f7fe ffaf 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch2Bar = ProgressBar(&next, 4, "j1");
 80024aa:	4bb1      	ldr	r3, [pc, #708]	@ (8002770 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80024ac:	2204      	movs	r2, #4
 80024ae:	49aa      	ldr	r1, [pc, #680]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024b0:	48b0      	ldr	r0, [pc, #704]	@ (8002774 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80024b2:	f7fe ffa9 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch3Bar = ProgressBar(&next, 6, "j2");
 80024b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002778 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 80024b8:	2206      	movs	r2, #6
 80024ba:	49a7      	ldr	r1, [pc, #668]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024bc:	48af      	ldr	r0, [pc, #700]	@ (800277c <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 80024be:	f7fe ffa3 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch4Bar = ProgressBar(&next, 8, "j3");
 80024c2:	4baf      	ldr	r3, [pc, #700]	@ (8002780 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 80024c4:	2208      	movs	r2, #8
 80024c6:	49a4      	ldr	r1, [pc, #656]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024c8:	48ae      	ldr	r0, [pc, #696]	@ (8002784 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 80024ca:	f7fe ff9d 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch5Bar = ProgressBar(&next, 10, "j4");
 80024ce:	4bae      	ldr	r3, [pc, #696]	@ (8002788 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 80024d0:	220a      	movs	r2, #10
 80024d2:	49a1      	ldr	r1, [pc, #644]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024d4:	48ad      	ldr	r0, [pc, #692]	@ (800278c <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 80024d6:	f7fe ff97 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch6Bar = ProgressBar(&next, 12, "j5");
 80024da:	4bad      	ldr	r3, [pc, #692]	@ (8002790 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 80024dc:	220c      	movs	r2, #12
 80024de:	499e      	ldr	r1, [pc, #632]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024e0:	48ac      	ldr	r0, [pc, #688]	@ (8002794 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80024e2:	f7fe ff91 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch7Bar = ProgressBar(&next, 14, "j6");
 80024e6:	4bac      	ldr	r3, [pc, #688]	@ (8002798 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 80024e8:	220e      	movs	r2, #14
 80024ea:	499b      	ldr	r1, [pc, #620]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024ec:	48ab      	ldr	r0, [pc, #684]	@ (800279c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 80024ee:	f7fe ff8b 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
ProgressBar ch8Bar = ProgressBar(&next, 16, "j7");
 80024f2:	4bab      	ldr	r3, [pc, #684]	@ (80027a0 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80024f4:	2210      	movs	r2, #16
 80024f6:	4998      	ldr	r1, [pc, #608]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80024f8:	48aa      	ldr	r0, [pc, #680]	@ (80027a4 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80024fa:	f7fe ff85 	bl	8001408 <_ZN11ProgressBarC1EP7NextionhPKc>
PageButton chVisHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1, ScreenChangeCallback);
 80024fe:	4baa      	ldr	r3, [pc, #680]	@ (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8002500:	9303      	str	r3, [sp, #12]
 8002502:	2301      	movs	r3, #1
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	2300      	movs	r3, #0
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4ba7      	ldr	r3, [pc, #668]	@ (80027ac <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8002510:	2212      	movs	r2, #18
 8002512:	4991      	ldr	r1, [pc, #580]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002514:	48a6      	ldr	r0, [pc, #664]	@ (80027b0 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8002516:	f7fe ff53 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chVisSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5, ScreenChangeCallback);
 800251a:	4ba3      	ldr	r3, [pc, #652]	@ (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800251c:	9303      	str	r3, [sp, #12]
 800251e:	2305      	movs	r3, #5
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2301      	movs	r3, #1
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	4ba2      	ldr	r3, [pc, #648]	@ (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800252c:	2213      	movs	r2, #19
 800252e:	498a      	ldr	r1, [pc, #552]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002530:	48a1      	ldr	r0, [pc, #644]	@ (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 8002532:	f7fe ff45 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 8002536:	4ca1      	ldr	r4, [pc, #644]	@ (80027bc <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 8002538:	499d      	ldr	r1, [pc, #628]	@ (80027b0 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff f800 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002540:	f104 0318 	add.w	r3, r4, #24
 8002544:	499c      	ldr	r1, [pc, #624]	@ (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fffa 	bl	8001540 <_ZN10PageButtonC1ERKS_>
};
 800254c:	4c9c      	ldr	r4, [pc, #624]	@ (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 800254e:	499d      	ldr	r1, [pc, #628]	@ (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff f865 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002556:	3418      	adds	r4, #24
 8002558:	499b      	ldr	r1, [pc, #620]	@ (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff f860 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002560:	3418      	adds	r4, #24
 8002562:	499a      	ldr	r1, [pc, #616]	@ (80027cc <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff f85b 	bl	8001620 <_ZN6ButtonC1ERKS_>
 800256a:	3418      	adds	r4, #24
 800256c:	4998      	ldr	r1, [pc, #608]	@ (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff f856 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002574:	3418      	adds	r4, #24
 8002576:	4997      	ldr	r1, [pc, #604]	@ (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff f851 	bl	8001620 <_ZN6ButtonC1ERKS_>
 800257e:	3418      	adds	r4, #24
 8002580:	4995      	ldr	r1, [pc, #596]	@ (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8002582:	4620      	mov	r0, r4
 8002584:	f7ff f84c 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002588:	3418      	adds	r4, #24
 800258a:	4974      	ldr	r1, [pc, #464]	@ (800275c <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff f847 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002592:	f104 0318 	add.w	r3, r4, #24
 8002596:	4973      	ldr	r1, [pc, #460]	@ (8002764 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f841 	bl	8001620 <_ZN6ButtonC1ERKS_>
};
 800259e:	4c8f      	ldr	r4, [pc, #572]	@ (80027dc <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 80025a0:	4972      	ldr	r1, [pc, #456]	@ (800276c <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff f85a 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025a8:	3414      	adds	r4, #20
 80025aa:	4972      	ldr	r1, [pc, #456]	@ (8002774 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff f855 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025b2:	3414      	adds	r4, #20
 80025b4:	4971      	ldr	r1, [pc, #452]	@ (800277c <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff f850 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025bc:	3414      	adds	r4, #20
 80025be:	4971      	ldr	r1, [pc, #452]	@ (8002784 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff f84b 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025c6:	3414      	adds	r4, #20
 80025c8:	4970      	ldr	r1, [pc, #448]	@ (800278c <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 80025ca:	4620      	mov	r0, r4
 80025cc:	f7ff f846 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025d0:	3414      	adds	r4, #20
 80025d2:	4970      	ldr	r1, [pc, #448]	@ (8002794 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff f841 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025da:	3414      	adds	r4, #20
 80025dc:	496f      	ldr	r1, [pc, #444]	@ (800279c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff f83c 	bl	800165c <_ZN11ProgressBarC1ERKS_>
 80025e4:	f104 0314 	add.w	r3, r4, #20
 80025e8:	496e      	ldr	r1, [pc, #440]	@ (80027a4 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f836 	bl	800165c <_ZN11ProgressBarC1ERKS_>
Page channelVisPage = Page(&next, 3, chVisBtns, 8, chVisPageBtns, 2, progBars, 8);
 80025f0:	2308      	movs	r3, #8
 80025f2:	9304      	str	r3, [sp, #16]
 80025f4:	4b79      	ldr	r3, [pc, #484]	@ (80027dc <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	2302      	movs	r3, #2
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	4b6f      	ldr	r3, [pc, #444]	@ (80027bc <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2308      	movs	r3, #8
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4b6e      	ldr	r3, [pc, #440]	@ (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 8002606:	2203      	movs	r2, #3
 8002608:	4953      	ldr	r1, [pc, #332]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 800260a:	4875      	ldr	r0, [pc, #468]	@ (80027e0 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 800260c:	f003 fc4c 	bl	8005ea8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari>
Button ch1Btn = Button(&next, 13, "b0", 0, 2);
 8002610:	2302      	movs	r3, #2
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4b72      	ldr	r3, [pc, #456]	@ (80027e4 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 800261a:	220d      	movs	r2, #13
 800261c:	494e      	ldr	r1, [pc, #312]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 800261e:	4872      	ldr	r0, [pc, #456]	@ (80027e8 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 8002620:	f7fe feae 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch2Btn = Button(&next, 13, "b1", 1, 2);
 8002624:	2302      	movs	r3, #2
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2301      	movs	r3, #1
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4b6f      	ldr	r3, [pc, #444]	@ (80027ec <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800262e:	220d      	movs	r2, #13
 8002630:	4949      	ldr	r1, [pc, #292]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002632:	486f      	ldr	r0, [pc, #444]	@ (80027f0 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8002634:	f7fe fea4 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch3Btn = Button(&next, 13, "b2", 2, 2);
 8002638:	2302      	movs	r3, #2
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2302      	movs	r3, #2
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <_Z41__static_initialization_and_destruction_0ii+0x714>)
 8002642:	220d      	movs	r2, #13
 8002644:	4944      	ldr	r1, [pc, #272]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002646:	486c      	ldr	r0, [pc, #432]	@ (80027f8 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 8002648:	f7fe fe9a 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch4Btn = Button(&next, 13, "b3", 3, 2);
 800264c:	2302      	movs	r3, #2
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2303      	movs	r3, #3
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4b69      	ldr	r3, [pc, #420]	@ (80027fc <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 8002656:	220d      	movs	r2, #13
 8002658:	493f      	ldr	r1, [pc, #252]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 800265a:	4869      	ldr	r0, [pc, #420]	@ (8002800 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 800265c:	f7fe fe90 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch5Btn = Button(&next, 13, "b4", 4, 2);
 8002660:	2302      	movs	r3, #2
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	2304      	movs	r3, #4
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <_Z41__static_initialization_and_destruction_0ii+0x724>)
 800266a:	220d      	movs	r2, #13
 800266c:	493a      	ldr	r1, [pc, #232]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 800266e:	4866      	ldr	r0, [pc, #408]	@ (8002808 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 8002670:	f7fe fe86 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch6Btn = Button(&next, 13, "b5", 5, 2);
 8002674:	2302      	movs	r3, #2
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	2305      	movs	r3, #5
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4b63      	ldr	r3, [pc, #396]	@ (800280c <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 800267e:	220d      	movs	r2, #13
 8002680:	4935      	ldr	r1, [pc, #212]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002682:	4863      	ldr	r0, [pc, #396]	@ (8002810 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 8002684:	f7fe fe7c 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch7Btn = Button(&next, 13, "b6", 6, 2);
 8002688:	2302      	movs	r3, #2
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	2306      	movs	r3, #6
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4b30      	ldr	r3, [pc, #192]	@ (8002754 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8002692:	220d      	movs	r2, #13
 8002694:	4930      	ldr	r1, [pc, #192]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8002696:	485f      	ldr	r0, [pc, #380]	@ (8002814 <_Z41__static_initialization_and_destruction_0ii+0x734>)
 8002698:	f7fe fe72 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button ch8Btn = Button(&next, 13, "b7", 7, 2);
 800269c:	2302      	movs	r3, #2
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	2307      	movs	r3, #7
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 80026a6:	220d      	movs	r2, #13
 80026a8:	492b      	ldr	r1, [pc, #172]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80026aa:	485b      	ldr	r0, [pc, #364]	@ (8002818 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 80026ac:	f7fe fe68 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
PageButton chCfgHomeBtn = PageButton(&next, 3, "pb1", 0, 0, 1, ScreenChangeCallback);
 80026b0:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80026b2:	9303      	str	r3, [sp, #12]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	2300      	movs	r3, #0
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80026c2:	2203      	movs	r2, #3
 80026c4:	4924      	ldr	r1, [pc, #144]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80026c6:	4855      	ldr	r0, [pc, #340]	@ (800281c <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 80026c8:	f7fe fe7a 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton chCfgSettingsBtn = PageButton(&next, 4, "pb5", 1, 0, 5, ScreenChangeCallback);
 80026cc:	4b36      	ldr	r3, [pc, #216]	@ (80027a8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80026ce:	9303      	str	r3, [sp, #12]
 80026d0:	2305      	movs	r3, #5
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2301      	movs	r3, #1
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4b35      	ldr	r3, [pc, #212]	@ (80027b4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80026de:	2204      	movs	r2, #4
 80026e0:	491d      	ldr	r1, [pc, #116]	@ (8002758 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80026e2:	484f      	ldr	r0, [pc, #316]	@ (8002820 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 80026e4:	f7fe fe6c 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 80026e8:	4c4e      	ldr	r4, [pc, #312]	@ (8002824 <_Z41__static_initialization_and_destruction_0ii+0x744>)
 80026ea:	494c      	ldr	r1, [pc, #304]	@ (800281c <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7fe ff27 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 80026f2:	f104 0318 	add.w	r3, r4, #24
 80026f6:	494a      	ldr	r1, [pc, #296]	@ (8002820 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe ff21 	bl	8001540 <_ZN10PageButtonC1ERKS_>
};
 80026fe:	4c4a      	ldr	r4, [pc, #296]	@ (8002828 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 8002700:	4939      	ldr	r1, [pc, #228]	@ (80027e8 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 8002702:	4620      	mov	r0, r4
 8002704:	f7fe ff8c 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002708:	3418      	adds	r4, #24
 800270a:	4939      	ldr	r1, [pc, #228]	@ (80027f0 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 800270c:	4620      	mov	r0, r4
 800270e:	f7fe ff87 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002712:	3418      	adds	r4, #24
 8002714:	4938      	ldr	r1, [pc, #224]	@ (80027f8 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 8002716:	4620      	mov	r0, r4
 8002718:	f7fe ff82 	bl	8001620 <_ZN6ButtonC1ERKS_>
 800271c:	3418      	adds	r4, #24
 800271e:	4938      	ldr	r1, [pc, #224]	@ (8002800 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 8002720:	4620      	mov	r0, r4
 8002722:	f7fe ff7d 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002726:	3418      	adds	r4, #24
 8002728:	4937      	ldr	r1, [pc, #220]	@ (8002808 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800272a:	4620      	mov	r0, r4
 800272c:	f7fe ff78 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002730:	3418      	adds	r4, #24
 8002732:	4937      	ldr	r1, [pc, #220]	@ (8002810 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 8002734:	4620      	mov	r0, r4
 8002736:	f7fe ff73 	bl	8001620 <_ZN6ButtonC1ERKS_>
 800273a:	3418      	adds	r4, #24
 800273c:	4935      	ldr	r1, [pc, #212]	@ (8002814 <_Z41__static_initialization_and_destruction_0ii+0x734>)
 800273e:	4620      	mov	r0, r4
 8002740:	f7fe ff6e 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002744:	f104 0318 	add.w	r3, r4, #24
 8002748:	4933      	ldr	r1, [pc, #204]	@ (8002818 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe ff68 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002750:	e06c      	b.n	800282c <_Z41__static_initialization_and_destruction_0ii+0x74c>
 8002752:	bf00      	nop
 8002754:	08011f64 	.word	0x08011f64
 8002758:	200000f0 	.word	0x200000f0
 800275c:	2000076c 	.word	0x2000076c
 8002760:	08011f68 	.word	0x08011f68
 8002764:	20000784 	.word	0x20000784
 8002768:	08011f6c 	.word	0x08011f6c
 800276c:	2000079c 	.word	0x2000079c
 8002770:	08011f70 	.word	0x08011f70
 8002774:	200007b0 	.word	0x200007b0
 8002778:	08011f74 	.word	0x08011f74
 800277c:	200007c4 	.word	0x200007c4
 8002780:	08011f78 	.word	0x08011f78
 8002784:	200007d8 	.word	0x200007d8
 8002788:	08011f7c 	.word	0x08011f7c
 800278c:	200007ec 	.word	0x200007ec
 8002790:	08011f80 	.word	0x08011f80
 8002794:	20000800 	.word	0x20000800
 8002798:	08011f84 	.word	0x08011f84
 800279c:	20000814 	.word	0x20000814
 80027a0:	08011f88 	.word	0x08011f88
 80027a4:	20000828 	.word	0x20000828
 80027a8:	080014a1 	.word	0x080014a1
 80027ac:	08011f30 	.word	0x08011f30
 80027b0:	2000083c 	.word	0x2000083c
 80027b4:	08011f34 	.word	0x08011f34
 80027b8:	20000854 	.word	0x20000854
 80027bc:	2000086c 	.word	0x2000086c
 80027c0:	2000089c 	.word	0x2000089c
 80027c4:	200006dc 	.word	0x200006dc
 80027c8:	200006f4 	.word	0x200006f4
 80027cc:	2000070c 	.word	0x2000070c
 80027d0:	20000724 	.word	0x20000724
 80027d4:	2000073c 	.word	0x2000073c
 80027d8:	20000754 	.word	0x20000754
 80027dc:	2000095c 	.word	0x2000095c
 80027e0:	200009fc 	.word	0x200009fc
 80027e4:	08011f4c 	.word	0x08011f4c
 80027e8:	20000a2c 	.word	0x20000a2c
 80027ec:	08011f50 	.word	0x08011f50
 80027f0:	20000a44 	.word	0x20000a44
 80027f4:	08011f54 	.word	0x08011f54
 80027f8:	20000a5c 	.word	0x20000a5c
 80027fc:	08011f58 	.word	0x08011f58
 8002800:	20000a74 	.word	0x20000a74
 8002804:	08011f5c 	.word	0x08011f5c
 8002808:	20000a8c 	.word	0x20000a8c
 800280c:	08011f60 	.word	0x08011f60
 8002810:	20000aa4 	.word	0x20000aa4
 8002814:	20000abc 	.word	0x20000abc
 8002818:	20000ad4 	.word	0x20000ad4
 800281c:	20000aec 	.word	0x20000aec
 8002820:	20000b04 	.word	0x20000b04
 8002824:	20000b1c 	.word	0x20000b1c
 8002828:	20000b4c 	.word	0x20000b4c
Page channelConfigPage = Page(&next, 4, chCfgBtns, 8, chCfgPageBtns, 2);
 800282c:	2302      	movs	r3, #2
 800282e:	9302      	str	r3, [sp, #8]
 8002830:	4ba4      	ldr	r3, [pc, #656]	@ (8002ac4 <_Z41__static_initialization_and_destruction_0ii+0x9e4>)
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2308      	movs	r3, #8
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4ba3      	ldr	r3, [pc, #652]	@ (8002ac8 <_Z41__static_initialization_and_destruction_0ii+0x9e8>)
 800283a:	2204      	movs	r2, #4
 800283c:	49a3      	ldr	r1, [pc, #652]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 800283e:	48a4      	ldr	r0, [pc, #656]	@ (8002ad0 <_Z41__static_initialization_and_destruction_0ii+0x9f0>)
 8002840:	f003 fa8e 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button saveBtn = Button(&next, 0, "b0", 0, 2);
 8002844:	2302      	movs	r3, #2
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ad4 <_Z41__static_initialization_and_destruction_0ii+0x9f4>)
 800284e:	2200      	movs	r2, #0
 8002850:	499e      	ldr	r1, [pc, #632]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8002852:	48a1      	ldr	r0, [pc, #644]	@ (8002ad8 <_Z41__static_initialization_and_destruction_0ii+0x9f8>)
 8002854:	f7fe fd94 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
};
 8002858:	4ba0      	ldr	r3, [pc, #640]	@ (8002adc <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 800285a:	499f      	ldr	r1, [pc, #636]	@ (8002ad8 <_Z41__static_initialization_and_destruction_0ii+0x9f8>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fedf 	bl	8001620 <_ZN6ButtonC1ERKS_>
};
 8002862:	4b9f      	ldr	r3, [pc, #636]	@ (8002ae0 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 8002864:	499f      	ldr	r1, [pc, #636]	@ (8002ae4 <_Z41__static_initialization_and_destruction_0ii+0xa04>)
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fe6a 	bl	8001540 <_ZN10PageButtonC1ERKS_>
Page settingsPage = Page(&next, 5, settBtns, 1, settPageBtns, 1);
 800286c:	2301      	movs	r3, #1
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	4b9b      	ldr	r3, [pc, #620]	@ (8002ae0 <_Z41__static_initialization_and_destruction_0ii+0xa00>)
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	2301      	movs	r3, #1
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4b98      	ldr	r3, [pc, #608]	@ (8002adc <_Z41__static_initialization_and_destruction_0ii+0x9fc>)
 800287a:	2205      	movs	r2, #5
 800287c:	4993      	ldr	r1, [pc, #588]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 800287e:	489a      	ldr	r0, [pc, #616]	@ (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0xa08>)
 8002880:	f003 fa6e 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button audSrcXlrBtn = Button(&next, 12, "b7", 2, 1);
 8002884:	2301      	movs	r3, #1
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4b97      	ldr	r3, [pc, #604]	@ (8002aec <_Z41__static_initialization_and_destruction_0ii+0xa0c>)
 800288e:	220c      	movs	r2, #12
 8002890:	498e      	ldr	r1, [pc, #568]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8002892:	4897      	ldr	r0, [pc, #604]	@ (8002af0 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 8002894:	f7fe fd74 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
Button audSrcJackBtn = Button(&next, 13, "b0", 3, 1);
 8002898:	2301      	movs	r3, #1
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	2303      	movs	r3, #3
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad4 <_Z41__static_initialization_and_destruction_0ii+0x9f4>)
 80028a2:	220d      	movs	r2, #13
 80028a4:	4989      	ldr	r1, [pc, #548]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80028a6:	4893      	ldr	r0, [pc, #588]	@ (8002af4 <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 80028a8:	f7fe fd6a 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
PageButton audHomeBtn = PageButton(&next, 15, "pb1", 0, 0, 1, ScreenChangeCallback);
 80028ac:	4b92      	ldr	r3, [pc, #584]	@ (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 80028ae:	9303      	str	r3, [sp, #12]
 80028b0:	2301      	movs	r3, #1
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2300      	movs	r3, #0
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4b8f      	ldr	r3, [pc, #572]	@ (8002afc <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 80028be:	220f      	movs	r2, #15
 80028c0:	4982      	ldr	r1, [pc, #520]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80028c2:	488f      	ldr	r0, [pc, #572]	@ (8002b00 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 80028c4:	f7fe fd7c 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton audSettingsBtn = PageButton(&next, 16, "pb5", 1, 0, 5, ScreenChangeCallback);
 80028c8:	4b8b      	ldr	r3, [pc, #556]	@ (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 80028ca:	9303      	str	r3, [sp, #12]
 80028cc:	2305      	movs	r3, #5
 80028ce:	9302      	str	r3, [sp, #8]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	2301      	movs	r3, #1
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002b04 <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 80028da:	2210      	movs	r2, #16
 80028dc:	497b      	ldr	r1, [pc, #492]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80028de:	488a      	ldr	r0, [pc, #552]	@ (8002b08 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 80028e0:	f7fe fd6e 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 80028e4:	4c89      	ldr	r4, [pc, #548]	@ (8002b0c <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 80028e6:	4986      	ldr	r1, [pc, #536]	@ (8002b00 <_Z41__static_initialization_and_destruction_0ii+0xa20>)
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7fe fe29 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 80028ee:	f104 0318 	add.w	r3, r4, #24
 80028f2:	4985      	ldr	r1, [pc, #532]	@ (8002b08 <_Z41__static_initialization_and_destruction_0ii+0xa28>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fe23 	bl	8001540 <_ZN10PageButtonC1ERKS_>
};
 80028fa:	4c85      	ldr	r4, [pc, #532]	@ (8002b10 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 80028fc:	497c      	ldr	r1, [pc, #496]	@ (8002af0 <_Z41__static_initialization_and_destruction_0ii+0xa10>)
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fe fe8e 	bl	8001620 <_ZN6ButtonC1ERKS_>
 8002904:	f104 0318 	add.w	r3, r4, #24
 8002908:	497a      	ldr	r1, [pc, #488]	@ (8002af4 <_Z41__static_initialization_and_destruction_0ii+0xa14>)
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fe88 	bl	8001620 <_ZN6ButtonC1ERKS_>
Page audioPage = Page(&next, 6, audBtns, 2, audPageBtns, 2);
 8002910:	2302      	movs	r3, #2
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	4b7d      	ldr	r3, [pc, #500]	@ (8002b0c <_Z41__static_initialization_and_destruction_0ii+0xa2c>)
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b10 <_Z41__static_initialization_and_destruction_0ii+0xa30>)
 800291e:	2206      	movs	r2, #6
 8002920:	496a      	ldr	r1, [pc, #424]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8002922:	487c      	ldr	r0, [pc, #496]	@ (8002b14 <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 8002924:	f003 fa1c 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
Button colChSelBtn = Button(&next, 0, "b0", 0, 2);
 8002928:	2302      	movs	r3, #2
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	2300      	movs	r3, #0
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4b68      	ldr	r3, [pc, #416]	@ (8002ad4 <_Z41__static_initialization_and_destruction_0ii+0x9f4>)
 8002932:	2200      	movs	r2, #0
 8002934:	4965      	ldr	r1, [pc, #404]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8002936:	4878      	ldr	r0, [pc, #480]	@ (8002b18 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 8002938:	f7fe fd22 	bl	8001380 <_ZN6ButtonC1EP7NextionhPKchh>
};
 800293c:	4b77      	ldr	r3, [pc, #476]	@ (8002b1c <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 800293e:	4976      	ldr	r1, [pc, #472]	@ (8002b18 <_Z41__static_initialization_and_destruction_0ii+0xa38>)
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fe6d 	bl	8001620 <_ZN6ButtonC1ERKS_>
PageButton colHomeBtn = PageButton(&next, 5, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002946:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 8002948:	9303      	str	r3, [sp, #12]
 800294a:	2301      	movs	r3, #1
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 8002958:	2205      	movs	r2, #5
 800295a:	495c      	ldr	r1, [pc, #368]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 800295c:	4870      	ldr	r0, [pc, #448]	@ (8002b20 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 800295e:	f7fe fd2f 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton colSettingsBtn = PageButton(&next, 6, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002962:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 8002964:	9303      	str	r3, [sp, #12]
 8002966:	2305      	movs	r3, #5
 8002968:	9302      	str	r3, [sp, #8]
 800296a:	2300      	movs	r3, #0
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2301      	movs	r3, #1
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4b64      	ldr	r3, [pc, #400]	@ (8002b04 <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 8002974:	2206      	movs	r2, #6
 8002976:	4955      	ldr	r1, [pc, #340]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8002978:	486a      	ldr	r0, [pc, #424]	@ (8002b24 <_Z41__static_initialization_and_destruction_0ii+0xa44>)
 800297a:	f7fe fd21 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 800297e:	4c6a      	ldr	r4, [pc, #424]	@ (8002b28 <_Z41__static_initialization_and_destruction_0ii+0xa48>)
 8002980:	4967      	ldr	r1, [pc, #412]	@ (8002b20 <_Z41__static_initialization_and_destruction_0ii+0xa40>)
 8002982:	4620      	mov	r0, r4
 8002984:	f7fe fddc 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 8002988:	f104 0318 	add.w	r3, r4, #24
 800298c:	4965      	ldr	r1, [pc, #404]	@ (8002b24 <_Z41__static_initialization_and_destruction_0ii+0xa44>)
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fdd6 	bl	8001540 <_ZN10PageButtonC1ERKS_>
Page colorPage = Page(&next, 7, colorBtns, 0, colPageBtns, 2);
 8002994:	2302      	movs	r3, #2
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <_Z41__static_initialization_and_destruction_0ii+0xa48>)
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	2300      	movs	r3, #0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <_Z41__static_initialization_and_destruction_0ii+0xa3c>)
 80029a2:	2207      	movs	r2, #7
 80029a4:	4949      	ldr	r1, [pc, #292]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80029a6:	4861      	ldr	r0, [pc, #388]	@ (8002b2c <_Z41__static_initialization_and_destruction_0ii+0xa4c>)
 80029a8:	f003 f9da 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
PageButton patHomeBtn = PageButton(&next, 4, "pb1", 0, 0, 1, ScreenChangeCallback);
 80029ac:	4b52      	ldr	r3, [pc, #328]	@ (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	2301      	movs	r3, #1
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4b4f      	ldr	r3, [pc, #316]	@ (8002afc <_Z41__static_initialization_and_destruction_0ii+0xa1c>)
 80029be:	2204      	movs	r2, #4
 80029c0:	4942      	ldr	r1, [pc, #264]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80029c2:	485b      	ldr	r0, [pc, #364]	@ (8002b30 <_Z41__static_initialization_and_destruction_0ii+0xa50>)
 80029c4:	f7fe fcfc 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
PageButton patSettingsBtn = PageButton(&next, 5, "pb5", 1, 0, 5, ScreenChangeCallback);
 80029c8:	4b4b      	ldr	r3, [pc, #300]	@ (8002af8 <_Z41__static_initialization_and_destruction_0ii+0xa18>)
 80029ca:	9303      	str	r3, [sp, #12]
 80029cc:	2305      	movs	r3, #5
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	2300      	movs	r3, #0
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	2301      	movs	r3, #1
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b04 <_Z41__static_initialization_and_destruction_0ii+0xa24>)
 80029da:	2205      	movs	r2, #5
 80029dc:	493b      	ldr	r1, [pc, #236]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 80029de:	4855      	ldr	r0, [pc, #340]	@ (8002b34 <_Z41__static_initialization_and_destruction_0ii+0xa54>)
 80029e0:	f7fe fcee 	bl	80013c0 <_ZN10PageButtonC1EP7NextionhPKchhhPFvhE>
};
 80029e4:	4c54      	ldr	r4, [pc, #336]	@ (8002b38 <_Z41__static_initialization_and_destruction_0ii+0xa58>)
 80029e6:	4952      	ldr	r1, [pc, #328]	@ (8002b30 <_Z41__static_initialization_and_destruction_0ii+0xa50>)
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe fda9 	bl	8001540 <_ZN10PageButtonC1ERKS_>
 80029ee:	f104 0318 	add.w	r3, r4, #24
 80029f2:	4950      	ldr	r1, [pc, #320]	@ (8002b34 <_Z41__static_initialization_and_destruction_0ii+0xa54>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fda3 	bl	8001540 <_ZN10PageButtonC1ERKS_>
Page patternPage = Page(&next, 7, NULL, 0, patPageBtns, 2);
 80029fa:	2302      	movs	r3, #2
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002b38 <_Z41__static_initialization_and_destruction_0ii+0xa58>)
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4930      	ldr	r1, [pc, #192]	@ (8002acc <_Z41__static_initialization_and_destruction_0ii+0x9ec>)
 8002a0c:	484b      	ldr	r0, [pc, #300]	@ (8002b3c <_Z41__static_initialization_and_destruction_0ii+0xa5c>)
 8002a0e:	f003 f9a7 	bl	8005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>
};
 8002a12:	4c4b      	ldr	r4, [pc, #300]	@ (8002b40 <_Z41__static_initialization_and_destruction_0ii+0xa60>)
 8002a14:	494b      	ldr	r1, [pc, #300]	@ (8002b44 <_Z41__static_initialization_and_destruction_0ii+0xa64>)
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7fe fdb0 	bl	800157c <_ZN4PageC1ERKS_>
 8002a1c:	3430      	adds	r4, #48	@ 0x30
 8002a1e:	494a      	ldr	r1, [pc, #296]	@ (8002b48 <_Z41__static_initialization_and_destruction_0ii+0xa68>)
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe fdab 	bl	800157c <_ZN4PageC1ERKS_>
 8002a26:	3430      	adds	r4, #48	@ 0x30
 8002a28:	4948      	ldr	r1, [pc, #288]	@ (8002b4c <_Z41__static_initialization_and_destruction_0ii+0xa6c>)
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7fe fda6 	bl	800157c <_ZN4PageC1ERKS_>
 8002a30:	3430      	adds	r4, #48	@ 0x30
 8002a32:	4927      	ldr	r1, [pc, #156]	@ (8002ad0 <_Z41__static_initialization_and_destruction_0ii+0x9f0>)
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7fe fda1 	bl	800157c <_ZN4PageC1ERKS_>
 8002a3a:	3430      	adds	r4, #48	@ 0x30
 8002a3c:	492a      	ldr	r1, [pc, #168]	@ (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0xa08>)
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe fd9c 	bl	800157c <_ZN4PageC1ERKS_>
 8002a44:	3430      	adds	r4, #48	@ 0x30
 8002a46:	4933      	ldr	r1, [pc, #204]	@ (8002b14 <_Z41__static_initialization_and_destruction_0ii+0xa34>)
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7fe fd97 	bl	800157c <_ZN4PageC1ERKS_>
 8002a4e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8002a52:	4936      	ldr	r1, [pc, #216]	@ (8002b2c <_Z41__static_initialization_and_destruction_0ii+0xa4c>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fd91 	bl	800157c <_ZN4PageC1ERKS_>
Page pages[] = {
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 826b 	bne.w	8002f38 <_Z41__static_initialization_and_destruction_0ii+0xe58>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	f040 8265 	bne.w	8002f38 <_Z41__static_initialization_and_destruction_0ii+0xe58>
 8002a6e:	4c38      	ldr	r4, [pc, #224]	@ (8002b50 <_Z41__static_initialization_and_destruction_0ii+0xa70>)
 8002a70:	4b33      	ldr	r3, [pc, #204]	@ (8002b40 <_Z41__static_initialization_and_destruction_0ii+0xa60>)
 8002a72:	429c      	cmp	r4, r3
 8002a74:	d005      	beq.n	8002a82 <_Z41__static_initialization_and_destruction_0ii+0x9a2>
 8002a76:	3c30      	subs	r4, #48	@ 0x30
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4798      	blx	r3
 8002a80:	e7f6      	b.n	8002a70 <_Z41__static_initialization_and_destruction_0ii+0x990>
Page patternPage = Page(&next, 7, NULL, 0, patPageBtns, 2);
 8002a82:	482e      	ldr	r0, [pc, #184]	@ (8002b3c <_Z41__static_initialization_and_destruction_0ii+0xa5c>)
 8002a84:	f003 faa8 	bl	8005fd8 <_ZN4PageD1Ev>
PageButton patPageBtns[] = {
 8002a88:	4c32      	ldr	r4, [pc, #200]	@ (8002b54 <_Z41__static_initialization_and_destruction_0ii+0xa74>)
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b38 <_Z41__static_initialization_and_destruction_0ii+0xa58>)
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	d005      	beq.n	8002a9c <_Z41__static_initialization_and_destruction_0ii+0x9bc>
 8002a90:	3c18      	subs	r4, #24
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4620      	mov	r0, r4
 8002a98:	4798      	blx	r3
 8002a9a:	e7f6      	b.n	8002a8a <_Z41__static_initialization_and_destruction_0ii+0x9aa>
PageButton patSettingsBtn = PageButton(&next, 5, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002a9c:	4825      	ldr	r0, [pc, #148]	@ (8002b34 <_Z41__static_initialization_and_destruction_0ii+0xa54>)
 8002a9e:	f003 fca7 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton patHomeBtn = PageButton(&next, 4, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002aa2:	4823      	ldr	r0, [pc, #140]	@ (8002b30 <_Z41__static_initialization_and_destruction_0ii+0xa50>)
 8002aa4:	f003 fca4 	bl	80063f0 <_ZN10PageButtonD1Ev>
Page colorPage = Page(&next, 7, colorBtns, 0, colPageBtns, 2);
 8002aa8:	4820      	ldr	r0, [pc, #128]	@ (8002b2c <_Z41__static_initialization_and_destruction_0ii+0xa4c>)
 8002aaa:	f003 fa95 	bl	8005fd8 <_ZN4PageD1Ev>
PageButton colPageBtns[] = {
 8002aae:	4c2a      	ldr	r4, [pc, #168]	@ (8002b58 <_Z41__static_initialization_and_destruction_0ii+0xa78>)
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <_Z41__static_initialization_and_destruction_0ii+0xa48>)
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d052      	beq.n	8002b5c <_Z41__static_initialization_and_destruction_0ii+0xa7c>
 8002ab6:	3c18      	subs	r4, #24
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4620      	mov	r0, r4
 8002abe:	4798      	blx	r3
 8002ac0:	e7f6      	b.n	8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 8002ac2:	bf00      	nop
 8002ac4:	20000b1c 	.word	0x20000b1c
 8002ac8:	20000b4c 	.word	0x20000b4c
 8002acc:	200000f0 	.word	0x200000f0
 8002ad0:	20000c0c 	.word	0x20000c0c
 8002ad4:	08011f4c 	.word	0x08011f4c
 8002ad8:	20000c3c 	.word	0x20000c3c
 8002adc:	20000c54 	.word	0x20000c54
 8002ae0:	20000c6c 	.word	0x20000c6c
 8002ae4:	2000043c 	.word	0x2000043c
 8002ae8:	20000c84 	.word	0x20000c84
 8002aec:	08011f68 	.word	0x08011f68
 8002af0:	20000cb4 	.word	0x20000cb4
 8002af4:	20000ccc 	.word	0x20000ccc
 8002af8:	080014a1 	.word	0x080014a1
 8002afc:	08011f30 	.word	0x08011f30
 8002b00:	20000ce4 	.word	0x20000ce4
 8002b04:	08011f34 	.word	0x08011f34
 8002b08:	20000cfc 	.word	0x20000cfc
 8002b0c:	20000d14 	.word	0x20000d14
 8002b10:	20000d44 	.word	0x20000d44
 8002b14:	20000d74 	.word	0x20000d74
 8002b18:	20000da4 	.word	0x20000da4
 8002b1c:	20000dbc 	.word	0x20000dbc
 8002b20:	20000dd4 	.word	0x20000dd4
 8002b24:	20000dec 	.word	0x20000dec
 8002b28:	20000e04 	.word	0x20000e04
 8002b2c:	20000e34 	.word	0x20000e34
 8002b30:	20000e64 	.word	0x20000e64
 8002b34:	20000e7c 	.word	0x20000e7c
 8002b38:	20000e94 	.word	0x20000e94
 8002b3c:	20000ec4 	.word	0x20000ec4
 8002b40:	20000ef4 	.word	0x20000ef4
 8002b44:	200005ec 	.word	0x200005ec
 8002b48:	200006ac 	.word	0x200006ac
 8002b4c:	200009fc 	.word	0x200009fc
 8002b50:	20001044 	.word	0x20001044
 8002b54:	20000ec4 	.word	0x20000ec4
 8002b58:	20000e34 	.word	0x20000e34
PageButton colSettingsBtn = PageButton(&next, 6, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002b5c:	4894      	ldr	r0, [pc, #592]	@ (8002db0 <_Z41__static_initialization_and_destruction_0ii+0xcd0>)
 8002b5e:	f003 fc47 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton colHomeBtn = PageButton(&next, 5, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002b62:	4894      	ldr	r0, [pc, #592]	@ (8002db4 <_Z41__static_initialization_and_destruction_0ii+0xcd4>)
 8002b64:	f003 fc44 	bl	80063f0 <_ZN10PageButtonD1Ev>
Button colorBtns[] = {
 8002b68:	4c93      	ldr	r4, [pc, #588]	@ (8002db8 <_Z41__static_initialization_and_destruction_0ii+0xcd8>)
 8002b6a:	4b94      	ldr	r3, [pc, #592]	@ (8002dbc <_Z41__static_initialization_and_destruction_0ii+0xcdc>)
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	d005      	beq.n	8002b7c <_Z41__static_initialization_and_destruction_0ii+0xa9c>
 8002b70:	3c18      	subs	r4, #24
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4620      	mov	r0, r4
 8002b78:	4798      	blx	r3
 8002b7a:	e7f6      	b.n	8002b6a <_Z41__static_initialization_and_destruction_0ii+0xa8a>
Button colChSelBtn = Button(&next, 0, "b0", 0, 2);
 8002b7c:	4890      	ldr	r0, [pc, #576]	@ (8002dc0 <_Z41__static_initialization_and_destruction_0ii+0xce0>)
 8002b7e:	f002 fff3 	bl	8005b68 <_ZN6ButtonD1Ev>
Page audioPage = Page(&next, 6, audBtns, 2, audPageBtns, 2);
 8002b82:	4890      	ldr	r0, [pc, #576]	@ (8002dc4 <_Z41__static_initialization_and_destruction_0ii+0xce4>)
 8002b84:	f003 fa28 	bl	8005fd8 <_ZN4PageD1Ev>
Button audBtns[] = {
 8002b88:	4c8f      	ldr	r4, [pc, #572]	@ (8002dc8 <_Z41__static_initialization_and_destruction_0ii+0xce8>)
 8002b8a:	4b90      	ldr	r3, [pc, #576]	@ (8002dcc <_Z41__static_initialization_and_destruction_0ii+0xcec>)
 8002b8c:	429c      	cmp	r4, r3
 8002b8e:	d005      	beq.n	8002b9c <_Z41__static_initialization_and_destruction_0ii+0xabc>
 8002b90:	3c18      	subs	r4, #24
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4620      	mov	r0, r4
 8002b98:	4798      	blx	r3
 8002b9a:	e7f6      	b.n	8002b8a <_Z41__static_initialization_and_destruction_0ii+0xaaa>
PageButton audPageBtns[] = {
 8002b9c:	4c8c      	ldr	r4, [pc, #560]	@ (8002dd0 <_Z41__static_initialization_and_destruction_0ii+0xcf0>)
 8002b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002dd4 <_Z41__static_initialization_and_destruction_0ii+0xcf4>)
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	d005      	beq.n	8002bb0 <_Z41__static_initialization_and_destruction_0ii+0xad0>
 8002ba4:	3c18      	subs	r4, #24
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4620      	mov	r0, r4
 8002bac:	4798      	blx	r3
 8002bae:	e7f6      	b.n	8002b9e <_Z41__static_initialization_and_destruction_0ii+0xabe>
PageButton audSettingsBtn = PageButton(&next, 16, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002bb0:	4889      	ldr	r0, [pc, #548]	@ (8002dd8 <_Z41__static_initialization_and_destruction_0ii+0xcf8>)
 8002bb2:	f003 fc1d 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton audHomeBtn = PageButton(&next, 15, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002bb6:	4889      	ldr	r0, [pc, #548]	@ (8002ddc <_Z41__static_initialization_and_destruction_0ii+0xcfc>)
 8002bb8:	f003 fc1a 	bl	80063f0 <_ZN10PageButtonD1Ev>
Button audSrcJackBtn = Button(&next, 13, "b0", 3, 1);
 8002bbc:	4888      	ldr	r0, [pc, #544]	@ (8002de0 <_Z41__static_initialization_and_destruction_0ii+0xd00>)
 8002bbe:	f002 ffd3 	bl	8005b68 <_ZN6ButtonD1Ev>
Button audSrcXlrBtn = Button(&next, 12, "b7", 2, 1);
 8002bc2:	4888      	ldr	r0, [pc, #544]	@ (8002de4 <_Z41__static_initialization_and_destruction_0ii+0xd04>)
 8002bc4:	f002 ffd0 	bl	8005b68 <_ZN6ButtonD1Ev>
Page settingsPage = Page(&next, 5, settBtns, 1, settPageBtns, 1);
 8002bc8:	4887      	ldr	r0, [pc, #540]	@ (8002de8 <_Z41__static_initialization_and_destruction_0ii+0xd08>)
 8002bca:	f003 fa05 	bl	8005fd8 <_ZN4PageD1Ev>
PageButton settPageBtns[] = {
 8002bce:	4c87      	ldr	r4, [pc, #540]	@ (8002dec <_Z41__static_initialization_and_destruction_0ii+0xd0c>)
 8002bd0:	4b87      	ldr	r3, [pc, #540]	@ (8002df0 <_Z41__static_initialization_and_destruction_0ii+0xd10>)
 8002bd2:	429c      	cmp	r4, r3
 8002bd4:	d005      	beq.n	8002be2 <_Z41__static_initialization_and_destruction_0ii+0xb02>
 8002bd6:	3c18      	subs	r4, #24
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4798      	blx	r3
 8002be0:	e7f6      	b.n	8002bd0 <_Z41__static_initialization_and_destruction_0ii+0xaf0>
Button settBtns[] = {
 8002be2:	4c84      	ldr	r4, [pc, #528]	@ (8002df4 <_Z41__static_initialization_and_destruction_0ii+0xd14>)
 8002be4:	4b84      	ldr	r3, [pc, #528]	@ (8002df8 <_Z41__static_initialization_and_destruction_0ii+0xd18>)
 8002be6:	429c      	cmp	r4, r3
 8002be8:	d005      	beq.n	8002bf6 <_Z41__static_initialization_and_destruction_0ii+0xb16>
 8002bea:	3c18      	subs	r4, #24
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4798      	blx	r3
 8002bf4:	e7f6      	b.n	8002be4 <_Z41__static_initialization_and_destruction_0ii+0xb04>
Button saveBtn = Button(&next, 0, "b0", 0, 2);
 8002bf6:	4881      	ldr	r0, [pc, #516]	@ (8002dfc <_Z41__static_initialization_and_destruction_0ii+0xd1c>)
 8002bf8:	f002 ffb6 	bl	8005b68 <_ZN6ButtonD1Ev>
Page channelConfigPage = Page(&next, 4, chCfgBtns, 8, chCfgPageBtns, 2);
 8002bfc:	4880      	ldr	r0, [pc, #512]	@ (8002e00 <_Z41__static_initialization_and_destruction_0ii+0xd20>)
 8002bfe:	f003 f9eb 	bl	8005fd8 <_ZN4PageD1Ev>
Button chCfgBtns[] = {
 8002c02:	4c80      	ldr	r4, [pc, #512]	@ (8002e04 <_Z41__static_initialization_and_destruction_0ii+0xd24>)
 8002c04:	4b80      	ldr	r3, [pc, #512]	@ (8002e08 <_Z41__static_initialization_and_destruction_0ii+0xd28>)
 8002c06:	429c      	cmp	r4, r3
 8002c08:	d005      	beq.n	8002c16 <_Z41__static_initialization_and_destruction_0ii+0xb36>
 8002c0a:	3c18      	subs	r4, #24
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4620      	mov	r0, r4
 8002c12:	4798      	blx	r3
 8002c14:	e7f6      	b.n	8002c04 <_Z41__static_initialization_and_destruction_0ii+0xb24>
PageButton chCfgPageBtns[] = {
 8002c16:	4c7d      	ldr	r4, [pc, #500]	@ (8002e0c <_Z41__static_initialization_and_destruction_0ii+0xd2c>)
 8002c18:	4b7d      	ldr	r3, [pc, #500]	@ (8002e10 <_Z41__static_initialization_and_destruction_0ii+0xd30>)
 8002c1a:	429c      	cmp	r4, r3
 8002c1c:	d005      	beq.n	8002c2a <_Z41__static_initialization_and_destruction_0ii+0xb4a>
 8002c1e:	3c18      	subs	r4, #24
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4620      	mov	r0, r4
 8002c26:	4798      	blx	r3
 8002c28:	e7f6      	b.n	8002c18 <_Z41__static_initialization_and_destruction_0ii+0xb38>
PageButton chCfgSettingsBtn = PageButton(&next, 4, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002c2a:	487a      	ldr	r0, [pc, #488]	@ (8002e14 <_Z41__static_initialization_and_destruction_0ii+0xd34>)
 8002c2c:	f003 fbe0 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton chCfgHomeBtn = PageButton(&next, 3, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002c30:	4879      	ldr	r0, [pc, #484]	@ (8002e18 <_Z41__static_initialization_and_destruction_0ii+0xd38>)
 8002c32:	f003 fbdd 	bl	80063f0 <_ZN10PageButtonD1Ev>
Button ch8Btn = Button(&next, 13, "b7", 7, 2);
 8002c36:	4879      	ldr	r0, [pc, #484]	@ (8002e1c <_Z41__static_initialization_and_destruction_0ii+0xd3c>)
 8002c38:	f002 ff96 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch7Btn = Button(&next, 13, "b6", 6, 2);
 8002c3c:	4878      	ldr	r0, [pc, #480]	@ (8002e20 <_Z41__static_initialization_and_destruction_0ii+0xd40>)
 8002c3e:	f002 ff93 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch6Btn = Button(&next, 13, "b5", 5, 2);
 8002c42:	4878      	ldr	r0, [pc, #480]	@ (8002e24 <_Z41__static_initialization_and_destruction_0ii+0xd44>)
 8002c44:	f002 ff90 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch5Btn = Button(&next, 13, "b4", 4, 2);
 8002c48:	4877      	ldr	r0, [pc, #476]	@ (8002e28 <_Z41__static_initialization_and_destruction_0ii+0xd48>)
 8002c4a:	f002 ff8d 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch4Btn = Button(&next, 13, "b3", 3, 2);
 8002c4e:	4877      	ldr	r0, [pc, #476]	@ (8002e2c <_Z41__static_initialization_and_destruction_0ii+0xd4c>)
 8002c50:	f002 ff8a 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch3Btn = Button(&next, 13, "b2", 2, 2);
 8002c54:	4876      	ldr	r0, [pc, #472]	@ (8002e30 <_Z41__static_initialization_and_destruction_0ii+0xd50>)
 8002c56:	f002 ff87 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch2Btn = Button(&next, 13, "b1", 1, 2);
 8002c5a:	4876      	ldr	r0, [pc, #472]	@ (8002e34 <_Z41__static_initialization_and_destruction_0ii+0xd54>)
 8002c5c:	f002 ff84 	bl	8005b68 <_ZN6ButtonD1Ev>
Button ch1Btn = Button(&next, 13, "b0", 0, 2);
 8002c60:	4875      	ldr	r0, [pc, #468]	@ (8002e38 <_Z41__static_initialization_and_destruction_0ii+0xd58>)
 8002c62:	f002 ff81 	bl	8005b68 <_ZN6ButtonD1Ev>
Page channelVisPage = Page(&next, 3, chVisBtns, 8, chVisPageBtns, 2, progBars, 8);
 8002c66:	4875      	ldr	r0, [pc, #468]	@ (8002e3c <_Z41__static_initialization_and_destruction_0ii+0xd5c>)
 8002c68:	f003 f9b6 	bl	8005fd8 <_ZN4PageD1Ev>
ProgressBar progBars[] = {
 8002c6c:	4c74      	ldr	r4, [pc, #464]	@ (8002e40 <_Z41__static_initialization_and_destruction_0ii+0xd60>)
 8002c6e:	4b75      	ldr	r3, [pc, #468]	@ (8002e44 <_Z41__static_initialization_and_destruction_0ii+0xd64>)
 8002c70:	429c      	cmp	r4, r3
 8002c72:	d005      	beq.n	8002c80 <_Z41__static_initialization_and_destruction_0ii+0xba0>
 8002c74:	3c14      	subs	r4, #20
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4798      	blx	r3
 8002c7e:	e7f6      	b.n	8002c6e <_Z41__static_initialization_and_destruction_0ii+0xb8e>
Button chVisBtns[] = {
 8002c80:	4c71      	ldr	r4, [pc, #452]	@ (8002e48 <_Z41__static_initialization_and_destruction_0ii+0xd68>)
 8002c82:	4b72      	ldr	r3, [pc, #456]	@ (8002e4c <_Z41__static_initialization_and_destruction_0ii+0xd6c>)
 8002c84:	429c      	cmp	r4, r3
 8002c86:	d005      	beq.n	8002c94 <_Z41__static_initialization_and_destruction_0ii+0xbb4>
 8002c88:	3c18      	subs	r4, #24
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4798      	blx	r3
 8002c92:	e7f6      	b.n	8002c82 <_Z41__static_initialization_and_destruction_0ii+0xba2>
PageButton chVisPageBtns[] = {
 8002c94:	4c6e      	ldr	r4, [pc, #440]	@ (8002e50 <_Z41__static_initialization_and_destruction_0ii+0xd70>)
 8002c96:	4b6f      	ldr	r3, [pc, #444]	@ (8002e54 <_Z41__static_initialization_and_destruction_0ii+0xd74>)
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	d005      	beq.n	8002ca8 <_Z41__static_initialization_and_destruction_0ii+0xbc8>
 8002c9c:	3c18      	subs	r4, #24
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	4798      	blx	r3
 8002ca6:	e7f6      	b.n	8002c96 <_Z41__static_initialization_and_destruction_0ii+0xbb6>
PageButton chVisSettingsBtn = PageButton(&next, 19, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002ca8:	486b      	ldr	r0, [pc, #428]	@ (8002e58 <_Z41__static_initialization_and_destruction_0ii+0xd78>)
 8002caa:	f003 fba1 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton chVisHomeBtn = PageButton(&next, 18, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002cae:	486b      	ldr	r0, [pc, #428]	@ (8002e5c <_Z41__static_initialization_and_destruction_0ii+0xd7c>)
 8002cb0:	f003 fb9e 	bl	80063f0 <_ZN10PageButtonD1Ev>
ProgressBar ch8Bar = ProgressBar(&next, 16, "j7");
 8002cb4:	486a      	ldr	r0, [pc, #424]	@ (8002e60 <_Z41__static_initialization_and_destruction_0ii+0xd80>)
 8002cb6:	f003 fbdd 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch7Bar = ProgressBar(&next, 14, "j6");
 8002cba:	486a      	ldr	r0, [pc, #424]	@ (8002e64 <_Z41__static_initialization_and_destruction_0ii+0xd84>)
 8002cbc:	f003 fbda 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch6Bar = ProgressBar(&next, 12, "j5");
 8002cc0:	4869      	ldr	r0, [pc, #420]	@ (8002e68 <_Z41__static_initialization_and_destruction_0ii+0xd88>)
 8002cc2:	f003 fbd7 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch5Bar = ProgressBar(&next, 10, "j4");
 8002cc6:	4869      	ldr	r0, [pc, #420]	@ (8002e6c <_Z41__static_initialization_and_destruction_0ii+0xd8c>)
 8002cc8:	f003 fbd4 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch4Bar = ProgressBar(&next, 8, "j3");
 8002ccc:	4868      	ldr	r0, [pc, #416]	@ (8002e70 <_Z41__static_initialization_and_destruction_0ii+0xd90>)
 8002cce:	f003 fbd1 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch3Bar = ProgressBar(&next, 6, "j2");
 8002cd2:	4868      	ldr	r0, [pc, #416]	@ (8002e74 <_Z41__static_initialization_and_destruction_0ii+0xd94>)
 8002cd4:	f003 fbce 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch2Bar = ProgressBar(&next, 4, "j1");
 8002cd8:	4867      	ldr	r0, [pc, #412]	@ (8002e78 <_Z41__static_initialization_and_destruction_0ii+0xd98>)
 8002cda:	f003 fbcb 	bl	8006474 <_ZN11ProgressBarD1Ev>
ProgressBar ch1Bar = ProgressBar(&next, 1, "j0");
 8002cde:	4867      	ldr	r0, [pc, #412]	@ (8002e7c <_Z41__static_initialization_and_destruction_0ii+0xd9c>)
 8002ce0:	f003 fbc8 	bl	8006474 <_ZN11ProgressBarD1Ev>
Button srcCh8Btn = Button(&next, 27, "b7", 7, 1);
 8002ce4:	4866      	ldr	r0, [pc, #408]	@ (8002e80 <_Z41__static_initialization_and_destruction_0ii+0xda0>)
 8002ce6:	f002 ff3f 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh7Btn = Button(&next, 26, "b6", 6, 1);
 8002cea:	4866      	ldr	r0, [pc, #408]	@ (8002e84 <_Z41__static_initialization_and_destruction_0ii+0xda4>)
 8002cec:	f002 ff3c 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh6Btn = Button(&next, 25, "b5", 5, 1);
 8002cf0:	4865      	ldr	r0, [pc, #404]	@ (8002e88 <_Z41__static_initialization_and_destruction_0ii+0xda8>)
 8002cf2:	f002 ff39 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh5Btn = Button(&next, 24, "b4", 4, 1);
 8002cf6:	4865      	ldr	r0, [pc, #404]	@ (8002e8c <_Z41__static_initialization_and_destruction_0ii+0xdac>)
 8002cf8:	f002 ff36 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh4Btn = Button(&next, 23, "b3", 3, 1);
 8002cfc:	4864      	ldr	r0, [pc, #400]	@ (8002e90 <_Z41__static_initialization_and_destruction_0ii+0xdb0>)
 8002cfe:	f002 ff33 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh3Btn = Button(&next, 22, "b2", 2, 1);
 8002d02:	4864      	ldr	r0, [pc, #400]	@ (8002e94 <_Z41__static_initialization_and_destruction_0ii+0xdb4>)
 8002d04:	f002 ff30 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh2Btn = Button(&next, 21, "b1", 1, 1);
 8002d08:	4863      	ldr	r0, [pc, #396]	@ (8002e98 <_Z41__static_initialization_and_destruction_0ii+0xdb8>)
 8002d0a:	f002 ff2d 	bl	8005b68 <_ZN6ButtonD1Ev>
Button srcCh1Btn = Button(&next, 3, "b0", 0, 1);
 8002d0e:	4863      	ldr	r0, [pc, #396]	@ (8002e9c <_Z41__static_initialization_and_destruction_0ii+0xdbc>)
 8002d10:	f002 ff2a 	bl	8005b68 <_ZN6ButtonD1Ev>
Page runPage = Page(&next, 2, runBtns, 1, runPageBtns, 2);
 8002d14:	4862      	ldr	r0, [pc, #392]	@ (8002ea0 <_Z41__static_initialization_and_destruction_0ii+0xdc0>)
 8002d16:	f003 f95f 	bl	8005fd8 <_ZN4PageD1Ev>
PageButton runPageBtns[] = {
 8002d1a:	4c62      	ldr	r4, [pc, #392]	@ (8002ea4 <_Z41__static_initialization_and_destruction_0ii+0xdc4>)
 8002d1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <_Z41__static_initialization_and_destruction_0ii+0xdc8>)
 8002d1e:	429c      	cmp	r4, r3
 8002d20:	d005      	beq.n	8002d2e <_Z41__static_initialization_and_destruction_0ii+0xc4e>
 8002d22:	3c18      	subs	r4, #24
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4798      	blx	r3
 8002d2c:	e7f6      	b.n	8002d1c <_Z41__static_initialization_and_destruction_0ii+0xc3c>
PageButton runSettingsBtn = PageButton(&next, 3, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002d2e:	485f      	ldr	r0, [pc, #380]	@ (8002eac <_Z41__static_initialization_and_destruction_0ii+0xdcc>)
 8002d30:	f003 fb5e 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton runHomeBtn = PageButton(&next, 2, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002d34:	485e      	ldr	r0, [pc, #376]	@ (8002eb0 <_Z41__static_initialization_and_destruction_0ii+0xdd0>)
 8002d36:	f003 fb5b 	bl	80063f0 <_ZN10PageButtonD1Ev>
Button runBtns[] = {
 8002d3a:	4c5e      	ldr	r4, [pc, #376]	@ (8002eb4 <_Z41__static_initialization_and_destruction_0ii+0xdd4>)
 8002d3c:	4b5e      	ldr	r3, [pc, #376]	@ (8002eb8 <_Z41__static_initialization_and_destruction_0ii+0xdd8>)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	d005      	beq.n	8002d4e <_Z41__static_initialization_and_destruction_0ii+0xc6e>
 8002d42:	3c18      	subs	r4, #24
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4798      	blx	r3
 8002d4c:	e7f6      	b.n	8002d3c <_Z41__static_initialization_and_destruction_0ii+0xc5c>
Button runBtn = Button(&next, 2, "b0", 0, 1);
 8002d4e:	485b      	ldr	r0, [pc, #364]	@ (8002ebc <_Z41__static_initialization_and_destruction_0ii+0xddc>)
 8002d50:	f002 ff0a 	bl	8005b68 <_ZN6ButtonD1Ev>
Page homePage = Page(&next, 1, NULL, 0, mainBtns, 7);
 8002d54:	485a      	ldr	r0, [pc, #360]	@ (8002ec0 <_Z41__static_initialization_and_destruction_0ii+0xde0>)
 8002d56:	f003 f93f 	bl	8005fd8 <_ZN4PageD1Ev>
PageButton mainBtns[] = {
 8002d5a:	4c5a      	ldr	r4, [pc, #360]	@ (8002ec4 <_Z41__static_initialization_and_destruction_0ii+0xde4>)
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec8 <_Z41__static_initialization_and_destruction_0ii+0xde8>)
 8002d5e:	429c      	cmp	r4, r3
 8002d60:	d005      	beq.n	8002d6e <_Z41__static_initialization_and_destruction_0ii+0xc8e>
 8002d62:	3c18      	subs	r4, #24
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4798      	blx	r3
 8002d6c:	e7f6      	b.n	8002d5c <_Z41__static_initialization_and_destruction_0ii+0xc7c>
PageButton settPageBtn   = PageButton(&next, 2, "pb4", 1, 3, 5, ScreenChangeCallback);
 8002d6e:	4857      	ldr	r0, [pc, #348]	@ (8002ecc <_Z41__static_initialization_and_destruction_0ii+0xdec>)
 8002d70:	f003 fb3e 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton colPageBtn    = PageButton(&next, 8, "pb6", 1, 2, 7, ScreenChangeCallback);
 8002d74:	4856      	ldr	r0, [pc, #344]	@ (8002ed0 <_Z41__static_initialization_and_destruction_0ii+0xdf0>)
 8002d76:	f003 fb3b 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton patPageBtn    = PageButton(&next, 5, "pb7", 1, 1, 8, ScreenChangeCallback);
 8002d7a:	4856      	ldr	r0, [pc, #344]	@ (8002ed4 <_Z41__static_initialization_and_destruction_0ii+0xdf4>)
 8002d7c:	f003 fb38 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton audPageBtn    = PageButton(&next, 4, "pb5", 0, 3, 6, ScreenChangeCallback);
 8002d80:	4855      	ldr	r0, [pc, #340]	@ (8002ed8 <_Z41__static_initialization_and_destruction_0ii+0xdf8>)
 8002d82:	f003 fb35 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton chCfgPageBtn  = PageButton(&next, 6, "pb3", 0, 2, 4, ScreenChangeCallback);
 8002d86:	4855      	ldr	r0, [pc, #340]	@ (8002edc <_Z41__static_initialization_and_destruction_0ii+0xdfc>)
 8002d88:	f003 fb32 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton chnPageBtn    = PageButton(&next, 1, "pb2", 0, 1, 3, ScreenChangeCallback);
 8002d8c:	4854      	ldr	r0, [pc, #336]	@ (8002ee0 <_Z41__static_initialization_and_destruction_0ii+0xe00>)
 8002d8e:	f003 fb2f 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton mainPageBtn   = PageButton(&next, 7, "pb1", 0, 0, 2, ScreenChangeCallback);
 8002d92:	4854      	ldr	r0, [pc, #336]	@ (8002ee4 <_Z41__static_initialization_and_destruction_0ii+0xe04>)
 8002d94:	f003 fb2c 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton subMenuPageBtns[] = {
 8002d98:	4c53      	ldr	r4, [pc, #332]	@ (8002ee8 <_Z41__static_initialization_and_destruction_0ii+0xe08>)
 8002d9a:	4b54      	ldr	r3, [pc, #336]	@ (8002eec <_Z41__static_initialization_and_destruction_0ii+0xe0c>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	f000 80a7 	beq.w	8002ef0 <_Z41__static_initialization_and_destruction_0ii+0xe10>
 8002da2:	3c18      	subs	r4, #24
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4620      	mov	r0, r4
 8002daa:	4798      	blx	r3
 8002dac:	e7f5      	b.n	8002d9a <_Z41__static_initialization_and_destruction_0ii+0xcba>
 8002dae:	bf00      	nop
 8002db0:	20000dec 	.word	0x20000dec
 8002db4:	20000dd4 	.word	0x20000dd4
 8002db8:	20000dd4 	.word	0x20000dd4
 8002dbc:	20000dbc 	.word	0x20000dbc
 8002dc0:	20000da4 	.word	0x20000da4
 8002dc4:	20000d74 	.word	0x20000d74
 8002dc8:	20000d74 	.word	0x20000d74
 8002dcc:	20000d44 	.word	0x20000d44
 8002dd0:	20000d44 	.word	0x20000d44
 8002dd4:	20000d14 	.word	0x20000d14
 8002dd8:	20000cfc 	.word	0x20000cfc
 8002ddc:	20000ce4 	.word	0x20000ce4
 8002de0:	20000ccc 	.word	0x20000ccc
 8002de4:	20000cb4 	.word	0x20000cb4
 8002de8:	20000c84 	.word	0x20000c84
 8002dec:	20000c84 	.word	0x20000c84
 8002df0:	20000c6c 	.word	0x20000c6c
 8002df4:	20000c6c 	.word	0x20000c6c
 8002df8:	20000c54 	.word	0x20000c54
 8002dfc:	20000c3c 	.word	0x20000c3c
 8002e00:	20000c0c 	.word	0x20000c0c
 8002e04:	20000c0c 	.word	0x20000c0c
 8002e08:	20000b4c 	.word	0x20000b4c
 8002e0c:	20000b4c 	.word	0x20000b4c
 8002e10:	20000b1c 	.word	0x20000b1c
 8002e14:	20000b04 	.word	0x20000b04
 8002e18:	20000aec 	.word	0x20000aec
 8002e1c:	20000ad4 	.word	0x20000ad4
 8002e20:	20000abc 	.word	0x20000abc
 8002e24:	20000aa4 	.word	0x20000aa4
 8002e28:	20000a8c 	.word	0x20000a8c
 8002e2c:	20000a74 	.word	0x20000a74
 8002e30:	20000a5c 	.word	0x20000a5c
 8002e34:	20000a44 	.word	0x20000a44
 8002e38:	20000a2c 	.word	0x20000a2c
 8002e3c:	200009fc 	.word	0x200009fc
 8002e40:	200009fc 	.word	0x200009fc
 8002e44:	2000095c 	.word	0x2000095c
 8002e48:	2000095c 	.word	0x2000095c
 8002e4c:	2000089c 	.word	0x2000089c
 8002e50:	2000089c 	.word	0x2000089c
 8002e54:	2000086c 	.word	0x2000086c
 8002e58:	20000854 	.word	0x20000854
 8002e5c:	2000083c 	.word	0x2000083c
 8002e60:	20000828 	.word	0x20000828
 8002e64:	20000814 	.word	0x20000814
 8002e68:	20000800 	.word	0x20000800
 8002e6c:	200007ec 	.word	0x200007ec
 8002e70:	200007d8 	.word	0x200007d8
 8002e74:	200007c4 	.word	0x200007c4
 8002e78:	200007b0 	.word	0x200007b0
 8002e7c:	2000079c 	.word	0x2000079c
 8002e80:	20000784 	.word	0x20000784
 8002e84:	2000076c 	.word	0x2000076c
 8002e88:	20000754 	.word	0x20000754
 8002e8c:	2000073c 	.word	0x2000073c
 8002e90:	20000724 	.word	0x20000724
 8002e94:	2000070c 	.word	0x2000070c
 8002e98:	200006f4 	.word	0x200006f4
 8002e9c:	200006dc 	.word	0x200006dc
 8002ea0:	200006ac 	.word	0x200006ac
 8002ea4:	200006ac 	.word	0x200006ac
 8002ea8:	2000067c 	.word	0x2000067c
 8002eac:	20000664 	.word	0x20000664
 8002eb0:	2000064c 	.word	0x2000064c
 8002eb4:	2000064c 	.word	0x2000064c
 8002eb8:	20000634 	.word	0x20000634
 8002ebc:	2000061c 	.word	0x2000061c
 8002ec0:	200005ec 	.word	0x200005ec
 8002ec4:	200005ec 	.word	0x200005ec
 8002ec8:	20000544 	.word	0x20000544
 8002ecc:	2000052c 	.word	0x2000052c
 8002ed0:	20000514 	.word	0x20000514
 8002ed4:	200004fc 	.word	0x200004fc
 8002ed8:	200004e4 	.word	0x200004e4
 8002edc:	200004cc 	.word	0x200004cc
 8002ee0:	200004b4 	.word	0x200004b4
 8002ee4:	2000049c 	.word	0x2000049c
 8002ee8:	2000049c 	.word	0x2000049c
 8002eec:	2000046c 	.word	0x2000046c
PageButton settingsBtn = PageButton(&next, 2, "pb5", 1, 0, 5, ScreenChangeCallback);
 8002ef0:	4813      	ldr	r0, [pc, #76]	@ (8002f40 <_Z41__static_initialization_and_destruction_0ii+0xe60>)
 8002ef2:	f003 fa7d 	bl	80063f0 <_ZN10PageButtonD1Ev>
PageButton homeBtn = PageButton(&next, 1, "pb1", 0, 0, 1, ScreenChangeCallback);
 8002ef6:	4813      	ldr	r0, [pc, #76]	@ (8002f44 <_Z41__static_initialization_and_destruction_0ii+0xe64>)
 8002ef8:	f003 fa7a 	bl	80063f0 <_ZN10PageButtonD1Ev>
ScreenControl screenCtrl;
 8002efc:	4812      	ldr	r0, [pc, #72]	@ (8002f48 <_Z41__static_initialization_and_destruction_0ii+0xe68>)
 8002efe:	f000 fb3f 	bl	8003580 <_ZN13ScreenControlD1Ev>
RotaryEncoder encoder2;
 8002f02:	4812      	ldr	r0, [pc, #72]	@ (8002f4c <_Z41__static_initialization_and_destruction_0ii+0xe6c>)
 8002f04:	f7fe f89e 	bl	8001044 <_ZN13RotaryEncoderD1Ev>
RotaryEncoder encoder1;
 8002f08:	4811      	ldr	r0, [pc, #68]	@ (8002f50 <_Z41__static_initialization_and_destruction_0ii+0xe70>)
 8002f0a:	f7fe f89b 	bl	8001044 <_ZN13RotaryEncoderD1Ev>
PCA9634 ledC;
 8002f0e:	4811      	ldr	r0, [pc, #68]	@ (8002f54 <_Z41__static_initialization_and_destruction_0ii+0xe74>)
 8002f10:	f000 fa1e 	bl	8003350 <_ZN7PCA9634D1Ev>
PCA9634 ledB;
 8002f14:	4810      	ldr	r0, [pc, #64]	@ (8002f58 <_Z41__static_initialization_and_destruction_0ii+0xe78>)
 8002f16:	f000 fa1b 	bl	8003350 <_ZN7PCA9634D1Ev>
PCA9634 ledA;
 8002f1a:	4810      	ldr	r0, [pc, #64]	@ (8002f5c <_Z41__static_initialization_and_destruction_0ii+0xe7c>)
 8002f1c:	f000 fa18 	bl	8003350 <_ZN7PCA9634D1Ev>
StripControl stripCtrl;
 8002f20:	480f      	ldr	r0, [pc, #60]	@ (8002f60 <_Z41__static_initialization_and_destruction_0ii+0xe80>)
 8002f22:	f000 fdcb 	bl	8003abc <_ZN12StripControlD1Ev>
StripCurrent stripCurr;
 8002f26:	480f      	ldr	r0, [pc, #60]	@ (8002f64 <_Z41__static_initialization_and_destruction_0ii+0xe84>)
 8002f28:	f000 fe4f 	bl	8003bca <_ZN12StripCurrentD1Ev>
Nextion next = Nextion();
 8002f2c:	480e      	ldr	r0, [pc, #56]	@ (8002f68 <_Z41__static_initialization_and_destruction_0ii+0xe88>)
 8002f2e:	f000 f86b 	bl	8003008 <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 8002f32:	480e      	ldr	r0, [pc, #56]	@ (8002f6c <_Z41__static_initialization_and_destruction_0ii+0xe8c>)
 8002f34:	f000 fc94 	bl	8003860 <_ZN9ShiftRegsD1Ev>
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}
 8002f40:	20000454 	.word	0x20000454
 8002f44:	2000043c 	.word	0x2000043c
 8002f48:	20000428 	.word	0x20000428
 8002f4c:	20000408 	.word	0x20000408
 8002f50:	200003e8 	.word	0x200003e8
 8002f54:	200001b0 	.word	0x200001b0
 8002f58:	2000018c 	.word	0x2000018c
 8002f5c:	20000168 	.word	0x20000168
 8002f60:	20000128 	.word	0x20000128
 8002f64:	20000110 	.word	0x20000110
 8002f68:	200000f0 	.word	0x200000f0
 8002f6c:	200000cc 	.word	0x200000cc

08002f70 <_GLOBAL__sub_I_currentADCHandle>:
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f7ff f8b1 	bl	80020e0 <_Z41__static_initialization_and_destruction_0ii>
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_GLOBAL__sub_D_currentADCHandle>:
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff f8a9 	bl	80020e0 <_Z41__static_initialization_and_destruction_0ii>
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <_ZN7NextionC1Ev+0x74>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8002f9e:	2010      	movs	r0, #16
 8002fa0:	f00c fb03 	bl	800f5aa <_Znaj>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8002fac:	2010      	movs	r0, #16
 8002fae:	f00c fafc 	bl	800f5aa <_Znaj>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 8002fba:	2010      	movs	r0, #16
 8002fbc:	f00c faf5 	bl	800f5aa <_Znaj>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	611a      	str	r2, [r3, #16]
	memset(this->cmdBuffer, 0, NEXTION_BUFFER);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2210      	movs	r2, #16
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00e fb8b 	bl	80116ec <memset>
	memset(this->recBuffer, 0, NEXTION_REC_SIZE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2210      	movs	r2, #16
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00e fb84 	bl	80116ec <memset>
	memset(this->buffer, 0, NEXTION_BUFFER);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f00e fb7d 	bl	80116ec <memset>
	this->index = 0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	719a      	strb	r2, [r3, #6]
}
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	08012080 	.word	0x08012080

08003008 <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	4a11      	ldr	r2, [pc, #68]	@ (8003058 <_ZN7NextionD1Ev+0x50>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	601a      	str	r2, [r3, #0]
{
	delete[] this->cmdBuffer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <_ZN7NextionD1Ev+0x20>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f00c fabd 	bl	800f5a2 <_ZdaPv>
	delete[] this->recBuffer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <_ZN7NextionD1Ev+0x32>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4618      	mov	r0, r3
 8003036:	f00c fab4 	bl	800f5a2 <_ZdaPv>
	delete[] this->buffer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <_ZN7NextionD1Ev+0x44>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4618      	mov	r0, r3
 8003048:	f00c faab 	bl	800f5a2 <_ZdaPv>
}
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	08012080 	.word	0x08012080

0800305c <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
}
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ffcf 	bl	8003008 <_ZN7NextionD1Ev>
 800306a:	2120      	movs	r1, #32
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f00c fa96 	bl	800f59e <_ZdlPvj>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks>:

void Nextion::Startup(UART_HandleTypeDef *uart, NextionCallbacks callbacks)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	4639      	mov	r1, r7
 8003088:	e881 000c 	stmia.w	r1, {r2, r3}
	this->uart = uart;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	615a      	str	r2, [r3, #20]
	this->callbacks = callbacks;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3318      	adds	r3, #24
 8003096:	463a      	mov	r2, r7
 8003098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800309c:	e883 0003 	stmia.w	r3, {r0, r1}
//	SetBaud(BAUD_RATE, false);
	HAL_UART_Receive(uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	2364      	movs	r3, #100	@ 0x64
 80030a6:	2210      	movs	r2, #16
 80030a8:	68b8      	ldr	r0, [r7, #8]
 80030aa:	f00a fb84 	bl	800d7b6 <HAL_UART_Receive>
	SendCommand("bkcmd=2");
 80030ae:	4907      	ldr	r1, [pc, #28]	@ (80030cc <_ZN7Nextion7StartupEP20__UART_HandleTypeDef16NextionCallbacks+0x50>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f841 	bl	8003138 <_ZN7Nextion11SendCommandEPKc>
#if DISABLE_TOUCH == 1
	// There doesnt seem to be a global "Disable Touch" command...
	SendCommand("");
#endif
	HAL_Delay(50);
 80030b6:	2032      	movs	r0, #50	@ 0x32
 80030b8:	f003 fa98 	bl	80065ec <HAL_Delay>
	this->Reset();
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f807 	bl	80030d0 <_ZN7Nextion5ResetEv>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	08011f8c 	.word	0x08011f8c

080030d0 <_ZN7Nextion5ResetEv>:

void Nextion::Reset()
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	SendCommand("rest");
 80030d8:	4905      	ldr	r1, [pc, #20]	@ (80030f0 <_ZN7Nextion5ResetEv+0x20>)
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f82c 	bl	8003138 <_ZN7Nextion11SendCommandEPKc>
	HAL_Delay(250);
 80030e0:	20fa      	movs	r0, #250	@ 0xfa
 80030e2:	f003 fa83 	bl	80065ec <HAL_Delay>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	08011f94 	.word	0x08011f94

080030f4 <_ZN7Nextion11SendCommandEv>:
	}
	return false;
}

bool Nextion::SendCommand()
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(this->uart, (unsigned char*)this->buffer, strlen(this->buffer), UART_TIMEOUT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695c      	ldr	r4, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691d      	ldr	r5, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd f881 	bl	8000210 <strlen>
 800310e:	4603      	mov	r3, r0
 8003110:	b29a      	uxth	r2, r3
 8003112:	2364      	movs	r3, #100	@ 0x64
 8003114:	4629      	mov	r1, r5
 8003116:	4620      	mov	r0, r4
 8003118:	f00a fabb 	bl	800d692 <HAL_UART_Transmit>
	HAL_UART_Transmit(this->uart, NEXT_END, 3, UART_TIMEOUT);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6958      	ldr	r0, [r3, #20]
 8003120:	2364      	movs	r3, #100	@ 0x64
 8003122:	2203      	movs	r2, #3
 8003124:	4903      	ldr	r1, [pc, #12]	@ (8003134 <_ZN7Nextion11SendCommandEv+0x40>)
 8003126:	f00a fab4 	bl	800d692 <HAL_UART_Transmit>
//	HAL_UART_Receive(this->uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
//	return CommandCheck();
}
 800312a:	bf00      	nop
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bdb0      	pop	{r4, r5, r7, pc}
 8003134:	08012074 	.word	0x08012074

08003138 <_ZN7Nextion11SendCommandEPKc>:

bool Nextion::SendCommand(const char *buffer)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(this->uart, (unsigned char*)buffer, strlen(buffer), UART_TIMEOUT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695c      	ldr	r4, [r3, #20]
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f7fd f862 	bl	8000210 <strlen>
 800314c:	4603      	mov	r3, r0
 800314e:	b29a      	uxth	r2, r3
 8003150:	2364      	movs	r3, #100	@ 0x64
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	4620      	mov	r0, r4
 8003156:	f00a fa9c 	bl	800d692 <HAL_UART_Transmit>
	HAL_UART_Transmit(this->uart, NEXT_END, 3, UART_TIMEOUT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6958      	ldr	r0, [r3, #20]
 800315e:	2364      	movs	r3, #100	@ 0x64
 8003160:	2203      	movs	r2, #3
 8003162:	4904      	ldr	r1, [pc, #16]	@ (8003174 <_ZN7Nextion11SendCommandEPKc+0x3c>)
 8003164:	f00a fa95 	bl	800d692 <HAL_UART_Transmit>
//	HAL_UART_Receive(this->uart, this->recBuffer, NEXTION_REC_SIZE, UART_TIMEOUT);
//	return CommandCheck();
}
 8003168:	bf00      	nop
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop
 8003174:	08012074 	.word	0x08012074

08003178 <_ZN7Nextion7SetPageEh>:
{
	SetPage(0);
}

void Nextion::SetPage(uint8_t id)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
	snprintf(this->buffer, 8, "page %d", id);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6918      	ldr	r0, [r3, #16]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	4a05      	ldr	r2, [pc, #20]	@ (80031a0 <_ZN7Nextion7SetPageEh+0x28>)
 800318c:	2108      	movs	r1, #8
 800318e:	f00e fa79 	bl	8011684 <sniprintf>
	SendCommand();
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffae 	bl	80030f4 <_ZN7Nextion11SendCommandEv>
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	08011fc0 	.word	0x08011fc0

080031a4 <_ZN7Nextion14SetProgressBarEhh>:
	snprintf(this->buffer, 12, "%s.val=%d", objId, value);
	SendCommand();
}

void Nextion::SetProgressBar(uint8_t objId, uint8_t value)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
 80031b0:	4613      	mov	r3, r2
 80031b2:	70bb      	strb	r3, [r7, #2]
	snprintf(this->buffer, 10, "j%d.val=%d", objId, value);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6918      	ldr	r0, [r3, #16]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	78bb      	ldrb	r3, [r7, #2]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <_ZN7Nextion14SetProgressBarEhh+0x34>)
 80031c2:	210a      	movs	r1, #10
 80031c4:	f00e fa5e 	bl	8011684 <sniprintf>
	SendCommand();
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff93 	bl	80030f4 <_ZN7Nextion11SendCommandEv>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	08011fec 	.word	0x08011fec

080031dc <_ZN7Nextion8SetClickEhb>:
	snprintf(this->buffer, 11, "%s.dis=%d", objId, scale);
	SendCommand();
}

void Nextion::SetClick(uint8_t id, bool en)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
 80031e8:	4613      	mov	r3, r2
 80031ea:	70bb      	strb	r3, [r7, #2]
	snprintf(this->buffer, 10, "click %d,%d", id, (uint8_t)en);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6918      	ldr	r0, [r3, #16]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	78bb      	ldrb	r3, [r7, #2]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <_ZN7Nextion8SetClickEhb+0x34>)
 80031fa:	210a      	movs	r1, #10
 80031fc:	f00e fa42 	bl	8011684 <sniprintf>
	SendCommand();
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff77 	bl	80030f4 <_ZN7Nextion11SendCommandEv>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	08012054 	.word	0x08012054

08003214 <_ZN15PCA9634Settings7ToBytesEPhj>:
 * @brief Convert settings into two bytes and add them to the buffer.
 * @param buffer The buffer to store the settings in.
 * @param offset sets an offset from the start of the buffer to save the settings. Default = 0.
 */
void PCA9634Settings::ToBytes(uint8_t *buffer, size_t offset = 0)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
	uint8_t upper = (uint8_t)this->Enable;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	795b      	ldrb	r3, [r3, #5]
 8003224:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Driver << 2;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	791b      	ldrb	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	b25a      	sxtb	r2, r3
 800322e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003232:	4313      	orrs	r3, r2
 8003234:	b25b      	sxtb	r3, r3
 8003236:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Change << 3;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	b25a      	sxtb	r2, r3
 8003240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003244:	4313      	orrs	r3, r2
 8003246:	b25b      	sxtb	r3, r3
 8003248:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->Invert << 4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	b25a      	sxtb	r2, r3
 8003252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003256:	4313      	orrs	r3, r2
 8003258:	b25b      	sxtb	r3, r3
 800325a:	75fb      	strb	r3, [r7, #23]
	upper |= (uint8_t)this->GroupCtrl << 5;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	015b      	lsls	r3, r3, #5
 8003262:	b25a      	sxtb	r2, r3
 8003264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003268:	4313      	orrs	r3, r2
 800326a:	b25b      	sxtb	r3, r3
 800326c:	75fb      	strb	r3, [r7, #23]

	uint8_t lower = (uint8_t)this->AllCallEnable;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	799b      	ldrb	r3, [r3, #6]
 8003272:	75bb      	strb	r3, [r7, #22]
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	79db      	ldrb	r3, [r3, #7]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	7a1b      	ldrb	r3, [r3, #8]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	b2db      	uxtb	r3, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 8003284:	4413      	add	r3, r2
 8003286:	b2da      	uxtb	r2, r3
			 ((uint8_t)this->SubAddrEn3 << 3);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	7a5b      	ldrb	r3, [r3, #9]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	b2db      	uxtb	r3, r3
			 ((uint8_t)this->SubAddrEn2 << 2) +
 8003290:	4413      	add	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	b25a      	sxtb	r2, r3
	lower |= ((uint8_t)this->SubAddrEn1 << 1) +
 8003296:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800329a:	4313      	orrs	r3, r2
 800329c:	b25b      	sxtb	r3, r3
 800329e:	75bb      	strb	r3, [r7, #22]
	lower |= (uint8_t)this->Sleep << 4;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	b25a      	sxtb	r2, r3
 80032a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	75bb      	strb	r3, [r7, #22]

	buffer[0 + offset] = lower;
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	7dba      	ldrb	r2, [r7, #22]
 80032ba:	701a      	strb	r2, [r3, #0]
	buffer[1 + offset] = upper;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3301      	adds	r3, #1
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4413      	add	r3, r2
 80032c4:	7dfa      	ldrb	r2, [r7, #23]
 80032c6:	701a      	strb	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_ZN7PCA9634C1EhP22__FMPI2C_HandleTypeDef3Pin>:
	return result;
}

/* PCA9634 Class Methods -----------------------------------------------------*/

PCA9634::PCA9634(uint8_t address, FMPI2C_HandleTypeDef *i2cBus, Pin oePin)
 80032d4:	b082      	sub	sp, #8
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	460b      	mov	r3, r1
 80032e4:	72fb      	strb	r3, [r7, #11]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	227f      	movs	r2, #127	@ 0x7f
 80032ea:	741a      	strb	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3311      	adds	r3, #17
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd ff8f 	bl	8001214 <_ZN15PCA9634SettingsC1Ev>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	331c      	adds	r3, #28
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd fe5c 	bl	8000fb8 <_ZN3PinC1Ev>
{
	this->address = address << 1;
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	701a      	strb	r2, [r3, #0]
	this->i2cBus = i2cBus;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]
	this->channels = new uint8_t[RGB_CHANNELS];
 8003310:	2008      	movs	r0, #8
 8003312:	f00c f94a 	bl	800f5aa <_Znaj>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	609a      	str	r2, [r3, #8]
	this->channelState = new PCA9634_LEDOUT[RGB_CHANNELS];
 800331e:	2008      	movs	r0, #8
 8003320:	f00c f943 	bl	800f5aa <_Znaj>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	60da      	str	r2, [r3, #12]
	this->oePin = oePin;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	331c      	adds	r3, #28
 8003330:	f107 021c 	add.w	r2, r7, #28
 8003334:	6810      	ldr	r0, [r2, #0]
 8003336:	6018      	str	r0, [r3, #0]
 8003338:	8891      	ldrh	r1, [r2, #4]
 800333a:	7992      	ldrb	r2, [r2, #6]
 800333c:	8099      	strh	r1, [r3, #4]
 800333e:	719a      	strb	r2, [r3, #6]
}
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800334c:	b002      	add	sp, #8
 800334e:	4770      	bx	lr

08003350 <_ZN7PCA9634D1Ev>:

PCA9634::~PCA9634()
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
{
	delete[] channels;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <_ZN7PCA9634D1Ev+0x1a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f00c f91c 	bl	800f5a2 <_ZdaPv>
}
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings>:
 * @brief Update the current settings and send it to the PCA9634.
 * @param settings The new esttings to apply.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::ChangeSettings(PCA9634Settings settings)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4638      	mov	r0, r7
 800337e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (SendSettings(settings) == HAL_OK)
 8003382:	463b      	mov	r3, r7
 8003384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f848 	bl	800341c <_ZN7PCA963412SendSettingsE15PCA9634Settings>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x3e>
	{
		this->settings = settings;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f103 0211 	add.w	r2, r3, #17
 80033a2:	463b      	mov	r3, r7
 80033a4:	cb03      	ldmia	r3!, {r0, r1}
 80033a6:	6010      	str	r0, [r2, #0]
 80033a8:	6051      	str	r1, [r2, #4]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	8113      	strh	r3, [r2, #8]
		return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <_ZN7PCA963414ChangeSettingsE15PCA9634Settings+0x40>
	}
	return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZN7PCA963410SetChannelEhh>:
	HAL_FMPI2C_Master_Receive(i2cBus, this->address, buffer, 2, 200);
	return PCA9634Settings::FromBytes(buffer);
}

void PCA9634::SetChannel(uint8_t index, uint8_t pwm)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
 80033c8:	4613      	mov	r3, r2
 80033ca:	70bb      	strb	r3, [r7, #2]
	this->channels[index] = pwm;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	4413      	add	r3, r2
 80033d4:	78ba      	ldrb	r2, [r7, #2]
 80033d6:	701a      	strb	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_ZN7PCA96346SetAllEb>:
{
	return this->channels[index];
}

void PCA9634::SetAll(bool state)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
	this->oePin.Write((GPIO_PinState)state);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	331c      	adds	r3, #28
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fc69 	bl	8003cd0 <_ZN3Pin5WriteE13GPIO_PinState>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_ZN7PCA96346UpdateEv>:
{
	this->oePin.Write(state);
}

HAL_StatusTypeDef PCA9634::Update()
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
//		ledOut0 |= (uint8_t)this->channelState[i] << (i * 2);
//	}
//	uint8_t buffer[2] = {(uint8_t)(ledOut0 >> 8), (uint8_t)(ledOut0 & 0xFF)};
//	HAL_StatusTypeDef pwmStatus = WriteBytes(PCA9634_AUTO_INC::LED_REGS, PCA9634_CTRL_REGISTER::PWMStart, this->channels, RGB_CHANNELS);
//	return pwmStatus + WriteBytes(PCA9634_AUTO_INC::ALL_REGS, PCA9634_CTRL_REGISTER::LEDOUT0, buffer, 2) == 0 ? HAL_OK : HAL_ERROR;
}
 800340e:	bf00      	nop
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_ZN7PCA963412SendSettingsE15PCA9634Settings>:
 * @brief PRIVATE - Sends the provided settings to the PCA9634.
 * @param settings The new esttings to send.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::SendSettings(PCA9634Settings settings)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	4638      	mov	r0, r7
 8003426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buffer[3] = {0,0,0};
 800342a:	4a0f      	ldr	r2, [pc, #60]	@ (8003468 <_ZN7PCA963412SendSettingsE15PCA9634Settings+0x4c>)
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4611      	mov	r1, r2
 8003434:	8019      	strh	r1, [r3, #0]
 8003436:	3302      	adds	r3, #2
 8003438:	0c12      	lsrs	r2, r2, #16
 800343a:	701a      	strb	r2, [r3, #0]
	settings.ToBytes(buffer, 1);
 800343c:	f107 0114 	add.w	r1, r7, #20
 8003440:	463b      	mov	r3, r7
 8003442:	2201      	movs	r2, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fee5 	bl	8003214 <_ZN15PCA9634Settings7ToBytesEPhj>
	return WriteBytes(PCA9634_AUTO_INC::ALL_REGS, PCA9634_CTRL_REGISTER::MODE1, buffer, 3);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	2203      	movs	r2, #3
 8003450:	9200      	str	r2, [sp, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	2104      	movs	r1, #4
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f808 	bl	800346c <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	08012060 	.word	0x08012060

0800346c <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj>:
 * @param inc Auto-Increment register option.
 * @param reg The starting register to send to.
 * @retval HAL status
 */
HAL_StatusTypeDef PCA9634::WriteBytes(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg, uint8_t *bytes, size_t len)
{
 800346c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003470:	b08b      	sub	sp, #44	@ 0x2c
 8003472:	af02      	add	r7, sp, #8
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	72fb      	strb	r3, [r7, #11]
 800347c:	4613      	mov	r3, r2
 800347e:	72bb      	strb	r3, [r7, #10]
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
		temp[j] = bytes[i];
	}
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
}
 8003480:	466b      	mov	r3, sp
 8003482:	461e      	mov	r6, r3
	uint8_t temp[len + 1] = { this->CombineCommand(inc, reg) };
 8003484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003486:	1c59      	adds	r1, r3, #1
 8003488:	460b      	mov	r3, r1
 800348a:	3b01      	subs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	2300      	movs	r3, #0
 8003490:	4688      	mov	r8, r1
 8003492:	4699      	mov	r9, r3
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a8:	2300      	movs	r3, #0
 80034aa:	460c      	mov	r4, r1
 80034ac:	461d      	mov	r5, r3
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	00eb      	lsls	r3, r5, #3
 80034b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034bc:	00e2      	lsls	r2, r4, #3
 80034be:	1dcb      	adds	r3, r1, #7
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	ebad 0d03 	sub.w	sp, sp, r3
 80034c8:	ab02      	add	r3, sp, #8
 80034ca:	3300      	adds	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693c      	ldr	r4, [r7, #16]
 80034d0:	460b      	mov	r3, r1
 80034d2:	1e5d      	subs	r5, r3, #1
 80034d4:	7aba      	ldrb	r2, [r7, #10]
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	4619      	mov	r1, r3
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f83a 	bl	8003554 <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>
 80034e0:	4603      	mov	r3, r0
 80034e2:	7023      	strb	r3, [r4, #0]
 80034e4:	1c62      	adds	r2, r4, #1
 80034e6:	1e6b      	subs	r3, r5, #1
 80034e8:	e003      	b.n	80034f2 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x86>
 80034ea:	2100      	movs	r1, #0
 80034ec:	7011      	strb	r1, [r2, #0]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	3201      	adds	r2, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	daf9      	bge.n	80034ea <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x7e>
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 80034f6:	2301      	movs	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e00e      	b.n	800351e <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0xb2>
		temp[j] = bytes[i];
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	4413      	add	r3, r2
 8003506:	7819      	ldrb	r1, [r3, #0]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	460a      	mov	r2, r1
 8003510:	701a      	strb	r2, [r3, #0]
	for (size_t i = 1, j = 0; i < len + 1; ++i, ++j) {
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	3301      	adds	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003520:	3301      	adds	r3, #1
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3eb      	bcc.n	8003500 <_ZN7PCA963410WriteBytesE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTERPhj+0x94>
	return HAL_FMPI2C_Master_Transmit(this->i2cBus, this->address, temp, len + 1, FMPI2C_TIMEOUT);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6858      	ldr	r0, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4619      	mov	r1, r3
 8003532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003534:	b29b      	uxth	r3, r3
 8003536:	3301      	adds	r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	22c8      	movs	r2, #200	@ 0xc8
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	f004 fb7c 	bl	8007c3c <HAL_FMPI2C_Master_Transmit>
 8003544:	4603      	mov	r3, r0
 8003546:	bf00      	nop
 8003548:	46b5      	mov	sp, r6
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	@ 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003554 <_ZN7PCA963414CombineCommandE16PCA9634_AUTO_INC21PCA9634_CTRL_REGISTER>:
 * @param inc Auto-Increment register option.
 * @param reg Desired register.
 * @retval HAL status
 */
uint8_t PCA9634::CombineCommand(PCA9634_AUTO_INC inc, PCA9634_CTRL_REGISTER reg)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]
 8003560:	4613      	mov	r3, r2
 8003562:	70bb      	strb	r3, [r7, #2]
	return (uint8_t)reg | ((uint8_t)inc << 5);
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	015b      	lsls	r3, r3, #5
 8003568:	b25a      	sxtb	r2, r3
 800356a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800356e:	4313      	orrs	r3, r2
 8003570:	b25b      	sxtb	r3, r3
 8003572:	b2db      	uxtb	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_ZN13ScreenControlD1Ev>:
 *      Author: Daxxn
 */

#include "ScreenControl.h"

ScreenControl::~ScreenControl()
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <_ZN13ScreenControlD1Ev+0x70>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
{
	this->nxt = NULL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]
	delete[] this->pages;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d024      	beq.n	80035e6 <_ZN13ScreenControlD1Ev+0x66>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	3b04      	subs	r3, #4
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	18cc      	adds	r4, r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d005      	beq.n	80035c6 <_ZN13ScreenControlD1Ev+0x46>
 80035ba:	3c30      	subs	r4, #48	@ 0x30
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4620      	mov	r0, r4
 80035c2:	4798      	blx	r3
 80035c4:	e7f5      	b.n	80035b2 <_ZN13ScreenControlD1Ev+0x32>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f1a3 0008 	sub.w	r0, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	3b04      	subs	r3, #4
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3308      	adds	r3, #8
 80035e0:	4619      	mov	r1, r3
 80035e2:	f00b ffe0 	bl	800f5a6 <_ZdaPvj>
}
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}
 80035f0:	08012090 	.word	0x08012090

080035f4 <_ZN13ScreenControlD0Ev>:
ScreenControl::~ScreenControl()
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
}
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ffbf 	bl	8003580 <_ZN13ScreenControlD1Ev>
 8003602:	2114      	movs	r1, #20
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f00b ffca 	bl	800f59e <_ZdlPvj>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <_ZN13ScreenControl4InitEP7NextionP4Page>:

HAL_StatusTypeDef ScreenControl::Init(Nextion *nxt, Page *pages)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
	this->nxt = nxt;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	605a      	str	r2, [r3, #4]
	this->pages = pages;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <_ZN13ScreenControl12NavigateHorzEa>:

void ScreenControl::NavigateHorz(int8_t x)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	70fb      	strb	r3, [r7, #3]
	this->currentPage->Navigate(x, 0);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800364e:	2200      	movs	r2, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f002 fd65 	bl	8006120 <_ZN4Page8NavigateEaa>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <_ZN13ScreenControl12NavigateVertEa>:

void ScreenControl::NavigateVert(int8_t y)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
	this->currentPage->Navigate(0, y);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f002 fd53 	bl	8006120 <_ZN4Page8NavigateEaa>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_ZN13ScreenControl15ChangePageEventEh>:
{
	this->currentPage->Navigate(x, y);
}

void ScreenControl::ChangePageEvent(uint8_t pageID)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
	this->currentPage = &this->pages[pageID];
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	18ca      	adds	r2, r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
	this->currentPage->Init();
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 fe35 	bl	8006316 <_ZN4Page4InitEv>
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_ZN13ScreenControl10ChangePageEh>:

void ScreenControl::ChangePage(uint8_t pageID)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < PAGE_COUNT; ++i) {
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e027      	b.n	8003716 <_ZN13ScreenControl10ChangePageEh+0x62>
		if (this->pages[i].ID == pageID)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	440b      	add	r3, r1
 80036d6:	791b      	ldrb	r3, [r3, #4]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d118      	bne.n	8003710 <_ZN13ScreenControl10ChangePageEh+0x5c>
		{
			if (this->currentPage != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <_ZN13ScreenControl10ChangePageEh+0x3c>
			{
				this->prevPage = this->currentPage->ID;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	791a      	ldrb	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	741a      	strb	r2, [r3, #16]
			}
			this->currentPage = &this->pages[i];
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	18ca      	adds	r2, r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]
			this->currentPage->Init();
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	f002 fe04 	bl	8006316 <_ZN4Page4InitEv>
			return;
 800370e:	e005      	b.n	800371c <_ZN13ScreenControl10ChangePageEh+0x68>
	for (int i = 0; i < PAGE_COUNT; ++i) {
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b08      	cmp	r3, #8
 800371a:	ddd4      	ble.n	80036c6 <_ZN13ScreenControl10ChangePageEh+0x12>
		}
	}
}
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_ZN13ScreenControl8HomePageEv>:
		this->ChangePage(this->prevPage);
	}
}

void ScreenControl::HomePage()
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
	this->ChangePage(HOME_PAGE);
 800372a:	2101      	movs	r1, #1
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ffc1 	bl	80036b4 <_ZN13ScreenControl10ChangePageEh>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <_ZN13ScreenControl10TouchEventEhhh>:
	this->currentPage = &this->pages[index];
	this->currentPage->Init();
}

void ScreenControl::TouchEvent(uint8_t pageID, uint8_t compID, uint8_t event)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	4608      	mov	r0, r1
 8003744:	4611      	mov	r1, r2
 8003746:	461a      	mov	r2, r3
 8003748:	4603      	mov	r3, r0
 800374a:	70fb      	strb	r3, [r7, #3]
 800374c:	460b      	mov	r3, r1
 800374e:	70bb      	strb	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
	if (this->CheckPage(pageID))
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f82a 	bl	80037b2 <_ZN13ScreenControl9CheckPageEh>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d011      	beq.n	8003788 <_ZN13ScreenControl10TouchEventEhhh+0x4e>
	{
		Control* ctrl = this->currentPage->FindControl(compID);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	78ba      	ldrb	r2, [r7, #2]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fdf7 	bl	8006360 <_ZN4Page11FindControlEh>
 8003772:	60f8      	str	r0, [r7, #12]
		if (ctrl != NULL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <_ZN13ScreenControl10TouchEventEhhh+0x4e>
		{
			ctrl->Act();
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4610      	mov	r0, r2
 8003786:	4798      	blx	r3
		}
	}
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <_ZN13ScreenControl3ActEv>:

void ScreenControl::Act()
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	this->currentPage->Act();
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4610      	mov	r0, r2
 80037a8:	4798      	blx	r3
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <_ZN13ScreenControl9CheckPageEh>:
{
	this->nxt->SetText(objId, text, len);
}

bool ScreenControl::CheckPage(uint8_t pageID)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	70fb      	strb	r3, [r7, #3]
	return this->currentPage->ID == pageID;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	791b      	ldrb	r3, [r3, #4]
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4639      	mov	r1, r7
 80037e8:	e881 000c 	stmia.w	r1, {r2, r3}
 80037ec:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3308      	adds	r3, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fbde 	bl	8000fb8 <_ZN3PinC1Ev>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3310      	adds	r3, #16
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fbd9 	bl	8000fb8 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3308      	adds	r3, #8
 8003810:	463a      	mov	r2, r7
 8003812:	6810      	ldr	r0, [r2, #0]
 8003814:	6018      	str	r0, [r3, #0]
 8003816:	8891      	ldrh	r1, [r2, #4]
 8003818:	7992      	ldrb	r2, [r2, #6]
 800381a:	8099      	strh	r1, [r3, #4]
 800381c:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3310      	adds	r3, #16
 8003822:	f107 0218 	add.w	r2, r7, #24
 8003826:	6810      	ldr	r0, [r2, #0]
 8003828:	6018      	str	r0, [r3, #0]
 800382a:	8891      	ldrh	r1, [r2, #4]
 800382c:	7992      	ldrb	r2, [r2, #6]
 800382e:	8099      	strh	r1, [r3, #4]
 8003830:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8003832:	2002      	movs	r0, #2
 8003834:	f00b feb9 	bl	800f5aa <_Znaj>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	4613      	mov	r3, r2
 800383e:	2100      	movs	r1, #0
 8003840:	7019      	strb	r1, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	2100      	movs	r1, #0
 8003846:	7019      	strb	r1, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	831a      	strh	r2, [r3, #24]
}
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	080120a0 	.word	0x080120a0

08003860 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	4a08      	ldr	r2, [pc, #32]	@ (800388c <_ZN9ShiftRegsD1Ev+0x2c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <_ZN9ShiftRegsD1Ev+0x20>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4618      	mov	r0, r3
 800387c:	f00b fe91 	bl	800f5a2 <_ZdaPv>
}
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	080120a0 	.word	0x080120a0

08003890 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
}
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffe1 	bl	8003860 <_ZN9ShiftRegsD1Ev>
 800389e:	2124      	movs	r1, #36	@ 0x24
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f00b fe7c 	bl	800f59e <_ZdlPvj>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3308      	adds	r3, #8
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fa35 	bl	8003d2c <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3310      	adds	r3, #16
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fa30 	bl	8003d2c <_ZN3Pin5ClearEv>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <_ZN9ShiftRegs8SetValueEhj>:
{
	this->SetValue((uint8_t)value, index);
}

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	460b      	mov	r3, r1
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10d      	bne.n	8003904 <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8b1b      	ldrh	r3, [r3, #24]
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	2101      	movs	r1, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8003902:	e00e      	b.n	8003922 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8b1b      	ldrh	r3, [r3, #24]
 8003908:	b21a      	sxth	r2, r3
 800390a:	2101      	movs	r1, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	b21b      	sxth	r3, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	b21b      	sxth	r3, r3
 8003918:	4013      	ands	r3, r2
 800391a:	b21b      	sxth	r3, r3
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	831a      	strh	r2, [r3, #24]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f80f 	bl	800395e <_ZN9ShiftRegs8GetValueEj>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ffbf 	bl	80038d4 <_ZN9ShiftRegs8SetValueEhj>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8b1b      	ldrh	r3, [r3, #24]
 800396c:	461a      	mov	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	fa42 f303 	asr.w	r3, r2, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_ZN12StripControlC1EP12StripCurrent>:
 *      Author: Daxxn
 */

#include "StripControl.h"

StripControl::StripControl(StripCurrent *stripCurrent)
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	@ 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	4a47      	ldr	r2, [pc, #284]	@ (8003ab0 <_ZN12StripControlC1EP12StripCurrent+0x128>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3310      	adds	r3, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd fb0b 	bl	8000fb8 <_ZN3PinC1Ev>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3318      	adds	r3, #24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fb06 	bl	8000fb8 <_ZN3PinC1Ev>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3320      	adds	r3, #32
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd fb01 	bl	8000fb8 <_ZN3PinC1Ev>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3328      	adds	r3, #40	@ 0x28
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fafc 	bl	8000fb8 <_ZN3PinC1Ev>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3330      	adds	r3, #48	@ 0x30
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd faf7 	bl	8000fb8 <_ZN3PinC1Ev>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3338      	adds	r3, #56	@ 0x38
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd faf2 	bl	8000fb8 <_ZN3PinC1Ev>
{
	this->stripCurrent = stripCurrent;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	605a      	str	r2, [r3, #4]
//	this->stripEShdnPin = Pin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin);
	this->stripEShdnPin = Pin(STRIP_ESHDN_GPIO_Port, STRIP_ESHDN_Pin, ACTIVE_LOW);
 80039da:	f107 0008 	add.w	r0, r7, #8
 80039de:	2301      	movs	r3, #1
 80039e0:	2201      	movs	r2, #1
 80039e2:	4934      	ldr	r1, [pc, #208]	@ (8003ab4 <_ZN12StripControlC1EP12StripCurrent+0x12c>)
 80039e4:	f7fd fbd3 	bl	800118e <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3320      	adds	r3, #32
 80039ec:	f107 0208 	add.w	r2, r7, #8
 80039f0:	6810      	ldr	r0, [r2, #0]
 80039f2:	6018      	str	r0, [r3, #0]
 80039f4:	8891      	ldrh	r1, [r2, #4]
 80039f6:	7992      	ldrb	r2, [r2, #6]
 80039f8:	8099      	strh	r1, [r3, #4]
 80039fa:	719a      	strb	r2, [r3, #6]
	this->stripPGoodPin = Pin(STRIP_PG_GPIO_Port, STRIP_PG_Pin);
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	2208      	movs	r2, #8
 8003a02:	492c      	ldr	r1, [pc, #176]	@ (8003ab4 <_ZN12StripControlC1EP12StripCurrent+0x12c>)
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd fba7 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	f107 0210 	add.w	r2, r7, #16
 8003a12:	6810      	ldr	r0, [r2, #0]
 8003a14:	6018      	str	r0, [r3, #0]
 8003a16:	8891      	ldrh	r1, [r2, #4]
 8003a18:	7992      	ldrb	r2, [r2, #6]
 8003a1a:	8099      	strh	r1, [r3, #4]
 8003a1c:	719a      	strb	r2, [r3, #6]
	this->stripPowerPin = Pin(STRIP_PWR_GPIO_Port, STRIP_PWR_Pin);
 8003a1e:	f107 0318 	add.w	r3, r7, #24
 8003a22:	2201      	movs	r2, #1
 8003a24:	4924      	ldr	r1, [pc, #144]	@ (8003ab8 <_ZN12StripControlC1EP12StripCurrent+0x130>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fb96 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3310      	adds	r3, #16
 8003a30:	f107 0218 	add.w	r2, r7, #24
 8003a34:	6810      	ldr	r0, [r2, #0]
 8003a36:	6018      	str	r0, [r3, #0]
 8003a38:	8891      	ldrh	r1, [r2, #4]
 8003a3a:	7992      	ldrb	r2, [r2, #6]
 8003a3c:	8099      	strh	r1, [r3, #4]
 8003a3e:	719a      	strb	r2, [r3, #6]
	this->vddPGoodPin = Pin(VDD_PG_GPIO_Port, VDD_PG_Pin);
 8003a40:	f107 0320 	add.w	r3, r7, #32
 8003a44:	2202      	movs	r2, #2
 8003a46:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <_ZN12StripControlC1EP12StripCurrent+0x12c>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd fb85 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3328      	adds	r3, #40	@ 0x28
 8003a52:	f107 0220 	add.w	r2, r7, #32
 8003a56:	6810      	ldr	r0, [r2, #0]
 8003a58:	6018      	str	r0, [r3, #0]
 8003a5a:	8891      	ldrh	r1, [r2, #4]
 8003a5c:	7992      	ldrb	r2, [r2, #6]
 8003a5e:	8099      	strh	r1, [r3, #4]
 8003a60:	719a      	strb	r2, [r3, #6]
	this->vaaPGoodPin = Pin(VAA_PG_GPIO_Port, VAA_PG_Pin);
 8003a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a66:	2204      	movs	r2, #4
 8003a68:	4912      	ldr	r1, [pc, #72]	@ (8003ab4 <_ZN12StripControlC1EP12StripCurrent+0x12c>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fb74 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3330      	adds	r3, #48	@ 0x30
 8003a74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003a78:	6810      	ldr	r0, [r2, #0]
 8003a7a:	6018      	str	r0, [r3, #0]
 8003a7c:	8891      	ldrh	r1, [r2, #4]
 8003a7e:	7992      	ldrb	r2, [r2, #6]
 8003a80:	8099      	strh	r1, [r3, #4]
 8003a82:	719a      	strb	r2, [r3, #6]
	this->pwmOEPin = Pin(PWM_OE_GPIO_Port, PWM_OE_Pin);
 8003a84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a88:	2240      	movs	r2, #64	@ 0x40
 8003a8a:	490a      	ldr	r1, [pc, #40]	@ (8003ab4 <_ZN12StripControlC1EP12StripCurrent+0x12c>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd fb63 	bl	8001158 <_ZN3PinC1EP12GPIO_TypeDeft>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3338      	adds	r3, #56	@ 0x38
 8003a96:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003a9a:	6810      	ldr	r0, [r2, #0]
 8003a9c:	6018      	str	r0, [r3, #0]
 8003a9e:	8891      	ldrh	r1, [r2, #4]
 8003aa0:	7992      	ldrb	r2, [r2, #6]
 8003aa2:	8099      	strh	r1, [r3, #4]
 8003aa4:	719a      	strb	r2, [r3, #6]
}
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3738      	adds	r7, #56	@ 0x38
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	080120b0 	.word	0x080120b0
 8003ab4:	40020800 	.word	0x40020800
 8003ab8:	40020c00 	.word	0x40020c00

08003abc <_ZN12StripControlD1Ev>:

StripControl::~StripControl()
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	4a06      	ldr	r2, [pc, #24]	@ (8003ae0 <_ZN12StripControlD1Ev+0x24>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
{
	this->stripCurrent = NULL;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	605a      	str	r2, [r3, #4]
}
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	080120b0 	.word	0x080120b0

08003ae4 <_ZN12StripControlD0Ev>:
StripControl::~StripControl()
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
}
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ffe5 	bl	8003abc <_ZN12StripControlD1Ev>
 8003af2:	2140      	movs	r1, #64	@ 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f00b fd52 	bl	800f59e <_ZdlPvj>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_ZN12StripControl4InitEv>:

HAL_StatusTypeDef StripControl::Init()
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	this->stripPowerPin.Clear();
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3310      	adds	r3, #16
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f90b 	bl	8003d2c <_ZN3Pin5ClearEv>
	this->stripEShdnPin.Clear();
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3320      	adds	r3, #32
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f906 	bl	8003d2c <_ZN3Pin5ClearEv>
	this->pwmOEPin.Clear();
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3338      	adds	r3, #56	@ 0x38
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f901 	bl	8003d2c <_ZN3Pin5ClearEv>
	this->vddPGood   = this->vddPGoodPin.Read();
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3328      	adds	r3, #40	@ 0x28
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f8eb 	bl	8003d0a <_ZN3Pin4ReadEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	729a      	strb	r2, [r3, #10]
	this->vaaPGood   = this->vaaPGoodPin.Read();
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3330      	adds	r3, #48	@ 0x30
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f8e2 	bl	8003d0a <_ZN3Pin4ReadEv>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	72da      	strb	r2, [r3, #11]
	this->stripPGood = this->stripPGoodPin.Read();
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3318      	adds	r3, #24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f8d9 	bl	8003d0a <_ZN3Pin4ReadEv>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	725a      	strb	r2, [r3, #9]
	this->stripEShdnPin.Write(GPIO_PIN_RESET);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3320      	adds	r3, #32
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f8b2 	bl	8003cd0 <_ZN3Pin5WriteE13GPIO_PinState>
	return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN12StripCurrentC1EP19__ADC_HandleTypeDefP17TIM_HandleTypeDefPFv18StripCurrentStatusE>:

#include "main.h"
#include "string.h"
#include "StripCurrent.h"

StripCurrent::StripCurrent(ADC_HandleTypeDef *adcHandle, TIM_HandleTypeDef *timer, pStripCurrentAlertTypeDef callback)
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
{
	this->buffer = new uint8_t[STRIP_CURR_BUFFER_LEN];
 8003b84:	206e      	movs	r0, #110	@ 0x6e
 8003b86:	f00b fd10 	bl	800f5aa <_Znaj>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	60da      	str	r2, [r3, #12]
	this->adc = adcHandle;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	605a      	str	r2, [r3, #4]
	this->timer = timer;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
	this->averages = new uint8_t[ADC_CHANNELS];
 8003b9e:	200b      	movs	r0, #11
 8003ba0:	f00b fd03 	bl	800f5aa <_Znaj>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	615a      	str	r2, [r3, #20]
	memset(this->averages, 0, ADC_CHANNELS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	220b      	movs	r2, #11
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00d fd99 	bl	80116ec <memset>
	this->alertCallback = callback;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	601a      	str	r2, [r3, #0]
//	HAL_ADC_RegisterCallback(adc, HAL_ADC_CONVERSION_COMPLETE_CB_ID, callback);
}
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZN12StripCurrentD1Ev>:

StripCurrent::~StripCurrent()
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
{
	delete[] this->buffer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <_ZN12StripCurrentD1Ev+0x1a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f00b fcdf 	bl	800f5a2 <_ZdaPv>
	delete[] this->averages;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <_ZN12StripCurrentD1Ev+0x2c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00b fcd6 	bl	800f5a2 <_ZdaPv>
}
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_ZN12StripCurrent4InitEv>:

HAL_StatusTypeDef StripCurrent::Init()
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_Start_DMA(this->adc, (uint32_t *)this->buffer, STRIP_CURR_BUFFER_LEN) != HAL_OK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6858      	ldr	r0, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	226e      	movs	r2, #110	@ 0x6e
 8003c12:	4619      	mov	r1, r3
 8003c14:	f002 fe88 	bl	8006928 <HAL_ADC_Start_DMA>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <_ZN12StripCurrent4InitEv+0x2c>
	{
		return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e006      	b.n	8003c3a <_ZN12StripCurrent4InitEv+0x3a>
	}
	return HAL_TIM_Base_Start(this->timer);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f008 fc47 	bl	800c4c4 <HAL_TIM_Base_Start>
 8003c36:	4603      	mov	r3, r0
 8003c38:	bf00      	nop
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <_ZN12StripCurrent4CalcEv>:
{
	return buffer[ch];
}

void StripCurrent::Calc()
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	// Get each channels value from the DMA buffer
	// and calc the average.
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e026      	b.n	8003ca0 <_ZN12StripCurrent4CalcEv+0x5c>
		static uint16_t sum;
		for (int offset = 0; offset < STRIP_CURR_BUFFER_LEN; offset += ADC_CHANNELS) {
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	e010      	b.n	8003c7a <_ZN12StripCurrent4CalcEv+0x36>
			sum += buffer[i + offset];
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68f9      	ldr	r1, [r7, #12]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	440a      	add	r2, r1
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b17      	ldr	r3, [pc, #92]	@ (8003cc8 <_ZN12StripCurrent4CalcEv+0x84>)
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	4b15      	ldr	r3, [pc, #84]	@ (8003cc8 <_ZN12StripCurrent4CalcEv+0x84>)
 8003c72:	801a      	strh	r2, [r3, #0]
		for (int offset = 0; offset < STRIP_CURR_BUFFER_LEN; offset += ADC_CHANNELS) {
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	330b      	adds	r3, #11
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b6d      	cmp	r3, #109	@ 0x6d
 8003c7e:	ddeb      	ble.n	8003c58 <_ZN12StripCurrent4CalcEv+0x14>
		}
		averages[i] = sum / SAMPLE_SIZE;
 8003c80:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <_ZN12StripCurrent4CalcEv+0x84>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	4a11      	ldr	r2, [pc, #68]	@ (8003ccc <_ZN12StripCurrent4CalcEv+0x88>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	b299      	uxth	r1, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ADC_CHANNELS; ++i) {
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	ddd5      	ble.n	8003c52 <_ZN12StripCurrent4CalcEv+0xe>
//		averages[i] += *buffer + (i * 8);
//		uint8_t aver = buffer[i * SAMPLE_SIZE];
//		averages[i] += buffer[i * SAMPLE_SIZE];
	}
	this->temp = averages[TEMP_INDEX];
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	7a5a      	ldrb	r2, [r3, #9]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	74da      	strb	r2, [r3, #19]
	this->vref = averages[VREF_INDEX];
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	7a9a      	ldrb	r2, [r3, #10]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	749a      	strb	r2, [r3, #18]
//	this->CheckCurrents();
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20001050 	.word	0x20001050
 8003ccc:	cccccccd 	.word	0xcccccccd

08003cd0 <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8899      	ldrh	r1, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	799b      	ldrb	r3, [r3, #6]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e000      	b.n	8003cfc <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f005 f9b9 	bl	8009074 <HAL_GPIO_WritePin>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_ZN3Pin4ReadEv>:

GPIO_PinState Pin::Read()
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	889b      	ldrh	r3, [r3, #4]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f005 f991 	bl	8009044 <HAL_GPIO_ReadPin>
 8003d22:	4603      	mov	r3, r0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8899      	ldrh	r1, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	799b      	ldrb	r3, [r3, #6]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f005 f997 	bl	8009074 <HAL_GPIO_WritePin>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_IncTick>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d54:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <HAL_IncTick+0x2c>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <HAL_IncTick+0x30>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a07      	ldr	r2, [pc, #28]	@ (8003d80 <HAL_IncTick+0x30>)
 8003d62:	6013      	str	r3, [r2, #0]
  if (uwTick == 0)
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_IncTick+0x30>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_IncTick+0x22>
  {
	  prevTick = 0;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_IncTick+0x34>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
  }
}
 8003d72:	bf00      	nop
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	2000000c 	.word	0x2000000c
 8003d80:	200015bc 	.word	0x200015bc
 8003d84:	200015b0 	.word	0x200015b0

08003d88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
	currentTick = HAL_GetTick();
 8003d92:	f002 fc1f 	bl	80065d4 <HAL_GetTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a3d      	ldr	r2, [pc, #244]	@ (8003e90 <HAL_GPIO_EXTI_Callback+0x108>)
 8003d9a:	6013      	str	r3, [r2, #0]
	checkTick = prevTick + MENU_DEBOUNCE_WAIT < currentTick;
 8003d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e94 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	4b3b      	ldr	r3, [pc, #236]	@ (8003e90 <HAL_GPIO_EXTI_Callback+0x108>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf34      	ite	cc
 8003daa:	2301      	movcc	r3, #1
 8003dac:	2300      	movcs	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003db4:	701a      	strb	r2, [r3, #0]
	prevTick = currentTick;
 8003db6:	4b36      	ldr	r3, [pc, #216]	@ (8003e90 <HAL_GPIO_EXTI_Callback+0x108>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a36      	ldr	r2, [pc, #216]	@ (8003e94 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003dbc:	6013      	str	r3, [r2, #0]
	switch (GPIO_Pin) {
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	d03a      	beq.n	8003e3c <HAL_GPIO_EXTI_Callback+0xb4>
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dca:	dc52      	bgt.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
 8003dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd0:	d020      	beq.n	8003e14 <HAL_GPIO_EXTI_Callback+0x8c>
 8003dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd6:	dc4c      	bgt.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ddc:	d01d      	beq.n	8003e1a <HAL_GPIO_EXTI_Callback+0x92>
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de2:	dc46      	bgt.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de8:	d01a      	beq.n	8003e20 <HAL_GPIO_EXTI_Callback+0x98>
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dee:	dc40      	bgt.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
 8003df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003df4:	d037      	beq.n	8003e66 <HAL_GPIO_EXTI_Callback+0xde>
 8003df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dfa:	dc3a      	bgt.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e00:	d02a      	beq.n	8003e58 <HAL_GPIO_EXTI_Callback+0xd0>
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e06:	dc34      	bgt.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d010      	beq.n	8003e2e <HAL_GPIO_EXTI_Callback+0xa6>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e10:	d01b      	beq.n	8003e4a <HAL_GPIO_EXTI_Callback+0xc2>
			if (checkTick)
			{
				MenuBackInterruptCallback();
			}
		default:
			break;
 8003e12:	e02e      	b.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
			Enc1TurnInterruptCallback();
 8003e14:	f7fe f8fc 	bl	8002010 <Enc1TurnInterruptCallback>
			break;
 8003e18:	e036      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			Enc2TurnInterruptCallback();
 8003e1a:	f7fe f903 	bl	8002024 <Enc2TurnInterruptCallback>
			break;
 8003e1e:	e033      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			if (checkTick)
 8003e20:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d026      	beq.n	8003e76 <HAL_GPIO_EXTI_Callback+0xee>
				MenuUpInterruptCallback();
 8003e28:	f7fe f8ac 	bl	8001f84 <MenuUpInterruptCallback>
			break;
 8003e2c:	e023      	b.n	8003e76 <HAL_GPIO_EXTI_Callback+0xee>
			if (checkTick)
 8003e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d021      	beq.n	8003e7a <HAL_GPIO_EXTI_Callback+0xf2>
				MenuDownInterruptCallback();
 8003e36:	f7fe f8b1 	bl	8001f9c <MenuDownInterruptCallback>
			break;
 8003e3a:	e01e      	b.n	8003e7a <HAL_GPIO_EXTI_Callback+0xf2>
			if (checkTick)
 8003e3c:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01c      	beq.n	8003e7e <HAL_GPIO_EXTI_Callback+0xf6>
				MenuLeftInterruptCallback();
 8003e44:	f7fe f8b4 	bl	8001fb0 <MenuLeftInterruptCallback>
			break;
 8003e48:	e019      	b.n	8003e7e <HAL_GPIO_EXTI_Callback+0xf6>
			if (checkTick)
 8003e4a:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <HAL_GPIO_EXTI_Callback+0xfa>
				MenuRightInterruptCallback();
 8003e52:	f7fe f8b9 	bl	8001fc8 <MenuRightInterruptCallback>
			break;
 8003e56:	e014      	b.n	8003e82 <HAL_GPIO_EXTI_Callback+0xfa>
			if (checkTick)
 8003e58:	4b0f      	ldr	r3, [pc, #60]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d012      	beq.n	8003e86 <HAL_GPIO_EXTI_Callback+0xfe>
				MenuActInterruptCallback();
 8003e60:	f7fe f8bc 	bl	8001fdc <MenuActInterruptCallback>
			break;
 8003e64:	e00f      	b.n	8003e86 <HAL_GPIO_EXTI_Callback+0xfe>
			if (checkTick)
 8003e66:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <HAL_GPIO_EXTI_Callback+0x110>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_GPIO_EXTI_Callback+0xea>
				MenuBackInterruptCallback();
 8003e6e:	f7fe f8c5 	bl	8001ffc <MenuBackInterruptCallback>
			break;
 8003e72:	bf00      	nop
 8003e74:	e008      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003e76:	bf00      	nop
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003e7a:	bf00      	nop
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_EXTI_Callback+0x100>
			break;
 8003e86:	bf00      	nop
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000000 	.word	0x20000000
 8003e94:	200015b0 	.word	0x200015b0
 8003e98:	200015b4 	.word	0x200015b4

08003e9c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	AudioFullCallback();
 8003ea4:	f7fd fc66 	bl	8001774 <AudioFullCallback>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_I2S_RxCpltCallback>:
//{
//	AudioHalfFullCallback();
//}

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	AudioFullCallback();
 8003eb8:	f7fd fc5c 	bl	8001774 <AudioFullCallback>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	CurrentConvFullCallback();
 8003ecc:	f7fd fc58 	bl	8001780 <CurrentConvFullCallback>
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	@ 0x30
 8003edc:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ede:	f002 fb27 	bl	8006530 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ee2:	f000 f86d 	bl	8003fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ee6:	f000 fe17 	bl	8004b18 <MX_GPIO_Init>
  MX_DMA_Init();
 8003eea:	f000 fdd7 	bl	8004a9c <MX_DMA_Init>
  MX_ADC1_Init();
 8003eee:	f000 f8d3 	bl	8004098 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003ef2:	f000 fa03 	bl	80042fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8003ef6:	f000 fbf5 	bl	80046e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003efa:	f000 fd51 	bl	80049a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003efe:	f000 fd79 	bl	80049f4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8003f02:	f000 fc71 	bl	80047e8 <MX_TIM6_Init>
  MX_RTC_Init();
 8003f06:	f000 fa55 	bl	80043b4 <MX_RTC_Init>
  MX_SPI4_Init();
 8003f0a:	f000 fb05 	bl	8004518 <MX_SPI4_Init>
  MX_FMPI2C1_Init();
 8003f0e:	f000 f9b9 	bl	8004284 <MX_FMPI2C1_Init>
  MX_USART3_UART_Init();
 8003f12:	f000 fd99 	bl	8004a48 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8003f16:	f000 fb35 	bl	8004584 <MX_TIM1_Init>
  MX_I2S5_Init();
 8003f1a:	f000 fa1d 	bl	8004358 <MX_I2S5_Init>
  MX_SDIO_SD_Init();
 8003f1e:	f000 fadb 	bl	80044d8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003f22:	f00b f951 	bl	800f1c8 <MX_FATFS_Init>
  MX_TIM8_Init();
 8003f26:	f000 fc9d 	bl	8004864 <MX_TIM8_Init>
  MX_CRC_Init();
 8003f2a:	f000 f997 	bl	800425c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */


//  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_RESET);
  if (Init(
 8003f2e:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <main+0xa8>)
 8003f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <main+0xac>)
 8003f34:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f36:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <main+0xb0>)
 8003f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f3a:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <main+0xb4>)
 8003f3c:	9308      	str	r3, [sp, #32]
 8003f3e:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <main+0xb8>)
 8003f40:	9307      	str	r3, [sp, #28]
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <main+0xbc>)
 8003f44:	9306      	str	r3, [sp, #24]
 8003f46:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <main+0xc0>)
 8003f48:	9305      	str	r3, [sp, #20]
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <main+0xc4>)
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <main+0xc8>)
 8003f50:	9303      	str	r3, [sp, #12]
 8003f52:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <main+0xcc>)
 8003f54:	9302      	str	r3, [sp, #8]
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <main+0xd0>)
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <main+0xd4>)
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <main+0xd8>)
 8003f60:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <main+0xdc>)
 8003f62:	4915      	ldr	r1, [pc, #84]	@ (8003fb8 <main+0xe0>)
 8003f64:	4815      	ldr	r0, [pc, #84]	@ (8003fbc <main+0xe4>)
 8003f66:	f7fd fd19 	bl	800199c <Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <main+0x9c>

		  &hrtc,
		  &hsd
  ) != HAL_OK)
  {
	  Error_Handler();
 8003f70:	f000 ff1a 	bl	8004da8 <Error_Handler>
  }

  // For Init tests
  InitTest();
 8003f74:	f7fd ff58 	bl	8001e28 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8003f78:	f7fd ff5e 	bl	8001e38 <Main>
 8003f7c:	e7fc      	b.n	8003f78 <main+0xa0>
 8003f7e:	bf00      	nop
 8003f80:	200012e8 	.word	0x200012e8
 8003f84:	200012c8 	.word	0x200012c8
 8003f88:	2000156c 	.word	0x2000156c
 8003f8c:	20001528 	.word	0x20001528
 8003f90:	200014e4 	.word	0x200014e4
 8003f94:	2000149c 	.word	0x2000149c
 8003f98:	2000140c 	.word	0x2000140c
 8003f9c:	200013c4 	.word	0x200013c4
 8003fa0:	2000136c 	.word	0x2000136c
 8003fa4:	20001268 	.word	0x20001268
 8003fa8:	20001220 	.word	0x20001220
 8003fac:	200011cc 	.word	0x200011cc
 8003fb0:	2000116c 	.word	0x2000116c
 8003fb4:	20001120 	.word	0x20001120
 8003fb8:	200010b8 	.word	0x200010b8
 8003fbc:	20001054 	.word	0x20001054

08003fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b094      	sub	sp, #80	@ 0x50
 8003fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	2234      	movs	r2, #52	@ 0x34
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f00d fb8c 	bl	80116ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <SystemClock_Config+0xd0>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	4a28      	ldr	r2, [pc, #160]	@ (8004090 <SystemClock_Config+0xd0>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ff4:	4b26      	ldr	r3, [pc, #152]	@ (8004090 <SystemClock_Config+0xd0>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004000:	2300      	movs	r3, #0
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4b23      	ldr	r3, [pc, #140]	@ (8004094 <SystemClock_Config+0xd4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a22      	ldr	r2, [pc, #136]	@ (8004094 <SystemClock_Config+0xd4>)
 800400a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b20      	ldr	r3, [pc, #128]	@ (8004094 <SystemClock_Config+0xd4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800401c:	2305      	movs	r3, #5
 800401e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004024:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004026:	2301      	movs	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800402a:	2302      	movs	r3, #2
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800402e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004034:	2308      	movs	r3, #8
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004038:	2350      	movs	r3, #80	@ 0x50
 800403a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800403c:	2302      	movs	r3, #2
 800403e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004040:	2304      	movs	r3, #4
 8004042:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004044:	2302      	movs	r3, #2
 8004046:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004048:	f107 031c 	add.w	r3, r7, #28
 800404c:	4618      	mov	r0, r3
 800404e:	f006 fb83 	bl	800a758 <HAL_RCC_OscConfig>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004058:	f000 fea6 	bl	8004da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800405c:	230f      	movs	r3, #15
 800405e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004060:	2302      	movs	r3, #2
 8004062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800406c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	2102      	movs	r1, #2
 8004078:	4618      	mov	r0, r3
 800407a:	f005 fe1f 	bl	8009cbc <HAL_RCC_ClockConfig>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004084:	f000 fe90 	bl	8004da8 <Error_Handler>
  }
}
 8004088:	bf00      	nop
 800408a:	3750      	adds	r7, #80	@ 0x50
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000

08004098 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800409e:	463b      	mov	r3, r7
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80040aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004258 <MX_ADC1_Init+0x1c0>)
 80040ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040b0:	4b68      	ldr	r3, [pc, #416]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80040b8:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80040c0:	4b64      	ldr	r3, [pc, #400]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040c6:	4b63      	ldr	r3, [pc, #396]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040cc:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80040d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80040dc:	4b5d      	ldr	r3, [pc, #372]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040de:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80040e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80040ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040ec:	220b      	movs	r2, #11
 80040ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040f0:	4b58      	ldr	r3, [pc, #352]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80040f8:	4b56      	ldr	r3, [pc, #344]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040fe:	4855      	ldr	r0, [pc, #340]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 8004100:	f002 fa98 	bl	8006634 <HAL_ADC_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800410a:	f000 fe4d 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800410e:	2304      	movs	r3, #4
 8004110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800411a:	463b      	mov	r3, r7
 800411c:	4619      	mov	r1, r3
 800411e:	484d      	ldr	r0, [pc, #308]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 8004120:	f002 fd10 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800412a:	f000 fe3d 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800412e:	2305      	movs	r3, #5
 8004130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004132:	2302      	movs	r3, #2
 8004134:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004136:	463b      	mov	r3, r7
 8004138:	4619      	mov	r1, r3
 800413a:	4846      	ldr	r0, [pc, #280]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 800413c:	f002 fd02 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004146:	f000 fe2f 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800414a:	2306      	movs	r3, #6
 800414c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800414e:	2303      	movs	r3, #3
 8004150:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004152:	463b      	mov	r3, r7
 8004154:	4619      	mov	r1, r3
 8004156:	483f      	ldr	r0, [pc, #252]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 8004158:	f002 fcf4 	bl	8006b44 <HAL_ADC_ConfigChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8004162:	f000 fe21 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004166:	2307      	movs	r3, #7
 8004168:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800416a:	2304      	movs	r3, #4
 800416c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800416e:	463b      	mov	r3, r7
 8004170:	4619      	mov	r1, r3
 8004172:	4838      	ldr	r0, [pc, #224]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 8004174:	f002 fce6 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800417e:	f000 fe13 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004182:	2308      	movs	r3, #8
 8004184:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004186:	2305      	movs	r3, #5
 8004188:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800418a:	463b      	mov	r3, r7
 800418c:	4619      	mov	r1, r3
 800418e:	4831      	ldr	r0, [pc, #196]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 8004190:	f002 fcd8 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800419a:	f000 fe05 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800419e:	2309      	movs	r3, #9
 80041a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80041a2:	2306      	movs	r3, #6
 80041a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041a6:	463b      	mov	r3, r7
 80041a8:	4619      	mov	r1, r3
 80041aa:	482a      	ldr	r0, [pc, #168]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80041ac:	f002 fcca 	bl	8006b44 <HAL_ADC_ConfigChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80041b6:	f000 fdf7 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80041ba:	230e      	movs	r3, #14
 80041bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80041be:	2307      	movs	r3, #7
 80041c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041c2:	463b      	mov	r3, r7
 80041c4:	4619      	mov	r1, r3
 80041c6:	4823      	ldr	r0, [pc, #140]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80041c8:	f002 fcbc 	bl	8006b44 <HAL_ADC_ConfigChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80041d2:	f000 fde9 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80041d6:	230f      	movs	r3, #15
 80041d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80041da:	2308      	movs	r3, #8
 80041dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041de:	463b      	mov	r3, r7
 80041e0:	4619      	mov	r1, r3
 80041e2:	481c      	ldr	r0, [pc, #112]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 80041e4:	f002 fcae 	bl	8006b44 <HAL_ADC_ConfigChannel>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 80041ee:	f000 fddb 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80041f6:	2309      	movs	r3, #9
 80041f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041fa:	463b      	mov	r3, r7
 80041fc:	4619      	mov	r1, r3
 80041fe:	4815      	ldr	r0, [pc, #84]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 8004200:	f002 fca0 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 800420a:	f000 fdcd 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800420e:	2310      	movs	r3, #16
 8004210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004212:	230a      	movs	r3, #10
 8004214:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004216:	463b      	mov	r3, r7
 8004218:	4619      	mov	r1, r3
 800421a:	480e      	ldr	r0, [pc, #56]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 800421c:	f002 fc92 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8004226:	f000 fdbf 	bl	8004da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800422a:	2311      	movs	r3, #17
 800422c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800422e:	230b      	movs	r3, #11
 8004230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004232:	2301      	movs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004236:	463b      	mov	r3, r7
 8004238:	4619      	mov	r1, r3
 800423a:	4806      	ldr	r0, [pc, #24]	@ (8004254 <MX_ADC1_Init+0x1bc>)
 800423c:	f002 fc82 	bl	8006b44 <HAL_ADC_ConfigChannel>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8004246:	f000 fdaf 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20001054 	.word	0x20001054
 8004258:	40012000 	.word	0x40012000

0800425c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004260:	4b06      	ldr	r3, [pc, #24]	@ (800427c <MX_CRC_Init+0x20>)
 8004262:	4a07      	ldr	r2, [pc, #28]	@ (8004280 <MX_CRC_Init+0x24>)
 8004264:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004266:	4805      	ldr	r0, [pc, #20]	@ (800427c <MX_CRC_Init+0x20>)
 8004268:	f003 f82b 	bl	80072c2 <HAL_CRC_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004272:	f000 fd99 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20001118 	.word	0x20001118
 8004280:	40023000 	.word	0x40023000

08004284 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8004288:	4b19      	ldr	r3, [pc, #100]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 800428a:	4a1a      	ldr	r2, [pc, #104]	@ (80042f4 <MX_FMPI2C1_Init+0x70>)
 800428c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00100618;
 800428e:	4b18      	ldr	r3, [pc, #96]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 8004290:	4a19      	ldr	r2, [pc, #100]	@ (80042f8 <MX_FMPI2C1_Init+0x74>)
 8004292:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8004294:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800429a:	4b15      	ldr	r3, [pc, #84]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 800429c:	2201      	movs	r2, #1
 800429e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80042a0:	4b13      	ldr	r3, [pc, #76]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80042a6:	4b12      	ldr	r3, [pc, #72]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80042ac:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80042b2:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80042b8:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80042be:	480c      	ldr	r0, [pc, #48]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042c0:	f003 fc2c 	bl	8007b1c <HAL_FMPI2C_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80042ca:	f000 fd6d 	bl	8004da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042ce:	2100      	movs	r1, #0
 80042d0:	4807      	ldr	r0, [pc, #28]	@ (80042f0 <MX_FMPI2C1_Init+0x6c>)
 80042d2:	f004 fcc5 	bl	8008c60 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80042dc:	f000 fd64 	bl	8004da8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SCL);
 80042e0:	2001      	movs	r0, #1
 80042e2:	f004 fd09 	bl	8008cf8 <HAL_FMPI2CEx_EnableFastModePlus>
  HAL_FMPI2CEx_EnableFastModePlus(FMPI2C_FASTMODEPLUS_SDA);
 80042e6:	2002      	movs	r0, #2
 80042e8:	f004 fd06 	bl	8008cf8 <HAL_FMPI2CEx_EnableFastModePlus>
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20001120 	.word	0x20001120
 80042f4:	40006000 	.word	0x40006000
 80042f8:	00100618 	.word	0x00100618

080042fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004300:	4b12      	ldr	r3, [pc, #72]	@ (800434c <MX_I2C1_Init+0x50>)
 8004302:	4a13      	ldr	r2, [pc, #76]	@ (8004350 <MX_I2C1_Init+0x54>)
 8004304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004306:	4b11      	ldr	r3, [pc, #68]	@ (800434c <MX_I2C1_Init+0x50>)
 8004308:	4a12      	ldr	r2, [pc, #72]	@ (8004354 <MX_I2C1_Init+0x58>)
 800430a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <MX_I2C1_Init+0x50>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004312:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <MX_I2C1_Init+0x50>)
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004318:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <MX_I2C1_Init+0x50>)
 800431a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800431e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <MX_I2C1_Init+0x50>)
 8004322:	2200      	movs	r2, #0
 8004324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004326:	4b09      	ldr	r3, [pc, #36]	@ (800434c <MX_I2C1_Init+0x50>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800432c:	4b07      	ldr	r3, [pc, #28]	@ (800434c <MX_I2C1_Init+0x50>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <MX_I2C1_Init+0x50>)
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004338:	4804      	ldr	r0, [pc, #16]	@ (800434c <MX_I2C1_Init+0x50>)
 800433a:	f004 fecd 	bl	80090d8 <HAL_I2C_Init>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004344:	f000 fd30 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004348:	bf00      	nop
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200011cc 	.word	0x200011cc
 8004350:	40005400 	.word	0x40005400
 8004354:	000186a0 	.word	0x000186a0

08004358 <MX_I2S5_Init>:
  * @brief I2S5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S5_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S5_Init 0 */

  /* USER CODE BEGIN I2S5_Init 1 */

  /* USER CODE END I2S5_Init 1 */
  hi2s5.Instance = SPI5;
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <MX_I2S5_Init+0x54>)
 800435e:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <MX_I2S5_Init+0x58>)
 8004360:	601a      	str	r2, [r3, #0]
  hi2s5.Init.Mode = I2S_MODE_MASTER_RX;
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <MX_I2S5_Init+0x54>)
 8004364:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004368:	605a      	str	r2, [r3, #4]
  hi2s5.Init.Standard = I2S_STANDARD_MSB;
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <MX_I2S5_Init+0x54>)
 800436c:	2210      	movs	r2, #16
 800436e:	609a      	str	r2, [r3, #8]
  hi2s5.Init.DataFormat = I2S_DATAFORMAT_32B;
 8004370:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <MX_I2S5_Init+0x54>)
 8004372:	2205      	movs	r2, #5
 8004374:	60da      	str	r2, [r3, #12]
  hi2s5.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <MX_I2S5_Init+0x54>)
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
  hi2s5.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <MX_I2S5_Init+0x54>)
 800437e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004382:	615a      	str	r2, [r3, #20]
  hi2s5.Init.CPOL = I2S_CPOL_LOW;
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <MX_I2S5_Init+0x54>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]
  hi2s5.Init.ClockSource = I2S_CLOCK_PLL;
 800438a:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <MX_I2S5_Init+0x54>)
 800438c:	2200      	movs	r2, #0
 800438e:	61da      	str	r2, [r3, #28]
  hi2s5.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <MX_I2S5_Init+0x54>)
 8004392:	2200      	movs	r2, #0
 8004394:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s5) != HAL_OK)
 8004396:	4805      	ldr	r0, [pc, #20]	@ (80043ac <MX_I2S5_Init+0x54>)
 8004398:	f004 ffe2 	bl	8009360 <HAL_I2S_Init>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_I2S5_Init+0x4e>
  {
    Error_Handler();
 80043a2:	f000 fd01 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S5_Init 2 */

  /* USER CODE END I2S5_Init 2 */

}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20001220 	.word	0x20001220
 80043b0:	40015000 	.word	0x40015000

080043b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b090      	sub	sp, #64	@ 0x40
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80043ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80043ce:	463b      	mov	r3, r7
 80043d0:	2228      	movs	r2, #40	@ 0x28
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f00d f989 	bl	80116ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80043da:	4b3d      	ldr	r3, [pc, #244]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80043dc:	4a3d      	ldr	r2, [pc, #244]	@ (80044d4 <MX_RTC_Init+0x120>)
 80043de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80043e0:	4b3b      	ldr	r3, [pc, #236]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80043e2:	2240      	movs	r2, #64	@ 0x40
 80043e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80043e6:	4b3a      	ldr	r3, [pc, #232]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80043e8:	227f      	movs	r2, #127	@ 0x7f
 80043ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80043ec:	4b38      	ldr	r3, [pc, #224]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80043ee:	22ff      	movs	r2, #255	@ 0xff
 80043f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043f2:	4b37      	ldr	r3, [pc, #220]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80043f8:	4b35      	ldr	r3, [pc, #212]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80043fe:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <MX_RTC_Init+0x11c>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004404:	4832      	ldr	r0, [pc, #200]	@ (80044d0 <MX_RTC_Init+0x11c>)
 8004406:	f006 fc2b 	bl	800ac60 <HAL_RTC_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004410:	f000 fcca 	bl	8004da8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8004420:	2300      	movs	r3, #0
 8004422:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800442c:	2300      	movs	r3, #0
 800442e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004430:	2300      	movs	r3, #0
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004434:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004438:	2201      	movs	r2, #1
 800443a:	4619      	mov	r1, r3
 800443c:	4824      	ldr	r0, [pc, #144]	@ (80044d0 <MX_RTC_Init+0x11c>)
 800443e:	f006 fc85 	bl	800ad4c <HAL_RTC_SetTime>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8004448:	f000 fcae 	bl	8004da8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004468:	2201      	movs	r2, #1
 800446a:	4619      	mov	r1, r3
 800446c:	4818      	ldr	r0, [pc, #96]	@ (80044d0 <MX_RTC_Init+0x11c>)
 800446e:	f006 fd07 	bl	800ae80 <HAL_RTC_SetDate>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8004478:	f000 fc96 	bl	8004da8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 800447c:	2301      	movs	r3, #1
 800447e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8004480:	2301      	movs	r3, #1
 8004482:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8004484:	2300      	movs	r3, #0
 8004486:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004488:	2300      	movs	r3, #0
 800448a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800448c:	2300      	movs	r3, #0
 800448e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004494:	2300      	movs	r3, #0
 8004496:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80044aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80044b0:	463b      	mov	r3, r7
 80044b2:	2201      	movs	r2, #1
 80044b4:	4619      	mov	r1, r3
 80044b6:	4806      	ldr	r0, [pc, #24]	@ (80044d0 <MX_RTC_Init+0x11c>)
 80044b8:	f006 fd66 	bl	800af88 <HAL_RTC_SetAlarm_IT>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80044c2:	f000 fc71 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80044c6:	bf00      	nop
 80044c8:	3740      	adds	r7, #64	@ 0x40
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200012c8 	.word	0x200012c8
 80044d4:	40002800 	.word	0x40002800

080044d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 80044de:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <MX_SDIO_SD_Init+0x3c>)
 80044e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80044e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80044e8:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80044ee:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80044f4:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004500:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <MX_SDIO_SD_Init+0x38>)
 8004502:	2200      	movs	r2, #0
 8004504:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	200012e8 	.word	0x200012e8
 8004514:	40012c00 	.word	0x40012c00

08004518 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800451c:	4b17      	ldr	r3, [pc, #92]	@ (800457c <MX_SPI4_Init+0x64>)
 800451e:	4a18      	ldr	r2, [pc, #96]	@ (8004580 <MX_SPI4_Init+0x68>)
 8004520:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004522:	4b16      	ldr	r3, [pc, #88]	@ (800457c <MX_SPI4_Init+0x64>)
 8004524:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004528:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <MX_SPI4_Init+0x64>)
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004530:	4b12      	ldr	r3, [pc, #72]	@ (800457c <MX_SPI4_Init+0x64>)
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004536:	4b11      	ldr	r3, [pc, #68]	@ (800457c <MX_SPI4_Init+0x64>)
 8004538:	2200      	movs	r2, #0
 800453a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800453c:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <MX_SPI4_Init+0x64>)
 800453e:	2200      	movs	r2, #0
 8004540:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004542:	4b0e      	ldr	r3, [pc, #56]	@ (800457c <MX_SPI4_Init+0x64>)
 8004544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004548:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <MX_SPI4_Init+0x64>)
 800454c:	2200      	movs	r2, #0
 800454e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004550:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <MX_SPI4_Init+0x64>)
 8004552:	2200      	movs	r2, #0
 8004554:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <MX_SPI4_Init+0x64>)
 8004558:	2200      	movs	r2, #0
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <MX_SPI4_Init+0x64>)
 800455e:	2200      	movs	r2, #0
 8004560:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <MX_SPI4_Init+0x64>)
 8004564:	220a      	movs	r2, #10
 8004566:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004568:	4804      	ldr	r0, [pc, #16]	@ (800457c <MX_SPI4_Init+0x64>)
 800456a:	f007 fed3 	bl	800c314 <HAL_SPI_Init>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004574:	f000 fc18 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004578:	bf00      	nop
 800457a:	bd80      	pop	{r7, pc}
 800457c:	2000136c 	.word	0x2000136c
 8004580:	40013400 	.word	0x40013400

08004584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b096      	sub	sp, #88	@ 0x58
 8004588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800458a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004598:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	611a      	str	r2, [r3, #16]
 80045b2:	615a      	str	r2, [r3, #20]
 80045b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	2220      	movs	r2, #32
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f00d f895 	bl	80116ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045c2:	4b46      	ldr	r3, [pc, #280]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045c4:	4a46      	ldr	r2, [pc, #280]	@ (80046e0 <MX_TIM1_Init+0x15c>)
 80045c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045c8:	4b44      	ldr	r3, [pc, #272]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ce:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80045d4:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045dc:	4b3f      	ldr	r3, [pc, #252]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045de:	2200      	movs	r2, #0
 80045e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045e2:	4b3e      	ldr	r3, [pc, #248]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045e8:	4b3c      	ldr	r3, [pc, #240]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045ea:	2280      	movs	r2, #128	@ 0x80
 80045ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045ee:	483b      	ldr	r0, [pc, #236]	@ (80046dc <MX_TIM1_Init+0x158>)
 80045f0:	f007 ff19 	bl	800c426 <HAL_TIM_Base_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80045fa:	f000 fbd5 	bl	8004da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004602:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004604:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004608:	4619      	mov	r1, r3
 800460a:	4834      	ldr	r0, [pc, #208]	@ (80046dc <MX_TIM1_Init+0x158>)
 800460c:	f008 fb08 	bl	800cc20 <HAL_TIM_ConfigClockSource>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004616:	f000 fbc7 	bl	8004da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800461a:	4830      	ldr	r0, [pc, #192]	@ (80046dc <MX_TIM1_Init+0x158>)
 800461c:	f007 ffba 	bl	800c594 <HAL_TIM_PWM_Init>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004626:	f000 fbbf 	bl	8004da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004632:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004636:	4619      	mov	r1, r3
 8004638:	4828      	ldr	r0, [pc, #160]	@ (80046dc <MX_TIM1_Init+0x158>)
 800463a:	f008 fefb 	bl	800d434 <HAL_TIMEx_MasterConfigSynchronization>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004644:	f000 fbb0 	bl	8004da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004648:	2360      	movs	r3, #96	@ 0x60
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004650:	2300      	movs	r3, #0
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004654:	2300      	movs	r3, #0
 8004656:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800465c:	2300      	movs	r3, #0
 800465e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004660:	2300      	movs	r3, #0
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004668:	2200      	movs	r2, #0
 800466a:	4619      	mov	r1, r3
 800466c:	481b      	ldr	r0, [pc, #108]	@ (80046dc <MX_TIM1_Init+0x158>)
 800466e:	f008 fa15 	bl	800ca9c <HAL_TIM_PWM_ConfigChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004678:	f000 fb96 	bl	8004da8 <Error_Handler>
  }
  sConfigOC.Pulse = 32000;
 800467c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004686:	2208      	movs	r2, #8
 8004688:	4619      	mov	r1, r3
 800468a:	4814      	ldr	r0, [pc, #80]	@ (80046dc <MX_TIM1_Init+0x158>)
 800468c:	f008 fa06 	bl	800ca9c <HAL_TIM_PWM_ConfigChannel>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004696:	f000 fb87 	bl	8004da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	4807      	ldr	r0, [pc, #28]	@ (80046dc <MX_TIM1_Init+0x158>)
 80046be:	f008 ff35 	bl	800d52c <HAL_TIMEx_ConfigBreakDeadTime>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80046c8:	f000 fb6e 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80046cc:	4803      	ldr	r0, [pc, #12]	@ (80046dc <MX_TIM1_Init+0x158>)
 80046ce:	f000 ffb1 	bl	8005634 <HAL_TIM_MspPostInit>

}
 80046d2:	bf00      	nop
 80046d4:	3758      	adds	r7, #88	@ 0x58
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200013c4 	.word	0x200013c4
 80046e0:	40010000 	.word	0x40010000

080046e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	@ 0x38
 80046e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046f8:	f107 0320 	add.w	r3, r7, #32
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]
 8004710:	615a      	str	r2, [r3, #20]
 8004712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004714:	4b32      	ldr	r3, [pc, #200]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004716:	4a33      	ldr	r2, [pc, #204]	@ (80047e4 <MX_TIM3_Init+0x100>)
 8004718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800471a:	4b31      	ldr	r3, [pc, #196]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004720:	4b2f      	ldr	r3, [pc, #188]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004726:	4b2e      	ldr	r3, [pc, #184]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800472c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800472e:	4b2c      	ldr	r3, [pc, #176]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004734:	4b2a      	ldr	r3, [pc, #168]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004736:	2280      	movs	r2, #128	@ 0x80
 8004738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800473a:	4829      	ldr	r0, [pc, #164]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 800473c:	f007 fe73 	bl	800c426 <HAL_TIM_Base_Init>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004746:	f000 fb2f 	bl	8004da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800474a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004750:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004754:	4619      	mov	r1, r3
 8004756:	4822      	ldr	r0, [pc, #136]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004758:	f008 fa62 	bl	800cc20 <HAL_TIM_ConfigClockSource>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004762:	f000 fb21 	bl	8004da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004766:	481e      	ldr	r0, [pc, #120]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004768:	f007 ff14 	bl	800c594 <HAL_TIM_PWM_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004772:	f000 fb19 	bl	8004da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800477e:	f107 0320 	add.w	r3, r7, #32
 8004782:	4619      	mov	r1, r3
 8004784:	4816      	ldr	r0, [pc, #88]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 8004786:	f008 fe55 	bl	800d434 <HAL_TIMEx_MasterConfigSynchronization>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004790:	f000 fb0a 	bl	8004da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004794:	2360      	movs	r3, #96	@ 0x60
 8004796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	2200      	movs	r2, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	480d      	ldr	r0, [pc, #52]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 80047ac:	f008 f976 	bl	800ca9c <HAL_TIM_PWM_ConfigChannel>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80047b6:	f000 faf7 	bl	8004da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	220c      	movs	r2, #12
 80047be:	4619      	mov	r1, r3
 80047c0:	4807      	ldr	r0, [pc, #28]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 80047c2:	f008 f96b 	bl	800ca9c <HAL_TIM_PWM_ConfigChannel>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80047cc:	f000 faec 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80047d0:	4803      	ldr	r0, [pc, #12]	@ (80047e0 <MX_TIM3_Init+0xfc>)
 80047d2:	f000 ff2f 	bl	8005634 <HAL_TIM_MspPostInit>

}
 80047d6:	bf00      	nop
 80047d8:	3738      	adds	r7, #56	@ 0x38
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000140c 	.word	0x2000140c
 80047e4:	40000400 	.word	0x40000400

080047e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ee:	463b      	mov	r3, r7
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80047f6:	4b19      	ldr	r3, [pc, #100]	@ (800485c <MX_TIM6_Init+0x74>)
 80047f8:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <MX_TIM6_Init+0x78>)
 80047fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80047fc:	4b17      	ldr	r3, [pc, #92]	@ (800485c <MX_TIM6_Init+0x74>)
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004802:	4b16      	ldr	r3, [pc, #88]	@ (800485c <MX_TIM6_Init+0x74>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 8004808:	4b14      	ldr	r3, [pc, #80]	@ (800485c <MX_TIM6_Init+0x74>)
 800480a:	22ff      	movs	r2, #255	@ 0xff
 800480c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800480e:	4b13      	ldr	r3, [pc, #76]	@ (800485c <MX_TIM6_Init+0x74>)
 8004810:	2280      	movs	r2, #128	@ 0x80
 8004812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004814:	4811      	ldr	r0, [pc, #68]	@ (800485c <MX_TIM6_Init+0x74>)
 8004816:	f007 fe06 	bl	800c426 <HAL_TIM_Base_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004820:	f000 fac2 	bl	8004da8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8004824:	2108      	movs	r1, #8
 8004826:	480d      	ldr	r0, [pc, #52]	@ (800485c <MX_TIM6_Init+0x74>)
 8004828:	f007 ffd6 	bl	800c7d8 <HAL_TIM_OnePulse_Init>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 8004832:	f000 fab9 	bl	8004da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004836:	2320      	movs	r3, #32
 8004838:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800483e:	463b      	mov	r3, r7
 8004840:	4619      	mov	r1, r3
 8004842:	4806      	ldr	r0, [pc, #24]	@ (800485c <MX_TIM6_Init+0x74>)
 8004844:	f008 fdf6 	bl	800d434 <HAL_TIMEx_MasterConfigSynchronization>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 800484e:	f000 faab 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20001454 	.word	0x20001454
 8004860:	40001000 	.word	0x40001000

08004864 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b096      	sub	sp, #88	@ 0x58
 8004868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800486a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	609a      	str	r2, [r3, #8]
 8004876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004878:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	609a      	str	r2, [r3, #8]
 800488e:	60da      	str	r2, [r3, #12]
 8004890:	611a      	str	r2, [r3, #16]
 8004892:	615a      	str	r2, [r3, #20]
 8004894:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	2220      	movs	r2, #32
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f00c ff25 	bl	80116ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80048a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048a4:	4a3d      	ldr	r2, [pc, #244]	@ (800499c <MX_TIM8_Init+0x138>)
 80048a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5000-1;
 80048a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048aa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80048ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048b0:	4b39      	ldr	r3, [pc, #228]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 80048b6:	4b38      	ldr	r3, [pc, #224]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048b8:	22f9      	movs	r2, #249	@ 0xf9
 80048ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048bc:	4b36      	ldr	r3, [pc, #216]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80048c2:	4b35      	ldr	r3, [pc, #212]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048c8:	4b33      	ldr	r3, [pc, #204]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048ca:	2280      	movs	r2, #128	@ 0x80
 80048cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80048ce:	4832      	ldr	r0, [pc, #200]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048d0:	f007 fda9 	bl	800c426 <HAL_TIM_Base_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80048da:	f000 fa65 	bl	8004da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80048e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80048e8:	4619      	mov	r1, r3
 80048ea:	482b      	ldr	r0, [pc, #172]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048ec:	f008 f998 	bl	800cc20 <HAL_TIM_ConfigClockSource>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80048f6:	f000 fa57 	bl	8004da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80048fa:	4827      	ldr	r0, [pc, #156]	@ (8004998 <MX_TIM8_Init+0x134>)
 80048fc:	f007 fe4a 	bl	800c594 <HAL_TIM_PWM_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004906:	f000 fa4f 	bl	8004da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800490a:	2320      	movs	r3, #32
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800490e:	2300      	movs	r3, #0
 8004910:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004912:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004916:	4619      	mov	r1, r3
 8004918:	481f      	ldr	r0, [pc, #124]	@ (8004998 <MX_TIM8_Init+0x134>)
 800491a:	f008 fd8b 	bl	800d434 <HAL_TIMEx_MasterConfigSynchronization>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004924:	f000 fa40 	bl	8004da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004928:	2360      	movs	r3, #96	@ 0x60
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004934:	2300      	movs	r3, #0
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004938:	2300      	movs	r3, #0
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800493c:	2300      	movs	r3, #0
 800493e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004948:	2200      	movs	r2, #0
 800494a:	4619      	mov	r1, r3
 800494c:	4812      	ldr	r0, [pc, #72]	@ (8004998 <MX_TIM8_Init+0x134>)
 800494e:	f008 f8a5 	bl	800ca9c <HAL_TIM_PWM_ConfigChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004958:	f000 fa26 	bl	8004da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004974:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4806      	ldr	r0, [pc, #24]	@ (8004998 <MX_TIM8_Init+0x134>)
 8004980:	f008 fdd4 	bl	800d52c <HAL_TIMEx_ConfigBreakDeadTime>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800498a:	f000 fa0d 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800498e:	bf00      	nop
 8004990:	3758      	adds	r7, #88	@ 0x58
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	2000149c 	.word	0x2000149c
 800499c:	40010400 	.word	0x40010400

080049a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049a4:	4b11      	ldr	r3, [pc, #68]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049a6:	4a12      	ldr	r2, [pc, #72]	@ (80049f0 <MX_USART1_UART_Init+0x50>)
 80049a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80049aa:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80049b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049b2:	4b0e      	ldr	r3, [pc, #56]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049b8:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049be:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049c4:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049c6:	220c      	movs	r2, #12
 80049c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ca:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049d6:	4805      	ldr	r0, [pc, #20]	@ (80049ec <MX_USART1_UART_Init+0x4c>)
 80049d8:	f008 fe0e 	bl	800d5f8 <HAL_UART_Init>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049e2:	f000 f9e1 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200014e4 	.word	0x200014e4
 80049f0:	40011000 	.word	0x40011000

080049f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80049f8:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 80049fa:	4a12      	ldr	r2, [pc, #72]	@ (8004a44 <MX_USART2_UART_Init+0x50>)
 80049fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a06:	4b0e      	ldr	r3, [pc, #56]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a12:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a1a:	220c      	movs	r2, #12
 8004a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a1e:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a24:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a2a:	4805      	ldr	r0, [pc, #20]	@ (8004a40 <MX_USART2_UART_Init+0x4c>)
 8004a2c:	f008 fde4 	bl	800d5f8 <HAL_UART_Init>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a36:	f000 f9b7 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20001528 	.word	0x20001528
 8004a44:	40004400 	.word	0x40004400

08004a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a4e:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <MX_USART3_UART_Init+0x50>)
 8004a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a60:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a66:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a6c:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a6e:	220c      	movs	r2, #12
 8004a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a72:	4b08      	ldr	r3, [pc, #32]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a7e:	4805      	ldr	r0, [pc, #20]	@ (8004a94 <MX_USART3_UART_Init+0x4c>)
 8004a80:	f008 fdba 	bl	800d5f8 <HAL_UART_Init>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a8a:	f000 f98d 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	2000156c 	.word	0x2000156c
 8004a98:	40004800 	.word	0x40004800

08004a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <MX_DMA_Init+0x78>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8004b14 <MX_DMA_Init+0x78>)
 8004aac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <MX_DMA_Init+0x78>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4b14      	ldr	r3, [pc, #80]	@ (8004b14 <MX_DMA_Init+0x78>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <MX_DMA_Init+0x78>)
 8004ac8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ace:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <MX_DMA_Init+0x78>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	200c      	movs	r0, #12
 8004ae0:	f002 fbb9 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004ae4:	200c      	movs	r0, #12
 8004ae6:	f002 fbd2 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2038      	movs	r0, #56	@ 0x38
 8004af0:	f002 fbb1 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004af4:	2038      	movs	r0, #56	@ 0x38
 8004af6:	f002 fbca 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2100      	movs	r1, #0
 8004afe:	203b      	movs	r0, #59	@ 0x3b
 8004b00:	f002 fba9 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004b04:	203b      	movs	r0, #59	@ 0x3b
 8004b06:	f002 fbc2 	bl	800728e <HAL_NVIC_EnableIRQ>

}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800

08004b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	@ 0x30
 8004b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b1e:	f107 031c 	add.w	r3, r7, #28
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	609a      	str	r2, [r3, #8]
 8004b2a:	60da      	str	r2, [r3, #12]
 8004b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	4b98      	ldr	r3, [pc, #608]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	4a97      	ldr	r2, [pc, #604]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b38:	f043 0310 	orr.w	r3, r3, #16
 8004b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3e:	4b95      	ldr	r3, [pc, #596]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	4b91      	ldr	r3, [pc, #580]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	4a90      	ldr	r2, [pc, #576]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b5a:	4b8e      	ldr	r3, [pc, #568]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	4a89      	ldr	r2, [pc, #548]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b76:	4b87      	ldr	r3, [pc, #540]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	4b83      	ldr	r3, [pc, #524]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	4a82      	ldr	r2, [pc, #520]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b92:	4b80      	ldr	r3, [pc, #512]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	4b7c      	ldr	r3, [pc, #496]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	4a7b      	ldr	r2, [pc, #492]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bae:	4b79      	ldr	r3, [pc, #484]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	4b75      	ldr	r3, [pc, #468]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	4a74      	ldr	r2, [pc, #464]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bca:	4b72      	ldr	r3, [pc, #456]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STRIP_ESHDN_Pin|DMX_EN_Pin, GPIO_PIN_RESET);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f240 4101 	movw	r1, #1025	@ 0x401
 8004bdc:	486e      	ldr	r0, [pc, #440]	@ (8004d98 <MX_GPIO_Init+0x280>)
 8004bde:	f004 fa49 	bl	8009074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_Pin|GRAPH_LE_Pin|GRAPH_OE_Pin|STRIP_PWR_Pin, GPIO_PIN_RESET);
 8004be2:	2200      	movs	r2, #0
 8004be4:	f24e 0101 	movw	r1, #57345	@ 0xe001
 8004be8:	486c      	ldr	r0, [pc, #432]	@ (8004d9c <MX_GPIO_Init+0x284>)
 8004bea:	f004 fa43 	bl	8009074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bf4:	4868      	ldr	r0, [pc, #416]	@ (8004d98 <MX_GPIO_Init+0x280>)
 8004bf6:	f004 fa3d 	bl	8009074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LGT_EN3_GPIO_Port, LGT_EN3_Pin, GPIO_PIN_RESET);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c00:	4867      	ldr	r0, [pc, #412]	@ (8004da0 <MX_GPIO_Init+0x288>)
 8004c02:	f004 fa37 	bl	8009074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LGT_EN2_Pin|LGT_EN1_Pin, GPIO_PIN_RESET);
 8004c06:	2200      	movs	r2, #0
 8004c08:	2103      	movs	r1, #3
 8004c0a:	4866      	ldr	r0, [pc, #408]	@ (8004da4 <MX_GPIO_Init+0x28c>)
 8004c0c:	f004 fa32 	bl	8009074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JACK_SW_Pin */
  GPIO_InitStruct.Pin = JACK_SW_Pin;
 8004c10:	2308      	movs	r3, #8
 8004c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JACK_SW_GPIO_Port, &GPIO_InitStruct);
 8004c1c:	f107 031c 	add.w	r3, r7, #28
 8004c20:	4619      	mov	r1, r3
 8004c22:	4860      	ldr	r0, [pc, #384]	@ (8004da4 <MX_GPIO_Init+0x28c>)
 8004c24:	f004 f88a 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : STRIP_ESHDN_Pin DIAG_DEBUG_Pin DMX_EN_Pin */
  GPIO_InitStruct.Pin = STRIP_ESHDN_Pin|DIAG_DEBUG_Pin|DMX_EN_Pin;
 8004c28:	f240 5301 	movw	r3, #1281	@ 0x501
 8004c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c3a:	f107 031c 	add.w	r3, r7, #28
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4855      	ldr	r0, [pc, #340]	@ (8004d98 <MX_GPIO_Init+0x280>)
 8004c42:	f004 f87b 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VDD_PG_Pin VAA_PG_Pin STRIP_PG_Pin */
  GPIO_InitStruct.Pin = VDD_PG_Pin|VAA_PG_Pin|STRIP_PG_Pin;
 8004c46:	230e      	movs	r3, #14
 8004c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c52:	f107 031c 	add.w	r3, r7, #28
 8004c56:	4619      	mov	r1, r3
 8004c58:	484f      	ldr	r0, [pc, #316]	@ (8004d98 <MX_GPIO_Init+0x280>)
 8004c5a:	f004 f86f 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 8004c6e:	f107 031c 	add.w	r3, r7, #28
 8004c72:	4619      	mov	r1, r3
 8004c74:	484b      	ldr	r0, [pc, #300]	@ (8004da4 <MX_GPIO_Init+0x28c>)
 8004c76:	f004 f861 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 8004c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c80:	2300      	movs	r3, #0
 8004c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8004c88:	f107 031c 	add.w	r3, r7, #28
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4844      	ldr	r0, [pc, #272]	@ (8004da0 <MX_GPIO_Init+0x288>)
 8004c90:	f004 f854 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8004c94:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004c9a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	4619      	mov	r1, r3
 8004caa:	483d      	ldr	r0, [pc, #244]	@ (8004da0 <MX_GPIO_Init+0x288>)
 8004cac:	f004 f846 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 8004cb0:	f641 7328 	movw	r3, #7976	@ 0x1f28
 8004cb4:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004cb6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cc0:	f107 031c 	add.w	r3, r7, #28
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4835      	ldr	r0, [pc, #212]	@ (8004d9c <MX_GPIO_Init+0x284>)
 8004cc8:	f004 f838 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|GRAPH_OE_Pin;
 8004ccc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cde:	f107 031c 	add.w	r3, r7, #28
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	482d      	ldr	r0, [pc, #180]	@ (8004d9c <MX_GPIO_Init+0x284>)
 8004ce6:	f004 f829 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin STRIP_PWR_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|STRIP_PWR_Pin;
 8004cea:	f244 0301 	movw	r3, #16385	@ 0x4001
 8004cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cfc:	f107 031c 	add.w	r3, r7, #28
 8004d00:	4619      	mov	r1, r3
 8004d02:	4826      	ldr	r0, [pc, #152]	@ (8004d9c <MX_GPIO_Init+0x284>)
 8004d04:	f004 f81a 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8004d14:	f107 031c 	add.w	r3, r7, #28
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4820      	ldr	r0, [pc, #128]	@ (8004d9c <MX_GPIO_Init+0x284>)
 8004d1c:	f004 f80e 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LGT_EN3_Pin */
  GPIO_InitStruct.Pin = LGT_EN3_Pin;
 8004d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d26:	2301      	movs	r3, #1
 8004d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LGT_EN3_GPIO_Port, &GPIO_InitStruct);
 8004d32:	f107 031c 	add.w	r3, r7, #28
 8004d36:	4619      	mov	r1, r3
 8004d38:	4819      	ldr	r0, [pc, #100]	@ (8004da0 <MX_GPIO_Init+0x288>)
 8004d3a:	f003 ffff 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LGT_EN2_Pin LGT_EN1_Pin */
  GPIO_InitStruct.Pin = LGT_EN2_Pin|LGT_EN1_Pin;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d42:	2301      	movs	r3, #1
 8004d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d4e:	f107 031c 	add.w	r3, r7, #28
 8004d52:	4619      	mov	r1, r3
 8004d54:	4813      	ldr	r0, [pc, #76]	@ (8004da4 <MX_GPIO_Init+0x28c>)
 8004d56:	f003 fff1 	bl	8008d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	2009      	movs	r0, #9
 8004d60:	f002 fa79 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004d64:	2009      	movs	r0, #9
 8004d66:	f002 fa92 	bl	800728e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	2017      	movs	r0, #23
 8004d70:	f002 fa71 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d74:	2017      	movs	r0, #23
 8004d76:	f002 fa8a 	bl	800728e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	2028      	movs	r0, #40	@ 0x28
 8004d80:	f002 fa69 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d84:	2028      	movs	r0, #40	@ 0x28
 8004d86:	f002 fa82 	bl	800728e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d8a:	bf00      	nop
 8004d8c:	3730      	adds	r7, #48	@ 0x30
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020800 	.word	0x40020800
 8004d9c:	40020c00 	.word	0x40020c00
 8004da0:	40020400 	.word	0x40020400
 8004da4:	40021000 	.word	0x40021000

08004da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dac:	b672      	cpsid	i
}
 8004dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8004db0:	2201      	movs	r2, #1
 8004db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004db6:	4804      	ldr	r0, [pc, #16]	@ (8004dc8 <Error_Handler+0x20>)
 8004db8:	f004 f95c 	bl	8009074 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8004dbc:	20c8      	movs	r0, #200	@ 0xc8
 8004dbe:	f001 fc15 	bl	80065ec <HAL_Delay>
	  HAL_GPIO_WritePin(DIAG_DEBUG_GPIO_Port, DIAG_DEBUG_Pin, GPIO_PIN_SET);
 8004dc2:	bf00      	nop
 8004dc4:	e7f4      	b.n	8004db0 <Error_Handler+0x8>
 8004dc6:	bf00      	nop
 8004dc8:	40020800 	.word	0x40020800

08004dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <HAL_MspInit+0x58>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	4a12      	ldr	r2, [pc, #72]	@ (8004e24 <HAL_MspInit+0x58>)
 8004ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004de2:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <HAL_MspInit+0x58>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <HAL_MspInit+0x58>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	4a0b      	ldr	r2, [pc, #44]	@ (8004e24 <HAL_MspInit+0x58>)
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dfe:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_MspInit+0x58>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	2005      	movs	r0, #5
 8004e10:	f002 fa21 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004e14:	2005      	movs	r0, #5
 8004e16:	f002 fa3a 	bl	800728e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800

08004e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08c      	sub	sp, #48	@ 0x30
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 031c 	add.w	r3, r7, #28
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a4d      	ldr	r2, [pc, #308]	@ (8004f7c <HAL_ADC_MspInit+0x154>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	f040 8093 	bne.w	8004f72 <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	4b4b      	ldr	r3, [pc, #300]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e54:	4a4a      	ldr	r2, [pc, #296]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e5c:	4b48      	ldr	r3, [pc, #288]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	4b44      	ldr	r3, [pc, #272]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	4a43      	ldr	r2, [pc, #268]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e78:	4b41      	ldr	r3, [pc, #260]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	4b3d      	ldr	r3, [pc, #244]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e8e:	f043 0304 	orr.w	r3, r3, #4
 8004e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e94:	4b3a      	ldr	r3, [pc, #232]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	4b36      	ldr	r3, [pc, #216]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea8:	4a35      	ldr	r2, [pc, #212]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004eaa:	f043 0302 	orr.w	r3, r3, #2
 8004eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eb0:	4b33      	ldr	r3, [pc, #204]	@ (8004f80 <HAL_ADC_MspInit+0x158>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOLID_LGTS_MON_Pin|STRIP_MON2_Pin|STRIP_MON1_Pin|STRIP_MON6_Pin
 8004ebc:	23f1      	movs	r3, #241	@ 0xf1
 8004ebe:	61fb      	str	r3, [r7, #28]
                          |STRIP_MON5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec8:	f107 031c 	add.w	r3, r7, #28
 8004ecc:	4619      	mov	r1, r3
 8004ece:	482d      	ldr	r0, [pc, #180]	@ (8004f84 <HAL_ADC_MspInit+0x15c>)
 8004ed0:	f003 ff34 	bl	8008d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON4_Pin|STRIP_MON3_Pin;
 8004ed4:	2330      	movs	r3, #48	@ 0x30
 8004ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee0:	f107 031c 	add.w	r3, r7, #28
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4828      	ldr	r0, [pc, #160]	@ (8004f88 <HAL_ADC_MspInit+0x160>)
 8004ee8:	f003 ff28 	bl	8008d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP_MON8_Pin|STRIP_MON7_Pin;
 8004eec:	2303      	movs	r3, #3
 8004eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef8:	f107 031c 	add.w	r3, r7, #28
 8004efc:	4619      	mov	r1, r3
 8004efe:	4823      	ldr	r0, [pc, #140]	@ (8004f8c <HAL_ADC_MspInit+0x164>)
 8004f00:	f003 ff1c 	bl	8008d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004f04:	4b22      	ldr	r3, [pc, #136]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f06:	4a23      	ldr	r2, [pc, #140]	@ (8004f94 <HAL_ADC_MspInit+0x16c>)
 8004f08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004f0a:	4b21      	ldr	r3, [pc, #132]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f10:	4b1f      	ldr	r3, [pc, #124]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f16:	4b1e      	ldr	r3, [pc, #120]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f24:	4b1a      	ldr	r3, [pc, #104]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f2a:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004f30:	4b17      	ldr	r3, [pc, #92]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f38:	4b15      	ldr	r3, [pc, #84]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f40:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f46:	4812      	ldr	r0, [pc, #72]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f48:	f002 f9d8 	bl	80072fc <HAL_DMA_Init>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8004f52:	f7ff ff29 	bl	8004da8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a0d      	ldr	r2, [pc, #52]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f90 <HAL_ADC_MspInit+0x168>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	2012      	movs	r0, #18
 8004f68:	f002 f975 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004f6c:	2012      	movs	r0, #18
 8004f6e:	f002 f98e 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f72:	bf00      	nop
 8004f74:	3730      	adds	r7, #48	@ 0x30
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40012000 	.word	0x40012000
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40020000 	.word	0x40020000
 8004f88:	40020800 	.word	0x40020800
 8004f8c:	40020400 	.word	0x40020400
 8004f90:	200010b8 	.word	0x200010b8
 8004f94:	40026410 	.word	0x40026410

08004f98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd4 <HAL_CRC_MspInit+0x3c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <HAL_CRC_MspInit+0x40>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	4a09      	ldr	r2, [pc, #36]	@ (8004fd8 <HAL_CRC_MspInit+0x40>)
 8004fb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fba:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <HAL_CRC_MspInit+0x40>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40023000 	.word	0x40023000
 8004fd8:	40023800 	.word	0x40023800

08004fdc <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b09a      	sub	sp, #104	@ 0x68
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ff4:	f107 0318 	add.w	r3, r7, #24
 8004ff8:	223c      	movs	r2, #60	@ 0x3c
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f00c fb75 	bl	80116ec <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a50      	ldr	r2, [pc, #320]	@ (8005148 <HAL_FMPI2C_MspInit+0x16c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	f040 8098 	bne.w	800513e <HAL_FMPI2C_MspInit+0x162>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 800500e:	2310      	movs	r3, #16
 8005010:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8005012:	2300      	movs	r3, #0
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005016:	f107 0318 	add.w	r3, r7, #24
 800501a:	4618      	mov	r0, r3
 800501c:	f005 f86c 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_FMPI2C_MspInit+0x4e>
    {
      Error_Handler();
 8005026:	f7ff febf 	bl	8004da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	4a46      	ldr	r2, [pc, #280]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	6313      	str	r3, [r2, #48]	@ 0x30
 800503a:	4b44      	ldr	r3, [pc, #272]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	4b40      	ldr	r3, [pc, #256]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504e:	4a3f      	ldr	r2, [pc, #252]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	6313      	str	r3, [r2, #48]	@ 0x30
 8005056:	4b3d      	ldr	r3, [pc, #244]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PB15     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005066:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005068:	2312      	movs	r3, #18
 800506a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800506c:	2301      	movs	r3, #1
 800506e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8005074:	2304      	movs	r3, #4
 8005076:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005078:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800507c:	4619      	mov	r1, r3
 800507e:	4834      	ldr	r0, [pc, #208]	@ (8005150 <HAL_FMPI2C_MspInit+0x174>)
 8005080:	f003 fe5c 	bl	8008d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005088:	2312      	movs	r3, #18
 800508a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800508c:	2301      	movs	r3, #1
 800508e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8005094:	2304      	movs	r3, #4
 8005096:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005098:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800509c:	4619      	mov	r1, r3
 800509e:	482d      	ldr	r0, [pc, #180]	@ (8005154 <HAL_FMPI2C_MspInit+0x178>)
 80050a0:	f003 fe4c 	bl	8008d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	4a27      	ldr	r2, [pc, #156]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 80050ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80050b4:	4b25      	ldr	r3, [pc, #148]	@ (800514c <HAL_FMPI2C_MspInit+0x170>)
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]

    /* FMPI2C1 DMA Init */
    /* FMPI2C1_TX Init */
    hdma_fmpi2c1_tx.Instance = DMA1_Stream1;
 80050c0:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050c2:	4a26      	ldr	r2, [pc, #152]	@ (800515c <HAL_FMPI2C_MspInit+0x180>)
 80050c4:	601a      	str	r2, [r3, #0]
    hdma_fmpi2c1_tx.Init.Channel = DMA_CHANNEL_2;
 80050c6:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050cc:	605a      	str	r2, [r3, #4]
    hdma_fmpi2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ce:	4b22      	ldr	r3, [pc, #136]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050d0:	2240      	movs	r2, #64	@ 0x40
 80050d2:	609a      	str	r2, [r3, #8]
    hdma_fmpi2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	60da      	str	r2, [r3, #12]
    hdma_fmpi2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050da:	4b1f      	ldr	r3, [pc, #124]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050e0:	611a      	str	r2, [r3, #16]
    hdma_fmpi2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	615a      	str	r2, [r3, #20]
    hdma_fmpi2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	619a      	str	r2, [r3, #24]
    hdma_fmpi2c1_tx.Init.Mode = DMA_NORMAL;
 80050ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	61da      	str	r2, [r3, #28]
    hdma_fmpi2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80050f4:	4b18      	ldr	r3, [pc, #96]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050fa:	621a      	str	r2, [r3, #32]
    hdma_fmpi2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050fc:	4b16      	ldr	r3, [pc, #88]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 80050fe:	2200      	movs	r2, #0
 8005100:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_fmpi2c1_tx) != HAL_OK)
 8005102:	4815      	ldr	r0, [pc, #84]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 8005104:	f002 f8fa 	bl	80072fc <HAL_DMA_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_FMPI2C_MspInit+0x136>
    {
      Error_Handler();
 800510e:	f7ff fe4b 	bl	8004da8 <Error_Handler>
    }

    __HAL_LINKDMA(hfmpi2c,hdmatx,hdma_fmpi2c1_tx);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a10      	ldr	r2, [pc, #64]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38
 8005118:	4a0f      	ldr	r2, [pc, #60]	@ (8005158 <HAL_FMPI2C_MspInit+0x17c>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* FMPI2C1 interrupt Init */
    HAL_NVIC_SetPriority(FMPI2C1_EV_IRQn, 0, 0);
 800511e:	2200      	movs	r2, #0
 8005120:	2100      	movs	r1, #0
 8005122:	205f      	movs	r0, #95	@ 0x5f
 8005124:	f002 f897 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_EV_IRQn);
 8005128:	205f      	movs	r0, #95	@ 0x5f
 800512a:	f002 f8b0 	bl	800728e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FMPI2C1_ER_IRQn, 0, 0);
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	2060      	movs	r0, #96	@ 0x60
 8005134:	f002 f88f 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMPI2C1_ER_IRQn);
 8005138:	2060      	movs	r0, #96	@ 0x60
 800513a:	f002 f8a8 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800513e:	bf00      	nop
 8005140:	3768      	adds	r7, #104	@ 0x68
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40006000 	.word	0x40006000
 800514c:	40023800 	.word	0x40023800
 8005150:	40020400 	.word	0x40020400
 8005154:	40020800 	.word	0x40020800
 8005158:	2000116c 	.word	0x2000116c
 800515c:	40026028 	.word	0x40026028

08005160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	@ 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a19      	ldr	r2, [pc, #100]	@ (80051e4 <HAL_I2C_MspInit+0x84>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d12b      	bne.n	80051da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	4b18      	ldr	r3, [pc, #96]	@ (80051e8 <HAL_I2C_MspInit+0x88>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <HAL_I2C_MspInit+0x88>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6313      	str	r3, [r2, #48]	@ 0x30
 8005192:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <HAL_I2C_MspInit+0x88>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800519e:	23c0      	movs	r3, #192	@ 0xc0
 80051a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a2:	2312      	movs	r3, #18
 80051a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051aa:	2303      	movs	r3, #3
 80051ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051ae:	2304      	movs	r3, #4
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	4619      	mov	r1, r3
 80051b8:	480c      	ldr	r0, [pc, #48]	@ (80051ec <HAL_I2C_MspInit+0x8c>)
 80051ba:	f003 fdbf 	bl	8008d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <HAL_I2C_MspInit+0x88>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c6:	4a08      	ldr	r2, [pc, #32]	@ (80051e8 <HAL_I2C_MspInit+0x88>)
 80051c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ce:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <HAL_I2C_MspInit+0x88>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051da:	bf00      	nop
 80051dc:	3728      	adds	r7, #40	@ 0x28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40005400 	.word	0x40005400
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40020400 	.word	0x40020400

080051f0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b098      	sub	sp, #96	@ 0x60
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005208:	f107 0310 	add.w	r3, r7, #16
 800520c:	223c      	movs	r2, #60	@ 0x3c
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f00c fa6b 	bl	80116ec <memset>
  if(hi2s->Instance==SPI5)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a3f      	ldr	r2, [pc, #252]	@ (8005318 <HAL_I2S_MspInit+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d176      	bne.n	800530e <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB2;
 8005220:	2382      	movs	r3, #130	@ 0x82
 8005222:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 52;
 8005224:	2334      	movs	r3, #52	@ 0x34
 8005226:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8005228:	2308      	movs	r3, #8
 800522a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800522c:	2302      	movs	r3, #2
 800522e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8005230:	2302      	movs	r3, #2
 8005232:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8005234:	2300      	movs	r3, #0
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8005238:	2300      	movs	r3, #0
 800523a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	4618      	mov	r0, r3
 8005242:	f004 ff59 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 800524c:	f7ff fdac 	bl	8004da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	4b31      	ldr	r3, [pc, #196]	@ (800531c <HAL_I2S_MspInit+0x12c>)
 8005256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005258:	4a30      	ldr	r2, [pc, #192]	@ (800531c <HAL_I2S_MspInit+0x12c>)
 800525a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800525e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005260:	4b2e      	ldr	r3, [pc, #184]	@ (800531c <HAL_I2S_MspInit+0x12c>)
 8005262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800526c:	2300      	movs	r3, #0
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	4b2a      	ldr	r3, [pc, #168]	@ (800531c <HAL_I2S_MspInit+0x12c>)
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	4a29      	ldr	r2, [pc, #164]	@ (800531c <HAL_I2S_MspInit+0x12c>)
 8005276:	f043 0310 	orr.w	r3, r3, #16
 800527a:	6313      	str	r3, [r2, #48]	@ 0x30
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <HAL_I2S_MspInit+0x12c>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	68bb      	ldr	r3, [r7, #8]
    /**I2S5 GPIO Configuration
    PE11     ------> I2S5_WS
    PE12     ------> I2S5_CK
    PE14     ------> I2S5_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8005288:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 800528c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528e:	2302      	movs	r3, #2
 8005290:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005292:	2300      	movs	r3, #0
 8005294:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005296:	2300      	movs	r3, #0
 8005298:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800529a:	2306      	movs	r3, #6
 800529c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800529e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80052a2:	4619      	mov	r1, r3
 80052a4:	481e      	ldr	r0, [pc, #120]	@ (8005320 <HAL_I2S_MspInit+0x130>)
 80052a6:	f003 fd49 	bl	8008d3c <HAL_GPIO_Init>

    /* I2S5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80052aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005328 <HAL_I2S_MspInit+0x138>)
 80052ae:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80052b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80052b6:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052be:	4b19      	ldr	r3, [pc, #100]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052c4:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052ca:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052cc:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052d2:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80052d4:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052da:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_CIRCULAR;
 80052dc:	4b11      	ldr	r3, [pc, #68]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052e2:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80052ea:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80052f2:	480c      	ldr	r0, [pc, #48]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 80052f4:	f002 f802 	bl	80072fc <HAL_DMA_Init>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 80052fe:	f7ff fd53 	bl	8004da8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi5_rx);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 8005306:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005308:	4a06      	ldr	r2, [pc, #24]	@ (8005324 <HAL_I2S_MspInit+0x134>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800530e:	bf00      	nop
 8005310:	3760      	adds	r7, #96	@ 0x60
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40015000 	.word	0x40015000
 800531c:	40023800 	.word	0x40023800
 8005320:	40021000 	.word	0x40021000
 8005324:	20001268 	.word	0x20001268
 8005328:	40026458 	.word	0x40026458

0800532c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b092      	sub	sp, #72	@ 0x48
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	223c      	movs	r2, #60	@ 0x3c
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f00c f9d5 	bl	80116ec <memset>
  if(hrtc->Instance==RTC)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <HAL_RTC_MspInit+0x5c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d119      	bne.n	8005380 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800534c:	2308      	movs	r3, #8
 800534e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005356:	f107 030c 	add.w	r3, r7, #12
 800535a:	4618      	mov	r0, r3
 800535c:	f004 fecc 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005366:	f7ff fd1f 	bl	8004da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800536a:	4b08      	ldr	r3, [pc, #32]	@ (800538c <HAL_RTC_MspInit+0x60>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8005370:	2200      	movs	r2, #0
 8005372:	2100      	movs	r1, #0
 8005374:	2029      	movs	r0, #41	@ 0x29
 8005376:	f001 ff6e 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800537a:	2029      	movs	r0, #41	@ 0x29
 800537c:	f001 ff87 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005380:	bf00      	nop
 8005382:	3748      	adds	r7, #72	@ 0x48
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40002800 	.word	0x40002800
 800538c:	42470e3c 	.word	0x42470e3c

08005390 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b09a      	sub	sp, #104	@ 0x68
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	605a      	str	r2, [r3, #4]
 80053a2:	609a      	str	r2, [r3, #8]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053a8:	f107 0318 	add.w	r3, r7, #24
 80053ac:	223c      	movs	r2, #60	@ 0x3c
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f00c f99b 	bl	80116ec <memset>
  if(hsd->Instance==SDIO)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a40      	ldr	r2, [pc, #256]	@ (80054bc <HAL_SD_MspInit+0x12c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d178      	bne.n	80054b2 <HAL_SD_MspInit+0x122>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80053c0:	2360      	movs	r3, #96	@ 0x60
 80053c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80053c4:	2300      	movs	r3, #0
 80053c6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80053c8:	2300      	movs	r3, #0
 80053ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053cc:	f107 0318 	add.w	r3, r7, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f004 fe91 	bl	800a0f8 <HAL_RCCEx_PeriphCLKConfig>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80053dc:	f7ff fce4 	bl	8004da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	4b36      	ldr	r3, [pc, #216]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 80053e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e8:	4a35      	ldr	r2, [pc, #212]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 80053ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80053f0:	4b33      	ldr	r3, [pc, #204]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 80053f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	4b2f      	ldr	r3, [pc, #188]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005404:	4a2e      	ldr	r2, [pc, #184]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 8005406:	f043 0304 	orr.w	r3, r3, #4
 800540a:	6313      	str	r3, [r2, #48]	@ 0x30
 800540c:	4b2c      	ldr	r3, [pc, #176]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 800540e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	4b28      	ldr	r3, [pc, #160]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	4a27      	ldr	r2, [pc, #156]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 8005422:	f043 0308 	orr.w	r3, r3, #8
 8005426:	6313      	str	r3, [r2, #48]	@ 0x30
 8005428:	4b25      	ldr	r3, [pc, #148]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	4b21      	ldr	r3, [pc, #132]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	4a20      	ldr	r2, [pc, #128]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	6313      	str	r3, [r2, #48]	@ 0x30
 8005444:	4b1e      	ldr	r3, [pc, #120]	@ (80054c0 <HAL_SD_MspInit+0x130>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005454:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	2300      	movs	r3, #0
 800545c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800545e:	2303      	movs	r3, #3
 8005460:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005462:	230c      	movs	r3, #12
 8005464:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005466:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800546a:	4619      	mov	r1, r3
 800546c:	4815      	ldr	r0, [pc, #84]	@ (80054c4 <HAL_SD_MspInit+0x134>)
 800546e:	f003 fc65 	bl	8008d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005472:	2304      	movs	r3, #4
 8005474:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005476:	2302      	movs	r3, #2
 8005478:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547a:	2300      	movs	r3, #0
 800547c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800547e:	2303      	movs	r3, #3
 8005480:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005482:	230c      	movs	r3, #12
 8005484:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005486:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800548a:	4619      	mov	r1, r3
 800548c:	480e      	ldr	r0, [pc, #56]	@ (80054c8 <HAL_SD_MspInit+0x138>)
 800548e:	f003 fc55 	bl	8008d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005492:	2310      	movs	r3, #16
 8005494:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005496:	2302      	movs	r3, #2
 8005498:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549e:	2303      	movs	r3, #3
 80054a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80054a2:	230c      	movs	r3, #12
 80054a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80054aa:	4619      	mov	r1, r3
 80054ac:	4807      	ldr	r0, [pc, #28]	@ (80054cc <HAL_SD_MspInit+0x13c>)
 80054ae:	f003 fc45 	bl	8008d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80054b2:	bf00      	nop
 80054b4:	3768      	adds	r7, #104	@ 0x68
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40020800 	.word	0x40020800
 80054c8:	40020c00 	.word	0x40020c00
 80054cc:	40020400 	.word	0x40020400

080054d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	@ 0x28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d8:	f107 0314 	add.w	r3, r7, #20
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a19      	ldr	r2, [pc, #100]	@ (8005554 <HAL_SPI_MspInit+0x84>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d12b      	bne.n	800554a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	4b18      	ldr	r3, [pc, #96]	@ (8005558 <HAL_SPI_MspInit+0x88>)
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <HAL_SPI_MspInit+0x88>)
 80054fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005500:	6453      	str	r3, [r2, #68]	@ 0x44
 8005502:	4b15      	ldr	r3, [pc, #84]	@ (8005558 <HAL_SPI_MspInit+0x88>)
 8005504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <HAL_SPI_MspInit+0x88>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	4a10      	ldr	r2, [pc, #64]	@ (8005558 <HAL_SPI_MspInit+0x88>)
 8005518:	f043 0310 	orr.w	r3, r3, #16
 800551c:	6313      	str	r3, [r2, #48]	@ 0x30
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <HAL_SPI_MspInit+0x88>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GRAPH_CLK_Pin|GRAPH_SDI_Pin;
 800552a:	2344      	movs	r3, #68	@ 0x44
 800552c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552e:	2302      	movs	r3, #2
 8005530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005536:	2303      	movs	r3, #3
 8005538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800553a:	2305      	movs	r3, #5
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800553e:	f107 0314 	add.w	r3, r7, #20
 8005542:	4619      	mov	r1, r3
 8005544:	4805      	ldr	r0, [pc, #20]	@ (800555c <HAL_SPI_MspInit+0x8c>)
 8005546:	f003 fbf9 	bl	8008d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800554a:	bf00      	nop
 800554c:	3728      	adds	r7, #40	@ 0x28
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40013400 	.word	0x40013400
 8005558:	40023800 	.word	0x40023800
 800555c:	40021000 	.word	0x40021000

08005560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <HAL_TIM_Base_MspInit+0xc0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10e      	bne.n	8005590 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6453      	str	r3, [r2, #68]	@ 0x44
 8005582:	4b28      	ldr	r3, [pc, #160]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800558e:	e042      	b.n	8005616 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <HAL_TIM_Base_MspInit+0xc8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	4b21      	ldr	r3, [pc, #132]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	4a20      	ldr	r2, [pc, #128]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693b      	ldr	r3, [r7, #16]
}
 80055b6:	e02e      	b.n	8005616 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1b      	ldr	r2, [pc, #108]	@ (800562c <HAL_TIM_Base_MspInit+0xcc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d116      	bne.n	80055f0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	4b17      	ldr	r3, [pc, #92]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	4a16      	ldr	r2, [pc, #88]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 80055cc:	f043 0310 	orr.w	r3, r3, #16
 80055d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80055d2:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	2036      	movs	r0, #54	@ 0x36
 80055e4:	f001 fe37 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80055e8:	2036      	movs	r0, #54	@ 0x36
 80055ea:	f001 fe50 	bl	800728e <HAL_NVIC_EnableIRQ>
}
 80055ee:	e012      	b.n	8005616 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005630 <HAL_TIM_Base_MspInit+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d10d      	bne.n	8005616 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	4a08      	ldr	r2, [pc, #32]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	6453      	str	r3, [r2, #68]	@ 0x44
 800560a:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <HAL_TIM_Base_MspInit+0xc4>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]
}
 8005616:	bf00      	nop
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40023800 	.word	0x40023800
 8005628:	40000400 	.word	0x40000400
 800562c:	40001000 	.word	0x40001000
 8005630:	40010400 	.word	0x40010400

08005634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	@ 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a25      	ldr	r2, [pc, #148]	@ (80056e8 <HAL_TIM_MspPostInit+0xb4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d11f      	bne.n	8005696 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	4b24      	ldr	r3, [pc, #144]	@ (80056ec <HAL_TIM_MspPostInit+0xb8>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	4a23      	ldr	r2, [pc, #140]	@ (80056ec <HAL_TIM_MspPostInit+0xb8>)
 8005660:	f043 0310 	orr.w	r3, r3, #16
 8005664:	6313      	str	r3, [r2, #48]	@ 0x30
 8005666:	4b21      	ldr	r3, [pc, #132]	@ (80056ec <HAL_TIM_MspPostInit+0xb8>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = XLR_SEL_IND_Pin|HP_SEL_IND_Pin;
 8005672:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8005676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	2302      	movs	r3, #2
 800567a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	2300      	movs	r3, #0
 8005682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005684:	2301      	movs	r3, #1
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005688:	f107 0314 	add.w	r3, r7, #20
 800568c:	4619      	mov	r1, r3
 800568e:	4818      	ldr	r0, [pc, #96]	@ (80056f0 <HAL_TIM_MspPostInit+0xbc>)
 8005690:	f003 fb54 	bl	8008d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005694:	e023      	b.n	80056de <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <HAL_TIM_MspPostInit+0xc0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d11e      	bne.n	80056de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <HAL_TIM_MspPostInit+0xb8>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a8:	4a10      	ldr	r2, [pc, #64]	@ (80056ec <HAL_TIM_MspPostInit+0xb8>)
 80056aa:	f043 0304 	orr.w	r3, r3, #4
 80056ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80056b0:	4b0e      	ldr	r3, [pc, #56]	@ (80056ec <HAL_TIM_MspPostInit+0xb8>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin;
 80056bc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80056c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c2:	2302      	movs	r3, #2
 80056c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056ce:	2302      	movs	r3, #2
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	4619      	mov	r1, r3
 80056d8:	4807      	ldr	r0, [pc, #28]	@ (80056f8 <HAL_TIM_MspPostInit+0xc4>)
 80056da:	f003 fb2f 	bl	8008d3c <HAL_GPIO_Init>
}
 80056de:	bf00      	nop
 80056e0:	3728      	adds	r7, #40	@ 0x28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40020800 	.word	0x40020800

080056fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	@ 0x38
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a67      	ldr	r2, [pc, #412]	@ (80058b8 <HAL_UART_MspInit+0x1bc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d135      	bne.n	800578a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	4b66      	ldr	r3, [pc, #408]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005726:	4a65      	ldr	r2, [pc, #404]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005728:	f043 0310 	orr.w	r3, r3, #16
 800572c:	6453      	str	r3, [r2, #68]	@ 0x44
 800572e:	4b63      	ldr	r3, [pc, #396]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	4b5f      	ldr	r3, [pc, #380]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	4a5e      	ldr	r2, [pc, #376]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	6313      	str	r3, [r2, #48]	@ 0x30
 800574a:	4b5c      	ldr	r3, [pc, #368]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 8005756:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575c:	2302      	movs	r3, #2
 800575e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005764:	2303      	movs	r3, #3
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005768:	2307      	movs	r3, #7
 800576a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800576c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005770:	4619      	mov	r1, r3
 8005772:	4853      	ldr	r0, [pc, #332]	@ (80058c0 <HAL_UART_MspInit+0x1c4>)
 8005774:	f003 fae2 	bl	8008d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	2025      	movs	r0, #37	@ 0x25
 800577e:	f001 fd6a 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005782:	2025      	movs	r0, #37	@ 0x25
 8005784:	f001 fd83 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005788:	e092      	b.n	80058b0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4d      	ldr	r2, [pc, #308]	@ (80058c4 <HAL_UART_MspInit+0x1c8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d134      	bne.n	80057fe <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	4b48      	ldr	r3, [pc, #288]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	4a47      	ldr	r2, [pc, #284]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80057a4:	4b45      	ldr	r3, [pc, #276]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	4b41      	ldr	r3, [pc, #260]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 80057b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b8:	4a40      	ldr	r2, [pc, #256]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6313      	str	r3, [r2, #48]	@ 0x30
 80057c0:	4b3e      	ldr	r3, [pc, #248]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 80057c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 80057cc:	230c      	movs	r3, #12
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d0:	2302      	movs	r3, #2
 80057d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d8:	2303      	movs	r3, #3
 80057da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057dc:	2307      	movs	r3, #7
 80057de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057e4:	4619      	mov	r1, r3
 80057e6:	4836      	ldr	r0, [pc, #216]	@ (80058c0 <HAL_UART_MspInit+0x1c4>)
 80057e8:	f003 faa8 	bl	8008d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80057ec:	2200      	movs	r2, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	2026      	movs	r0, #38	@ 0x26
 80057f2:	f001 fd30 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057f6:	2026      	movs	r0, #38	@ 0x26
 80057f8:	f001 fd49 	bl	800728e <HAL_NVIC_EnableIRQ>
}
 80057fc:	e058      	b.n	80058b0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a31      	ldr	r2, [pc, #196]	@ (80058c8 <HAL_UART_MspInit+0x1cc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d153      	bne.n	80058b0 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	4a2a      	ldr	r2, [pc, #168]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005812:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005816:	6413      	str	r3, [r2, #64]	@ 0x40
 8005818:	4b28      	ldr	r3, [pc, #160]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	4b24      	ldr	r3, [pc, #144]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800582a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582c:	4a23      	ldr	r2, [pc, #140]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800582e:	f043 0302 	orr.w	r3, r3, #2
 8005832:	6313      	str	r3, [r2, #48]	@ 0x30
 8005834:	4b21      	ldr	r3, [pc, #132]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	4b1d      	ldr	r3, [pc, #116]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005848:	4a1c      	ldr	r2, [pc, #112]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 800584a:	f043 0304 	orr.w	r3, r3, #4
 800584e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <HAL_UART_MspInit+0x1c0>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 800585c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005862:	2302      	movs	r3, #2
 8005864:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005866:	2300      	movs	r3, #0
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800586a:	2303      	movs	r3, #3
 800586c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800586e:	2307      	movs	r3, #7
 8005870:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8005872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005876:	4619      	mov	r1, r3
 8005878:	4814      	ldr	r0, [pc, #80]	@ (80058cc <HAL_UART_MspInit+0x1d0>)
 800587a:	f003 fa5f 	bl	8008d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DMX_RX_Pin;
 800587e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005884:	2302      	movs	r3, #2
 8005886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005888:	2300      	movs	r3, #0
 800588a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800588c:	2303      	movs	r3, #3
 800588e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005890:	2307      	movs	r3, #7
 8005892:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DMX_RX_GPIO_Port, &GPIO_InitStruct);
 8005894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005898:	4619      	mov	r1, r3
 800589a:	480d      	ldr	r0, [pc, #52]	@ (80058d0 <HAL_UART_MspInit+0x1d4>)
 800589c:	f003 fa4e 	bl	8008d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	2027      	movs	r0, #39	@ 0x27
 80058a6:	f001 fcd6 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80058aa:	2027      	movs	r0, #39	@ 0x27
 80058ac:	f001 fcef 	bl	800728e <HAL_NVIC_EnableIRQ>
}
 80058b0:	bf00      	nop
 80058b2:	3738      	adds	r7, #56	@ 0x38
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40011000 	.word	0x40011000
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40020000 	.word	0x40020000
 80058c4:	40004400 	.word	0x40004400
 80058c8:	40004800 	.word	0x40004800
 80058cc:	40020400 	.word	0x40020400
 80058d0:	40020800 	.word	0x40020800

080058d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <NMI_Handler+0x4>

080058dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  Error_Handler();
 80058e0:	f7ff fa62 	bl	8004da8 <Error_Handler>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <HardFault_Handler+0x8>

080058e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <MemManage_Handler+0x4>

080058f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  Error_Handler();
 80058f4:	f7ff fa58 	bl	8004da8 <Error_Handler>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <BusFault_Handler+0x8>

080058fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  Error_Handler();
 8005900:	f7ff fa52 	bl	8004da8 <Error_Handler>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <UsageFault_Handler+0x8>

08005908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005936:	f7fe fa0b 	bl	8003d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}

0800593e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 8005950:	2008      	movs	r0, #8
 8005952:	f003 fba9 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmpi2c1_tx);
 8005960:	4802      	ldr	r0, [pc, #8]	@ (800596c <DMA1_Stream1_IRQHandler+0x10>)
 8005962:	f001 fe63 	bl	800762c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	2000116c 	.word	0x2000116c

08005970 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005974:	4802      	ldr	r0, [pc, #8]	@ (8005980 <ADC_IRQHandler+0x10>)
 8005976:	f000 fec3 	bl	8006700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001054 	.word	0x20001054

08005984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 8005988:	2020      	movs	r0, #32
 800598a:	f003 fb8d 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 800598e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005992:	f003 fb89 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 8005996:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800599a:	f003 fb85 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059a8:	4802      	ldr	r0, [pc, #8]	@ (80059b4 <USART1_IRQHandler+0x10>)
 80059aa:	f007 ffa7 	bl	800d8fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200014e4 	.word	0x200014e4

080059b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80059bc:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <USART2_IRQHandler+0x10>)
 80059be:	f007 ff9d 	bl	800d8fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80059c2:	bf00      	nop
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20001528 	.word	0x20001528

080059cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059d0:	4802      	ldr	r0, [pc, #8]	@ (80059dc <USART3_IRQHandler+0x10>)
 80059d2:	f007 ff93 	bl	800d8fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80059d6:	bf00      	nop
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	2000156c 	.word	0x2000156c

080059e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 80059e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80059e8:	f003 fb5e 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 80059ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80059f0:	f003 fb5a 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 80059f4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80059f8:	f003 fb56 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80059fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005a00:	f003 fb52 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8005a04:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005a08:	f003 fb4e 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_LEFT_Pin);
 8005a0c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005a10:	f003 fb4a 	bl	80090a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005a1c:	4802      	ldr	r0, [pc, #8]	@ (8005a28 <RTC_Alarm_IRQHandler+0x10>)
 8005a1e:	f005 fbf5 	bl	800b20c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	200012c8 	.word	0x200012c8

08005a2c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005a30:	4802      	ldr	r0, [pc, #8]	@ (8005a3c <TIM6_IRQHandler+0x10>)
 8005a32:	f006 ff2b 	bl	800c88c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20001454 	.word	0x20001454

08005a40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a44:	4802      	ldr	r0, [pc, #8]	@ (8005a50 <DMA2_Stream0_IRQHandler+0x10>)
 8005a46:	f001 fdf1 	bl	800762c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200010b8 	.word	0x200010b8

08005a54 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8005a58:	4802      	ldr	r0, [pc, #8]	@ (8005a64 <DMA2_Stream3_IRQHandler+0x10>)
 8005a5a:	f001 fde7 	bl	800762c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20001268 	.word	0x20001268

08005a68 <FMPI2C1_EV_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 event interrupt.
  */
void FMPI2C1_EV_IRQHandler(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 0 */

  /* USER CODE END FMPI2C1_EV_IRQn 0 */
  HAL_FMPI2C_EV_IRQHandler(&hfmpi2c1);
 8005a6c:	4802      	ldr	r0, [pc, #8]	@ (8005a78 <FMPI2C1_EV_IRQHandler+0x10>)
 8005a6e:	f002 f9d9 	bl	8007e24 <HAL_FMPI2C_EV_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_EV_IRQn 1 */

  /* USER CODE END FMPI2C1_EV_IRQn 1 */
}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20001120 	.word	0x20001120

08005a7c <FMPI2C1_ER_IRQHandler>:

/**
  * @brief This function handles FMPI2C1 error interrupt.
  */
void FMPI2C1_ER_IRQHandler(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 0 */

  /* USER CODE END FMPI2C1_ER_IRQn 0 */
  HAL_FMPI2C_ER_IRQHandler(&hfmpi2c1);
 8005a80:	4802      	ldr	r0, [pc, #8]	@ (8005a8c <FMPI2C1_ER_IRQHandler+0x10>)
 8005a82:	f002 f9e9 	bl	8007e58 <HAL_FMPI2C_ER_IRQHandler>
  /* USER CODE BEGIN FMPI2C1_ER_IRQn 1 */

  /* USER CODE END FMPI2C1_ER_IRQn 1 */
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20001120 	.word	0x20001120

08005a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return 1;
 8005a94:	2301      	movs	r3, #1
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <_kill>:

int _kill(int pid, int sig)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005aaa:	f00b fe7b 	bl	80117a4 <__errno>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2216      	movs	r2, #22
 8005ab2:	601a      	str	r2, [r3, #0]
  return -1;
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <_exit>:

void _exit (int status)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ffe7 	bl	8005aa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <_exit+0x12>
	...

08005ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ae0:	4a14      	ldr	r2, [pc, #80]	@ (8005b34 <_sbrk+0x5c>)
 8005ae2:	4b15      	ldr	r3, [pc, #84]	@ (8005b38 <_sbrk+0x60>)
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005aec:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <_sbrk+0x64>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005af4:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <_sbrk+0x64>)
 8005af6:	4a12      	ldr	r2, [pc, #72]	@ (8005b40 <_sbrk+0x68>)
 8005af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <_sbrk+0x64>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d207      	bcs.n	8005b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b08:	f00b fe4c 	bl	80117a4 <__errno>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	220c      	movs	r2, #12
 8005b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	e009      	b.n	8005b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b18:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <_sbrk+0x64>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b1e:	4b07      	ldr	r3, [pc, #28]	@ (8005b3c <_sbrk+0x64>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4413      	add	r3, r2
 8005b26:	4a05      	ldr	r2, [pc, #20]	@ (8005b3c <_sbrk+0x64>)
 8005b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20040000 	.word	0x20040000
 8005b38:	00000400 	.word	0x00000400
 8005b3c:	200015b8 	.word	0x200015b8
 8005b40:	20001720 	.word	0x20001720

08005b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b48:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <SystemInit+0x20>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	4a05      	ldr	r2, [pc, #20]	@ (8005b64 <SystemInit+0x20>)
 8005b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <_ZN6ButtonD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Button.h>

Button::~Button()
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	4a05      	ldr	r2, [pc, #20]	@ (8005b88 <_ZN6ButtonD1Ev+0x20>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
{
}
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f86b 	bl	8005c54 <_ZN7ControlD1Ev>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	080120d8 	.word	0x080120d8

08005b8c <_ZN6ButtonD0Ev>:
Button::~Button()
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
}
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff ffe7 	bl	8005b68 <_ZN6ButtonD1Ev>
 8005b9a:	2118      	movs	r1, #24
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f009 fcfe 	bl	800f59e <_ZdlPvj>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <_ZN6Button11UpdateStateEv>:
{
	this->pressActive = press;
}

void Button::UpdateState()
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	this->nxt->SetClick(this->ID, this->pressActive);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6898      	ldr	r0, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7919      	ldrb	r1, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	7c9b      	ldrb	r3, [r3, #18]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f7fd fb0b 	bl	80031dc <_ZN7Nextion8SetClickEhb>
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZN6Button3ActEv>:

void Button::Act()
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
	if (this->btnAction != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <_ZN6Button3ActEv+0x16>
	{
		this->btnAction();
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4798      	blx	r3
	}
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <_ZN9Component3ActEv>:
	virtual ~Component();

	uint8_t ID;
	bool IsActive = false;

	virtual void Act() {};
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <_ZN7Control11UpdateStateEv>:
	bool CheckNav(uint8_t &x, uint8_t &y) { return x == this->navXIndex && y == this->navYIndex; };

	uint8_t GetNavX() { return this->navXIndex; };
	uint8_t GetNavY() { return this->navYIndex; };

	virtual void UpdateState() {};
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <_ZN9ComponentD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Component.h>

Component::~Component()
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	4a04      	ldr	r2, [pc, #16]	@ (8005c30 <_ZN9ComponentD1Ev+0x1c>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
{
}
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	080120f8 	.word	0x080120f8

08005c34 <_ZN9ComponentD0Ev>:
Component::~Component()
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
}
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ffe9 	bl	8005c14 <_ZN9ComponentD1Ev>
 8005c42:	210c      	movs	r1, #12
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f009 fcaa 	bl	800f59e <_ZdlPvj>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <_ZN7ControlD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/Control.h>

Control::~Control()
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	4a05      	ldr	r2, [pc, #20]	@ (8005c74 <_ZN7ControlD1Ev+0x20>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	601a      	str	r2, [r3, #0]
{
}
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ffd5 	bl	8005c14 <_ZN9ComponentD1Ev>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	0801210c 	.word	0x0801210c

08005c78 <_ZN7ControlD0Ev>:
Control::~Control()
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
}
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ffe7 	bl	8005c54 <_ZN7ControlD1Ev>
 8005c86:	2114      	movs	r1, #20
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f009 fc88 	bl	800f59e <_ZdlPvj>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <_ZN7Control6SetNavEv>:

void Control::SetNav()
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	if (!this->IsActive) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	795b      	ldrb	r3, [r3, #5]
 8005ca4:	f083 0301 	eor.w	r3, r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <_ZN7Control6SetNavEv+0x2c>
		this->IsActive = true;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	715a      	strb	r2, [r3, #5]
		this->nxt->SetClick(ID, true);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6898      	ldr	r0, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f7fd fa8c 	bl	80031dc <_ZN7Nextion8SetClickEhb>
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZN7Control8ClearNavEv>:

void Control::ClearNav()
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	if (this->IsActive)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	795b      	ldrb	r3, [r3, #5]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <_ZN7Control8ClearNavEv+0x26>
	{
		this->IsActive = false;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	715a      	strb	r2, [r3, #5]
		this->nxt->SetClick(ID, false);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6898      	ldr	r0, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	791b      	ldrb	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	4619      	mov	r1, r3
 8005cee:	f7fd fa75 	bl	80031dc <_ZN7Nextion8SetClickEhb>
	}
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_ZN7Control8CheckNavERhS0_>:
	bool CheckNav(uint8_t &x, uint8_t &y) { return x == this->navXIndex && y == this->navYIndex; };
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	7c1b      	ldrb	r3, [r3, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d107      	bne.n	8005d22 <_ZN7Control8CheckNavERhS0_+0x28>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	7c5b      	ldrb	r3, [r3, #17]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d101      	bne.n	8005d22 <_ZN7Control8CheckNavERhS0_+0x28>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <_ZN7Control8CheckNavERhS0_+0x2a>
 8005d22:	2300      	movs	r3, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <_ZN7Control7GetNavXEv>:
	uint8_t GetNavX() { return this->navXIndex; };
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	7c1b      	ldrb	r3, [r3, #16]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <_ZN7Control7GetNavYEv>:
	uint8_t GetNavY() { return this->navYIndex; };
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	7c5b      	ldrb	r3, [r3, #17]
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni>:
 *      Author: Daxxn
 */

#include <Screen/Page.h>

Page::Page(Nextion *nxt, uint8_t id, Button *btns, int btnCount, PageButton *pageBtns, int pageBtnCount): Component(nxt, id)
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71fb      	strb	r3, [r7, #7]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	79fa      	ldrb	r2, [r7, #7]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fb faa6 	bl	80012c8 <_ZN9ComponentC1EP7Nextionh>
 8005d7c:	4a49      	ldr	r2, [pc, #292]	@ (8005ea4 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x144>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]
{
	this->buttons = btns;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	619a      	str	r2, [r3, #24]
	this->pageButtons = pageBtns;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8c:	615a      	str	r2, [r3, #20]
	this->pageBtnCount = pageBtnCount;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24
	this->btnCount = btnCount;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a3a      	ldr	r2, [r7, #32]
 8005d98:	621a      	str	r2, [r3, #32]
	this->progBars = NULL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	61da      	str	r2, [r3, #28]
	this->pbCount = 0;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	629a      	str	r2, [r3, #40]	@ 0x28

	this->CurrentControl = &btns[0];
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	611a      	str	r2, [r3, #16]

	uint8_t temp1 = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	74bb      	strb	r3, [r7, #18]
	int i = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < btnCount; ++i) {
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e030      	b.n	8005e20 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xc0>
		temp1 = this->buttons[i].GetNavX();
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	440b      	add	r3, r1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff ffae 	bl	8005d30 <_ZN7Control7GetNavXEv>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	74fb      	strb	r3, [r7, #19]
		if (this->maxXNav < temp1)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005dde:	7cfa      	ldrb	r2, [r7, #19]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d903      	bls.n	8005dec <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x8c>
		{
			this->maxXNav = temp1;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	7cfa      	ldrb	r2, [r7, #19]
 8005de8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		}
		temp1 = this->buttons[i].GetNavY();
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6999      	ldr	r1, [r3, #24]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ffa3 	bl	8005d48 <_ZN7Control7GetNavYEv>
 8005e02:	4603      	mov	r3, r0
 8005e04:	74fb      	strb	r3, [r7, #19]
		if (this->maxYNav < temp1)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e0c:	7cfa      	ldrb	r2, [r7, #19]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d903      	bls.n	8005e1a <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xba>
		{
			this->maxYNav = temp1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	7cfa      	ldrb	r2, [r7, #19]
 8005e16:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	for (i = 0; i < btnCount; ++i) {
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	dbca      	blt.n	8005dbe <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x5e>
		}
	}
	for (i = 0; i < pageBtnCount; ++i)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e030      	b.n	8005e90 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x130>
	{
		temp2 = this->pageButtons[i].GetNavX();
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6959      	ldr	r1, [r3, #20]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4613      	mov	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	440b      	add	r3, r1
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff ff76 	bl	8005d30 <_ZN7Control7GetNavXEv>
 8005e44:	4603      	mov	r3, r0
 8005e46:	74bb      	strb	r3, [r7, #18]
		if (this->maxXNav < temp2)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005e4e:	7cba      	ldrb	r2, [r7, #18]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d903      	bls.n	8005e5c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xfc>
		{
			this->maxXNav = temp2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	7cba      	ldrb	r2, [r7, #18]
 8005e58:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		}
		temp2 = this->pageButtons[i].GetNavY();
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6959      	ldr	r1, [r3, #20]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	440b      	add	r3, r1
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ff6b 	bl	8005d48 <_ZN7Control7GetNavYEv>
 8005e72:	4603      	mov	r3, r0
 8005e74:	74bb      	strb	r3, [r7, #18]
		if (this->maxYNav < temp2)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e7c:	7cba      	ldrb	r2, [r7, #18]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d903      	bls.n	8005e8a <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0x12a>
		{
			this->maxYNav = temp2;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	7cba      	ldrb	r2, [r7, #18]
 8005e86:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	for (i = 0; i < pageBtnCount; ++i)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	429a      	cmp	r2, r3
 8005e96:	dbca      	blt.n	8005e2e <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoni+0xce>
		}
	}
}
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	0801212c 	.word	0x0801212c

08005ea8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari>:

Page::Page(
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	71fb      	strb	r3, [r7, #7]
		int btnCount,
		PageButton *pageBtns,
		int pageBtnCount,
		ProgressBar *progBars,
		int pbCount
	): Component(nxt, id)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	79fa      	ldrb	r2, [r7, #7]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fb fa02 	bl	80012c8 <_ZN9ComponentC1EP7Nextionh>
 8005ec4:	4a43      	ldr	r2, [pc, #268]	@ (8005fd4 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x12c>)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]
{
	this->buttons = btns;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	619a      	str	r2, [r3, #24]
	this->pageButtons = pageBtns;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	615a      	str	r2, [r3, #20]
	this->progBars = progBars;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eda:	61da      	str	r2, [r3, #28]
	this->btnCount = btnCount;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a3a      	ldr	r2, [r7, #32]
 8005ee0:	621a      	str	r2, [r3, #32]
	this->pageBtnCount = pageBtnCount;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ee6:	625a      	str	r2, [r3, #36]	@ 0x24
	this->pbCount = pbCount;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eec:	629a      	str	r2, [r3, #40]	@ 0x28

	this->CurrentControl = &btns[0];
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	611a      	str	r2, [r3, #16]

	uint8_t temp1 = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	74bb      	strb	r3, [r7, #18]
	for (int i = 0; i < btnCount; ++i) {
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e05f      	b.n	8005fc2 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x11a>
		temp1 = this->buttons[i].GetNavX();
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6999      	ldr	r1, [r3, #24]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff ff0c 	bl	8005d30 <_ZN7Control7GetNavXEv>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	74fb      	strb	r3, [r7, #19]
		temp2 = this->pageButtons[i].GetNavX();
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6959      	ldr	r1, [r3, #20]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4613      	mov	r3, r2
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	4413      	add	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	440b      	add	r3, r1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff feff 	bl	8005d30 <_ZN7Control7GetNavXEv>
 8005f32:	4603      	mov	r3, r0
 8005f34:	74bb      	strb	r3, [r7, #18]
		if (this->maxXNav < temp1)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005f3c:	7cfa      	ldrb	r2, [r7, #19]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d904      	bls.n	8005f4c <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xa4>
		{
			this->maxXNav = temp1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	7cfa      	ldrb	r2, [r7, #19]
 8005f46:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8005f4a:	e009      	b.n	8005f60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xb8>
		}
		else if (this->maxXNav < temp2)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005f52:	7cba      	ldrb	r2, [r7, #18]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d903      	bls.n	8005f60 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0xb8>
		{
			this->maxXNav = temp2;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	7cba      	ldrb	r2, [r7, #18]
 8005f5c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		}
		temp1 = this->buttons[i].GetNavY();
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6999      	ldr	r1, [r3, #24]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fee9 	bl	8005d48 <_ZN7Control7GetNavYEv>
 8005f76:	4603      	mov	r3, r0
 8005f78:	74fb      	strb	r3, [r7, #19]
		temp2 = this->pageButtons[i].GetNavY();
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6959      	ldr	r1, [r3, #20]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4613      	mov	r3, r2
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	440b      	add	r3, r1
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fedc 	bl	8005d48 <_ZN7Control7GetNavYEv>
 8005f90:	4603      	mov	r3, r0
 8005f92:	74bb      	strb	r3, [r7, #18]
		if (this->maxYNav < temp1)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f9a:	7cfa      	ldrb	r2, [r7, #19]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d903      	bls.n	8005fa8 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x100>
		{
			this->maxYNav = temp1;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	7cfa      	ldrb	r2, [r7, #19]
 8005fa4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		}
		if (this->maxYNav < temp2)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fae:	7cba      	ldrb	r2, [r7, #18]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d903      	bls.n	8005fbc <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x114>
		{
			this->maxYNav = temp2;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	7cba      	ldrb	r2, [r7, #18]
 8005fb8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	for (int i = 0; i < btnCount; ++i) {
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	db9b      	blt.n	8005f02 <_ZN4PageC1EP7NextionhP6ButtoniP10PageButtoniP11ProgressBari+0x5a>
		}
	}
}
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	0801212c 	.word	0x0801212c

08005fd8 <_ZN4PageD1Ev>:


Page::~Page()
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	4a46      	ldr	r2, [pc, #280]	@ (80060fc <_ZN4PageD1Ev+0x124>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
{
	delete[] this->buttons;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d024      	beq.n	8006038 <_ZN4PageD1Ev+0x60>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	3b04      	subs	r3, #4
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	18cc      	adds	r4, r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	429c      	cmp	r4, r3
 800600a:	d005      	beq.n	8006018 <_ZN4PageD1Ev+0x40>
 800600c:	3c18      	subs	r4, #24
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4620      	mov	r0, r4
 8006014:	4798      	blx	r3
 8006016:	e7f5      	b.n	8006004 <_ZN4PageD1Ev+0x2c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f1a3 0008 	sub.w	r0, r3, #8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	3b04      	subs	r3, #4
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	3308      	adds	r3, #8
 8006032:	4619      	mov	r1, r3
 8006034:	f009 fab7 	bl	800f5a6 <_ZdaPvj>
	delete[] this->pageButtons;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d024      	beq.n	800608a <_ZN4PageD1Ev+0xb2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6959      	ldr	r1, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	3b04      	subs	r3, #4
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	18cc      	adds	r4, r1, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	429c      	cmp	r4, r3
 800605c:	d005      	beq.n	800606a <_ZN4PageD1Ev+0x92>
 800605e:	3c18      	subs	r4, #24
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4620      	mov	r0, r4
 8006066:	4798      	blx	r3
 8006068:	e7f5      	b.n	8006056 <_ZN4PageD1Ev+0x7e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f1a3 0008 	sub.w	r0, r3, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	3b04      	subs	r3, #4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	3308      	adds	r3, #8
 8006084:	4619      	mov	r1, r3
 8006086:	f009 fa8e 	bl	800f5a6 <_ZdaPvj>
	delete[] this->progBars;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d024      	beq.n	80060dc <_ZN4PageD1Ev+0x104>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69d9      	ldr	r1, [r3, #28]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	3b04      	subs	r3, #4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	18cc      	adds	r4, r1, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	429c      	cmp	r4, r3
 80060ae:	d005      	beq.n	80060bc <_ZN4PageD1Ev+0xe4>
 80060b0:	3c14      	subs	r4, #20
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4620      	mov	r0, r4
 80060b8:	4798      	blx	r3
 80060ba:	e7f5      	b.n	80060a8 <_ZN4PageD1Ev+0xd0>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f1a3 0008 	sub.w	r0, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	3b04      	subs	r3, #4
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	3308      	adds	r3, #8
 80060d6:	4619      	mov	r1, r3
 80060d8:	f009 fa65 	bl	800f5a6 <_ZdaPvj>
	this->CurrentControl = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	611a      	str	r2, [r3, #16]
	this->nxt = NULL;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fd92 	bl	8005c14 <_ZN9ComponentD1Ev>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0801212c 	.word	0x0801212c

08006100 <_ZN4PageD0Ev>:
Page::~Page()
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
}
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff65 	bl	8005fd8 <_ZN4PageD1Ev>
 800610e:	2130      	movs	r1, #48	@ 0x30
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f009 fa44 	bl	800f59e <_ZdlPvj>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <_ZN4Page8NavigateEaa>:

void Page::Navigate(int8_t x, int8_t y)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
 800612c:	4613      	mov	r3, r2
 800612e:	70bb      	strb	r3, [r7, #2]
	int8_t tempX = x + this->currentXNav;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	4413      	add	r3, r2
 800613a:	b2db      	uxtb	r3, r3
 800613c:	72fb      	strb	r3, [r7, #11]
	int8_t tempY = y + this->currentYNav;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8006144:	78bb      	ldrb	r3, [r7, #2]
 8006146:	4413      	add	r3, r2
 8006148:	b2db      	uxtb	r3, r3
 800614a:	72bb      	strb	r3, [r7, #10]
	if (tempX > this->maxXNav || tempX < 0)
 800614c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8006156:	4293      	cmp	r3, r2
 8006158:	dc03      	bgt.n	8006162 <_ZN4Page8NavigateEaa+0x42>
 800615a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800615e:	2b00      	cmp	r3, #0
 8006160:	da0c      	bge.n	800617c <_ZN4Page8NavigateEaa+0x5c>
	{
		this->currentXNav = this->WrapXNav ? 0 : this->maxXNav;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7b1b      	ldrb	r3, [r3, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <_ZN4Page8NavigateEaa+0x4e>
 800616a:	2200      	movs	r2, #0
 800616c:	e002      	b.n	8006174 <_ZN4Page8NavigateEaa+0x54>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800617a:	e003      	b.n	8006184 <_ZN4Page8NavigateEaa+0x64>
	}
	else
	{
		this->currentXNav = tempX;
 800617c:	7afa      	ldrb	r2, [r7, #11]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}
	if (tempY > this->maxYNav || tempY < 0)
 8006184:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 800618e:	4293      	cmp	r3, r2
 8006190:	dc03      	bgt.n	800619a <_ZN4Page8NavigateEaa+0x7a>
 8006192:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da0c      	bge.n	80061b4 <_ZN4Page8NavigateEaa+0x94>
	{
		this->currentYNav = this->WrapYNav ? 0 : this->maxYNav;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7b5b      	ldrb	r3, [r3, #13]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <_ZN4Page8NavigateEaa+0x86>
 80061a2:	2200      	movs	r2, #0
 80061a4:	e002      	b.n	80061ac <_ZN4Page8NavigateEaa+0x8c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80061b2:	e003      	b.n	80061bc <_ZN4Page8NavigateEaa+0x9c>
	}
	else
	{
		this->currentYNav = tempY;
 80061b4:	7aba      	ldrb	r2, [r7, #10]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	}
	int i;
	for (i = 0; i < this->btnCount; ++i) {
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e04b      	b.n	800625a <_ZN4Page8NavigateEaa+0x13a>
		if (this->buttons[i].CheckNav(this->currentXNav, this->currentYNav))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4613      	mov	r3, r2
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	4413      	add	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	440b      	add	r3, r1
 80061d2:	4618      	mov	r0, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	332d      	adds	r3, #45	@ 0x2d
 80061de:	461a      	mov	r2, r3
 80061e0:	f7ff fd8b 	bl	8005cfa <_ZN7Control8CheckNavERhS0_>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01f      	beq.n	800622a <_ZN4Page8NavigateEaa+0x10a>
		{
			this->buttons[i].SetNav();
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4613      	mov	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	4413      	add	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	440b      	add	r3, r1
 80061fa:	4618      	mov	r0, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6999      	ldr	r1, [r3, #24]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4613      	mov	r3, r2
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3310      	adds	r3, #16
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4798      	blx	r3
			this->CurrentControl = &this->buttons[i];
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6999      	ldr	r1, [r3, #24]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4613      	mov	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4413      	add	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	18ca      	adds	r2, r1, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	611a      	str	r2, [r3, #16]
 8006228:	e014      	b.n	8006254 <_ZN4Page8NavigateEaa+0x134>
		}
		else
		{
			this->buttons[i].ClearNav();
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4613      	mov	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4413      	add	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	440b      	add	r3, r1
 800623a:	4618      	mov	r0, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6999      	ldr	r1, [r3, #24]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4613      	mov	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4413      	add	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	440b      	add	r3, r1
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4798      	blx	r3
	for (i = 0; i < this->btnCount; ++i) {
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	dbae      	blt.n	80061c2 <_ZN4Page8NavigateEaa+0xa2>
		}
	}
	for (i = 0; i < this->pageBtnCount; ++i) {
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e04b      	b.n	8006302 <_ZN4Page8NavigateEaa+0x1e2>
		if (this->pageButtons[i].CheckNav(currentXNav, currentYNav))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6959      	ldr	r1, [r3, #20]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4613      	mov	r3, r2
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	440b      	add	r3, r1
 800627a:	4618      	mov	r0, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	332d      	adds	r3, #45	@ 0x2d
 8006286:	461a      	mov	r2, r3
 8006288:	f7ff fd37 	bl	8005cfa <_ZN7Control8CheckNavERhS0_>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01f      	beq.n	80062d2 <_ZN4Page8NavigateEaa+0x1b2>
		{
			this->pageButtons[i].SetNav();
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6959      	ldr	r1, [r3, #20]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	4413      	add	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	440b      	add	r3, r1
 80062a2:	4618      	mov	r0, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6959      	ldr	r1, [r3, #20]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4613      	mov	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	4413      	add	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	440b      	add	r3, r1
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3310      	adds	r3, #16
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4798      	blx	r3
			this->CurrentControl = &this->pageButtons[i];
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6959      	ldr	r1, [r3, #20]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4613      	mov	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	4413      	add	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	18ca      	adds	r2, r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	611a      	str	r2, [r3, #16]
 80062d0:	e014      	b.n	80062fc <_ZN4Page8NavigateEaa+0x1dc>
		}
		else
		{
			this->pageButtons[i].ClearNav();
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6959      	ldr	r1, [r3, #20]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4613      	mov	r3, r2
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	4413      	add	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	440b      	add	r3, r1
 80062e2:	4618      	mov	r0, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6959      	ldr	r1, [r3, #20]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4613      	mov	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4413      	add	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	440b      	add	r3, r1
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3314      	adds	r3, #20
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4798      	blx	r3
	for (i = 0; i < this->pageBtnCount; ++i) {
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	dbae      	blt.n	800626a <_ZN4Page8NavigateEaa+0x14a>
		}
	}
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <_ZN4Page4InitEv>:

void Page::Init()
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
	this->nxt->SetPage(ID);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	791b      	ldrb	r3, [r3, #4]
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fc ff25 	bl	8003178 <_ZN7Nextion7SetPageEh>
	this->ResetNavigation();
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f84d 	bl	80063ce <_ZN4Page15ResetNavigationEv>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <_ZN4Page3ActEv>:

void Page::Act()
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	this->CurrentControl->Act();
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	461a      	mov	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <_ZN4Page11FindControlEh>:

Control* Page::FindControl(uint8_t id)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < this->btnCount; ++i) {
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e021      	b.n	80063b6 <_ZN4Page11FindControlEh+0x56>
		if (this->buttons[i].ID == id)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6999      	ldr	r1, [r3, #24]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	440b      	add	r3, r1
 8006382:	791b      	ldrb	r3, [r3, #4]
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	429a      	cmp	r2, r3
 8006388:	d112      	bne.n	80063b0 <_ZN4Page11FindControlEh+0x50>
		{
			this->CurrentControl = &this->buttons[i];
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6999      	ldr	r1, [r3, #24]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4613      	mov	r3, r2
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	4413      	add	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	18ca      	adds	r2, r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	611a      	str	r2, [r3, #16]
			return &this->buttons[i];
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6999      	ldr	r1, [r3, #24]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4613      	mov	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	4413      	add	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	440b      	add	r3, r1
 80063ae:	e008      	b.n	80063c2 <_ZN4Page11FindControlEh+0x62>
	for (int i = 0; i < this->btnCount; ++i) {
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	dbd8      	blt.n	8006372 <_ZN4Page11FindControlEh+0x12>
		}
	}
	return NULL;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <_ZN4Page15ResetNavigationEv>:

void Page::ResetNavigation()
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
	this->CurrentControl = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	611a      	str	r2, [r3, #16]
	this->Navigate(0, 0);
 80063dc:	2200      	movs	r2, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fe9d 	bl	8006120 <_ZN4Page8NavigateEaa>
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <_ZN10PageButtonD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/PageButton.h>

PageButton::~PageButton()
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4a05      	ldr	r2, [pc, #20]	@ (8006410 <_ZN10PageButtonD1Ev+0x20>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
{
}
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fc27 	bl	8005c54 <_ZN7ControlD1Ev>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08012140 	.word	0x08012140

08006414 <_ZN10PageButtonD0Ev>:
PageButton::~PageButton()
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
}
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ffe7 	bl	80063f0 <_ZN10PageButtonD1Ev>
 8006422:	2118      	movs	r1, #24
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f009 f8ba 	bl	800f59e <_ZdlPvj>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN10PageButton11UpdateStateEv>:
{
	this->IsActive = press;
}

void PageButton::UpdateState()
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	this->nxt->SetClick(ID, IsActive);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6898      	ldr	r0, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7919      	ldrb	r1, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	795b      	ldrb	r3, [r3, #5]
 8006448:	461a      	mov	r2, r3
 800644a:	f7fc fec7 	bl	80031dc <_ZN7Nextion8SetClickEhb>
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <_ZN10PageButton3ActEv>:

void PageButton::Act()
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
	this->callback(this->pageID);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	7c92      	ldrb	r2, [r2, #18]
 8006466:	4610      	mov	r0, r2
 8006468:	4798      	blx	r3
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <_ZN11ProgressBarD1Ev>:
 *      Author: Daxxn
 */

#include <Screen/ProgressBar.h>

ProgressBar::~ProgressBar()
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	4a05      	ldr	r2, [pc, #20]	@ (8006494 <_ZN11ProgressBarD1Ev+0x20>)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
{
}
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fbe5 	bl	8005c54 <_ZN7ControlD1Ev>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	08012160 	.word	0x08012160

08006498 <_ZN11ProgressBarD0Ev>:
ProgressBar::~ProgressBar()
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
}
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ffe7 	bl	8006474 <_ZN11ProgressBarD1Ev>
 80064a6:	2114      	movs	r1, #20
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f009 f878 	bl	800f59e <_ZdlPvj>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZN11ProgressBar11UpdateStateEv>:

void ProgressBar::UpdateState()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	this->nxt->SetProgressBar(ID, value);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6898      	ldr	r0, [r3, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	7919      	ldrb	r1, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7c9b      	ldrb	r3, [r3, #18]
 80064cc:	461a      	mov	r2, r3
 80064ce:	f7fc fe69 	bl	80031a4 <_ZN7Nextion14SetProgressBarEhh>
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80064dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064e0:	480d      	ldr	r0, [pc, #52]	@ (8006518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80064e2:	490e      	ldr	r1, [pc, #56]	@ (800651c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80064e4:	4a0e      	ldr	r2, [pc, #56]	@ (8006520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064e8:	e002      	b.n	80064f0 <LoopCopyDataInit>

080064ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064ee:	3304      	adds	r3, #4

080064f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064f4:	d3f9      	bcc.n	80064ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80064fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064fc:	e001      	b.n	8006502 <LoopFillZerobss>

080064fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006500:	3204      	adds	r2, #4

08006502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006504:	d3fb      	bcc.n	80064fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006506:	f7ff fb1d 	bl	8005b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800650a:	f00b f951 	bl	80117b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800650e:	f7fd fce3 	bl	8003ed8 <main>
  bx  lr    
 8006512:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006514:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8006518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800651c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006520:	080123ec 	.word	0x080123ec
  ldr r2, =_sbss
 8006524:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8006528:	20001720 	.word	0x20001720

0800652c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800652c:	e7fe      	b.n	800652c <CAN1_RX0_IRQHandler>
	...

08006530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006534:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <HAL_Init+0x40>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a0d      	ldr	r2, [pc, #52]	@ (8006570 <HAL_Init+0x40>)
 800653a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800653e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006540:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <HAL_Init+0x40>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a0a      	ldr	r2, [pc, #40]	@ (8006570 <HAL_Init+0x40>)
 8006546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800654a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800654c:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <HAL_Init+0x40>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a07      	ldr	r2, [pc, #28]	@ (8006570 <HAL_Init+0x40>)
 8006552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006558:	2003      	movs	r0, #3
 800655a:	f000 fe71 	bl	8007240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800655e:	200f      	movs	r0, #15
 8006560:	f000 f808 	bl	8006574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006564:	f7fe fc32 	bl	8004dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40023c00 	.word	0x40023c00

08006574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800657c:	4b12      	ldr	r3, [pc, #72]	@ (80065c8 <HAL_InitTick+0x54>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <HAL_InitTick+0x58>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	4619      	mov	r1, r3
 8006586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800658a:	fbb3 f3f1 	udiv	r3, r3, r1
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fe89 	bl	80072aa <HAL_SYSTICK_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e00e      	b.n	80065c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b0f      	cmp	r3, #15
 80065a6:	d80a      	bhi.n	80065be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065a8:	2200      	movs	r2, #0
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	f000 fe51 	bl	8007256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065b4:	4a06      	ldr	r2, [pc, #24]	@ (80065d0 <HAL_InitTick+0x5c>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000004 	.word	0x20000004
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	20000008 	.word	0x20000008

080065d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  return uwTick;
 80065d8:	4b03      	ldr	r3, [pc, #12]	@ (80065e8 <HAL_GetTick+0x14>)
 80065da:	681b      	ldr	r3, [r3, #0]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	200015bc 	.word	0x200015bc

080065ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065f4:	f7ff ffee 	bl	80065d4 <HAL_GetTick>
 80065f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d005      	beq.n	8006612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006606:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <HAL_Delay+0x44>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006612:	bf00      	nop
 8006614:	f7ff ffde 	bl	80065d4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d8f7      	bhi.n	8006614 <HAL_Delay+0x28>
  {
  }
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	2000000c 	.word	0x2000000c

08006634 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e04a      	b.n	80066e0 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d120      	bne.n	8006694 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <HAL_ADC_Init+0xb4>)
 8006656:	649a      	str	r2, [r3, #72]	@ 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a24      	ldr	r2, [pc, #144]	@ (80066ec <HAL_ADC_Init+0xb8>)
 800665c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a23      	ldr	r2, [pc, #140]	@ (80066f0 <HAL_ADC_Init+0xbc>)
 8006662:	651a      	str	r2, [r3, #80]	@ 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a23      	ldr	r2, [pc, #140]	@ (80066f4 <HAL_ADC_Init+0xc0>)
 8006668:	655a      	str	r2, [r3, #84]	@ 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <HAL_ADC_Init+0xc4>)
 800666e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (hadc->MspInitCallback == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a20      	ldr	r2, [pc, #128]	@ (80066fc <HAL_ADC_Init+0xc8>)
 800667c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d118      	bne.n	80066d2 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80066a8:	f023 0302 	bic.w	r3, r3, #2
 80066ac:	f043 0202 	orr.w	r2, r3, #2
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb67 	bl	8006d88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c4:	f023 0303 	bic.w	r3, r3, #3
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80066d0:	e001      	b.n	80066d6 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	08003ec5 	.word	0x08003ec5
 80066ec:	08006b09 	.word	0x08006b09
 80066f0:	08006b1d 	.word	0x08006b1d
 80066f4:	08006b31 	.word	0x08006b31
 80066f8:	0800708d 	.word	0x0800708d
 80066fc:	08004e29 	.word	0x08004e29

08006700 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d04a      	beq.n	80067cc <HAL_ADC_IRQHandler+0xcc>
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d047      	beq.n	80067cc <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d105      	bne.n	8006754 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d12b      	bne.n	80067ba <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006766:	2b00      	cmp	r3, #0
 8006768:	d127      	bne.n	80067ba <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006782:	2b00      	cmp	r3, #0
 8006784:	d119      	bne.n	80067ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0220 	bic.w	r2, r2, #32
 8006794:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d105      	bne.n	80067ba <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	f043 0201 	orr.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f06f 0212 	mvn.w	r2, #18
 80067ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067da:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d058      	beq.n	8006894 <HAL_ADC_IRQHandler+0x194>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d055      	beq.n	8006894 <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d139      	bne.n	8006882 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006818:	2b00      	cmp	r3, #0
 800681a:	d006      	beq.n	800682a <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006826:	2b00      	cmp	r3, #0
 8006828:	d12b      	bne.n	8006882 <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006834:	2b00      	cmp	r3, #0
 8006836:	d124      	bne.n	8006882 <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006842:	2b00      	cmp	r3, #0
 8006844:	d11d      	bne.n	8006882 <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800684a:	2b00      	cmp	r3, #0
 800684c:	d119      	bne.n	8006882 <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800685c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687a:	f043 0201 	orr.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f06f 020c 	mvn.w	r2, #12
 8006892:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <HAL_ADC_IRQHandler+0x1dc>
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10e      	bne.n	80068dc <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0201 	mvn.w	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068ea:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <HAL_ADC_IRQHandler+0x220>
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fc:	f043 0202 	orr.w	r2, r3, #2
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0220 	mvn.w	r2, #32
 800690c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0220 	mvn.w	r2, #32
 800691e:	601a      	str	r2, [r3, #0]
  }
}
 8006920:	bf00      	nop
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_ADC_Start_DMA+0x1e>
 8006942:	2302      	movs	r3, #2
 8006944:	e0ce      	b.n	8006ae4 <HAL_ADC_Start_DMA+0x1bc>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d018      	beq.n	800698e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800696c:	4b5f      	ldr	r3, [pc, #380]	@ (8006aec <HAL_ADC_Start_DMA+0x1c4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5f      	ldr	r2, [pc, #380]	@ (8006af0 <HAL_ADC_Start_DMA+0x1c8>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	0c9a      	lsrs	r2, r3, #18
 8006978:	4613      	mov	r3, r2
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4413      	add	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006980:	e002      	b.n	8006988 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3b01      	subs	r3, #1
 8006986:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f9      	bne.n	8006982 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800699c:	d107      	bne.n	80069ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	f040 8086 	bne.w	8006aca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80069e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fc:	d106      	bne.n	8006a0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a02:	f023 0206 	bic.w	r2, r3, #6
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	645a      	str	r2, [r3, #68]	@ 0x44
 8006a0a:	e002      	b.n	8006a12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a1a:	4b36      	ldr	r3, [pc, #216]	@ (8006af4 <HAL_ADC_Start_DMA+0x1cc>)
 8006a1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	4a35      	ldr	r2, [pc, #212]	@ (8006af8 <HAL_ADC_Start_DMA+0x1d0>)
 8006a24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	4a34      	ldr	r2, [pc, #208]	@ (8006afc <HAL_ADC_Start_DMA+0x1d4>)
 8006a2c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	4a33      	ldr	r2, [pc, #204]	@ (8006b00 <HAL_ADC_Start_DMA+0x1d8>)
 8006a34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006a3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006a4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	334c      	adds	r3, #76	@ 0x4c
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f000 fcf2 	bl	8007458 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10f      	bne.n	8006aa0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d129      	bne.n	8006ae2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	e020      	b.n	8006ae2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	@ (8006b04 <HAL_ADC_Start_DMA+0x1dc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d11b      	bne.n	8006ae2 <HAL_ADC_Start_DMA+0x1ba>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d114      	bne.n	8006ae2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006ac6:	609a      	str	r2, [r3, #8]
 8006ac8:	e00b      	b.n	8006ae2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ace:	f043 0210 	orr.w	r2, r3, #16
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000004 	.word	0x20000004
 8006af0:	431bde83 	.word	0x431bde83
 8006af4:	40012300 	.word	0x40012300
 8006af8:	08006f81 	.word	0x08006f81
 8006afc:	0800703f 	.word	0x0800703f
 8006b00:	0800705d 	.word	0x0800705d
 8006b04:	40012000 	.word	0x40012000

08006b08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x1c>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e105      	b.n	8006d6c <HAL_ADC_ConfigChannel+0x228>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b09      	cmp	r3, #9
 8006b6e:	d925      	bls.n	8006bbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68d9      	ldr	r1, [r3, #12]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4613      	mov	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4413      	add	r3, r2
 8006b84:	3b1e      	subs	r3, #30
 8006b86:	2207      	movs	r2, #7
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	43da      	mvns	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	400a      	ands	r2, r1
 8006b94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68d9      	ldr	r1, [r3, #12]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	4603      	mov	r3, r0
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4403      	add	r3, r0
 8006bae:	3b1e      	subs	r3, #30
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e022      	b.n	8006c02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6919      	ldr	r1, [r3, #16]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	2207      	movs	r2, #7
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	400a      	ands	r2, r1
 8006bde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6919      	ldr	r1, [r3, #16]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4403      	add	r3, r0
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b06      	cmp	r3, #6
 8006c08:	d824      	bhi.n	8006c54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	3b05      	subs	r3, #5
 8006c1c:	221f      	movs	r2, #31
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	43da      	mvns	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	400a      	ands	r2, r1
 8006c2a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4618      	mov	r0, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	3b05      	subs	r3, #5
 8006c46:	fa00 f203 	lsl.w	r2, r0, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c52:	e04c      	b.n	8006cee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d824      	bhi.n	8006ca6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3b23      	subs	r3, #35	@ 0x23
 8006c6e:	221f      	movs	r2, #31
 8006c70:	fa02 f303 	lsl.w	r3, r2, r3
 8006c74:	43da      	mvns	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	400a      	ands	r2, r1
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	3b23      	subs	r3, #35	@ 0x23
 8006c98:	fa00 f203 	lsl.w	r2, r0, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ca4:	e023      	b.n	8006cee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3b41      	subs	r3, #65	@ 0x41
 8006cb8:	221f      	movs	r2, #31
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	43da      	mvns	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	400a      	ands	r2, r1
 8006cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	3b41      	subs	r3, #65	@ 0x41
 8006ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cee:	4b22      	ldr	r3, [pc, #136]	@ (8006d78 <HAL_ADC_ConfigChannel+0x234>)
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a21      	ldr	r2, [pc, #132]	@ (8006d7c <HAL_ADC_ConfigChannel+0x238>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d109      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x1cc>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b12      	cmp	r3, #18
 8006d02:	d105      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a19      	ldr	r2, [pc, #100]	@ (8006d7c <HAL_ADC_ConfigChannel+0x238>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d123      	bne.n	8006d62 <HAL_ADC_ConfigChannel+0x21e>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d003      	beq.n	8006d2a <HAL_ADC_ConfigChannel+0x1e6>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b11      	cmp	r3, #17
 8006d28:	d11b      	bne.n	8006d62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d111      	bne.n	8006d62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d3e:	4b10      	ldr	r3, [pc, #64]	@ (8006d80 <HAL_ADC_ConfigChannel+0x23c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a10      	ldr	r2, [pc, #64]	@ (8006d84 <HAL_ADC_ConfigChannel+0x240>)
 8006d44:	fba2 2303 	umull	r2, r3, r2, r3
 8006d48:	0c9a      	lsrs	r2, r3, #18
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d54:	e002      	b.n	8006d5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f9      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	40012300 	.word	0x40012300
 8006d7c:	40012000 	.word	0x40012000
 8006d80:	20000004 	.word	0x20000004
 8006d84:	431bde83 	.word	0x431bde83

08006d88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d90:	4b79      	ldr	r3, [pc, #484]	@ (8006f78 <ADC_Init+0x1f0>)
 8006d92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6859      	ldr	r1, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6859      	ldr	r1, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6899      	ldr	r1, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	4a58      	ldr	r2, [pc, #352]	@ (8006f7c <ADC_Init+0x1f4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d022      	beq.n	8006e66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6899      	ldr	r1, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]
 8006e64:	e00f      	b.n	8006e86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006e84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0202 	bic.w	r2, r2, #2
 8006e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6899      	ldr	r1, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7e1b      	ldrb	r3, [r3, #24]
 8006ea0:	005a      	lsls	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01b      	beq.n	8006eec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ec2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006ed2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	035a      	lsls	r2, r3, #13
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	e007      	b.n	8006efc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	051a      	lsls	r2, r3, #20
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6899      	ldr	r1, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f3e:	025a      	lsls	r2, r3, #9
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6899      	ldr	r1, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	029a      	lsls	r2, r3, #10
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	609a      	str	r2, [r3, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012300 	.word	0x40012300
 8006f7c:	0f000001 	.word	0x0f000001

08006f80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f92:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d13d      	bne.n	8007016 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d12b      	bne.n	800700c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d127      	bne.n	800700c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d006      	beq.n	8006fd8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d119      	bne.n	800700c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0220 	bic.w	r2, r2, #32
 8006fe6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007014:	e00f      	b.n	8007036 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	4798      	blx	r3
}
 800702a:	e004      	b.n	8007036 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2240      	movs	r2, #64	@ 0x40
 800706e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007074:	f043 0204 	orr.w	r2, r3, #4
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070b0:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <__NVIC_SetPriorityGrouping+0x44>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070bc:	4013      	ands	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070d2:	4a04      	ldr	r2, [pc, #16]	@ (80070e4 <__NVIC_SetPriorityGrouping+0x44>)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	60d3      	str	r3, [r2, #12]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000ed00 	.word	0xe000ed00

080070e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070ec:	4b04      	ldr	r3, [pc, #16]	@ (8007100 <__NVIC_GetPriorityGrouping+0x18>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	0a1b      	lsrs	r3, r3, #8
 80070f2:	f003 0307 	and.w	r3, r3, #7
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e000ed00 	.word	0xe000ed00

08007104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	2b00      	cmp	r3, #0
 8007114:	db0b      	blt.n	800712e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	f003 021f 	and.w	r2, r3, #31
 800711c:	4907      	ldr	r1, [pc, #28]	@ (800713c <__NVIC_EnableIRQ+0x38>)
 800711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	2001      	movs	r0, #1
 8007126:	fa00 f202 	lsl.w	r2, r0, r2
 800712a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e100 	.word	0xe000e100

08007140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800714c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007150:	2b00      	cmp	r3, #0
 8007152:	db0a      	blt.n	800716a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	490c      	ldr	r1, [pc, #48]	@ (800718c <__NVIC_SetPriority+0x4c>)
 800715a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715e:	0112      	lsls	r2, r2, #4
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	440b      	add	r3, r1
 8007164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007168:	e00a      	b.n	8007180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4908      	ldr	r1, [pc, #32]	@ (8007190 <__NVIC_SetPriority+0x50>)
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	3b04      	subs	r3, #4
 8007178:	0112      	lsls	r2, r2, #4
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	440b      	add	r3, r1
 800717e:	761a      	strb	r2, [r3, #24]
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	e000e100 	.word	0xe000e100
 8007190:	e000ed00 	.word	0xe000ed00

08007194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007194:	b480      	push	{r7}
 8007196:	b089      	sub	sp, #36	@ 0x24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f1c3 0307 	rsb	r3, r3, #7
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	bf28      	it	cs
 80071b2:	2304      	movcs	r3, #4
 80071b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	3304      	adds	r3, #4
 80071ba:	2b06      	cmp	r3, #6
 80071bc:	d902      	bls.n	80071c4 <NVIC_EncodePriority+0x30>
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3b03      	subs	r3, #3
 80071c2:	e000      	b.n	80071c6 <NVIC_EncodePriority+0x32>
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	43da      	mvns	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	401a      	ands	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071dc:	f04f 31ff 	mov.w	r1, #4294967295
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	fa01 f303 	lsl.w	r3, r1, r3
 80071e6:	43d9      	mvns	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071ec:	4313      	orrs	r3, r2
         );
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3724      	adds	r7, #36	@ 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3b01      	subs	r3, #1
 8007208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800720c:	d301      	bcc.n	8007212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800720e:	2301      	movs	r3, #1
 8007210:	e00f      	b.n	8007232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007212:	4a0a      	ldr	r2, [pc, #40]	@ (800723c <SysTick_Config+0x40>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800721a:	210f      	movs	r1, #15
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	f7ff ff8e 	bl	8007140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007224:	4b05      	ldr	r3, [pc, #20]	@ (800723c <SysTick_Config+0x40>)
 8007226:	2200      	movs	r2, #0
 8007228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800722a:	4b04      	ldr	r3, [pc, #16]	@ (800723c <SysTick_Config+0x40>)
 800722c:	2207      	movs	r2, #7
 800722e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	e000e010 	.word	0xe000e010

08007240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ff29 	bl	80070a0 <__NVIC_SetPriorityGrouping>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	4603      	mov	r3, r0
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007268:	f7ff ff3e 	bl	80070e8 <__NVIC_GetPriorityGrouping>
 800726c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	6978      	ldr	r0, [r7, #20]
 8007274:	f7ff ff8e 	bl	8007194 <NVIC_EncodePriority>
 8007278:	4602      	mov	r2, r0
 800727a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff5d 	bl	8007140 <__NVIC_SetPriority>
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	4603      	mov	r3, r0
 8007296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ff31 	bl	8007104 <__NVIC_EnableIRQ>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff ffa2 	bl	80071fc <SysTick_Config>
 80072b8:	4603      	mov	r3, r0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e00e      	b.n	80072f2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	795b      	ldrb	r3, [r3, #5]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d105      	bne.n	80072ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7fd fe57 	bl	8004f98 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007308:	f7ff f964 	bl	80065d4 <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e099      	b.n	800744c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007338:	e00f      	b.n	800735a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800733a:	f7ff f94b 	bl	80065d4 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b05      	cmp	r3, #5
 8007346:	d908      	bls.n	800735a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2203      	movs	r2, #3
 8007352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e078      	b.n	800744c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e8      	bne.n	800733a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4b38      	ldr	r3, [pc, #224]	@ (8007454 <HAL_DMA_Init+0x158>)
 8007374:	4013      	ands	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800739e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d107      	bne.n	80073c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	4313      	orrs	r3, r2
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d117      	bne.n	800741e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00e      	beq.n	800741e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb0f 	bl	8007a24 <DMA_CheckFifoParam>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2240      	movs	r2, #64	@ 0x40
 8007410:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800741a:	2301      	movs	r3, #1
 800741c:	e016      	b.n	800744c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fac6 	bl	80079b8 <DMA_CalcBaseAndBitshift>
 800742c:	4603      	mov	r3, r0
 800742e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007434:	223f      	movs	r2, #63	@ 0x3f
 8007436:	409a      	lsls	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	f010803f 	.word	0xf010803f

08007458 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_DMA_Start_IT+0x26>
 800747a:	2302      	movs	r3, #2
 800747c:	e040      	b.n	8007500 <HAL_DMA_Start_IT+0xa8>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b01      	cmp	r3, #1
 8007490:	d12f      	bne.n	80074f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fa58 	bl	800795c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b0:	223f      	movs	r2, #63	@ 0x3f
 80074b2:	409a      	lsls	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0216 	orr.w	r2, r2, #22
 80074c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e005      	b.n	80074fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074fa:	2302      	movs	r3, #2
 80074fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007514:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007516:	f7ff f85d 	bl	80065d4 <HAL_GetTick>
 800751a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d008      	beq.n	800753a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2280      	movs	r2, #128	@ 0x80
 800752c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e052      	b.n	80075e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0216 	bic.w	r2, r2, #22
 8007548:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007558:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <HAL_DMA_Abort+0x62>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0208 	bic.w	r2, r2, #8
 8007578:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800758a:	e013      	b.n	80075b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800758c:	f7ff f822 	bl	80065d4 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b05      	cmp	r3, #5
 8007598:	d90c      	bls.n	80075b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e015      	b.n	80075e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e4      	bne.n	800758c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075c6:	223f      	movs	r2, #63	@ 0x3f
 80075c8:	409a      	lsls	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d004      	beq.n	8007606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2280      	movs	r2, #128	@ 0x80
 8007600:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e00c      	b.n	8007620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2205      	movs	r2, #5
 800760a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007638:	4b8e      	ldr	r3, [pc, #568]	@ (8007874 <HAL_DMA_IRQHandler+0x248>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a8e      	ldr	r2, [pc, #568]	@ (8007878 <HAL_DMA_IRQHandler+0x24c>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	0a9b      	lsrs	r3, r3, #10
 8007644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800764a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007656:	2208      	movs	r2, #8
 8007658:	409a      	lsls	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01a      	beq.n	8007698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d013      	beq.n	8007698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0204 	bic.w	r2, r2, #4
 800767e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007684:	2208      	movs	r2, #8
 8007686:	409a      	lsls	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007690:	f043 0201 	orr.w	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800769c:	2201      	movs	r2, #1
 800769e:	409a      	lsls	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d012      	beq.n	80076ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ba:	2201      	movs	r2, #1
 80076bc:	409a      	lsls	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	f043 0202 	orr.w	r2, r3, #2
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d2:	2204      	movs	r2, #4
 80076d4:	409a      	lsls	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4013      	ands	r3, r2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d012      	beq.n	8007704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f0:	2204      	movs	r2, #4
 80076f2:	409a      	lsls	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fc:	f043 0204 	orr.w	r2, r3, #4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007708:	2210      	movs	r2, #16
 800770a:	409a      	lsls	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d043      	beq.n	800779c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d03c      	beq.n	800779c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007726:	2210      	movs	r2, #16
 8007728:	409a      	lsls	r2, r3
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d018      	beq.n	800776e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d108      	bne.n	800775c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d024      	beq.n	800779c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
 800775a:	e01f      	b.n	800779c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01b      	beq.n	800779c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
 800776c:	e016      	b.n	800779c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0208 	bic.w	r2, r2, #8
 800778a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a0:	2220      	movs	r2, #32
 80077a2:	409a      	lsls	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 808f 	beq.w	80078cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8087 	beq.w	80078cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c2:	2220      	movs	r2, #32
 80077c4:	409a      	lsls	r2, r3
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b05      	cmp	r3, #5
 80077d4:	d136      	bne.n	8007844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0216 	bic.w	r2, r2, #22
 80077e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695a      	ldr	r2, [r3, #20]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <HAL_DMA_IRQHandler+0x1da>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0208 	bic.w	r2, r2, #8
 8007814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781a:	223f      	movs	r2, #63	@ 0x3f
 800781c:	409a      	lsls	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007836:	2b00      	cmp	r3, #0
 8007838:	d07e      	beq.n	8007938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
        }
        return;
 8007842:	e079      	b.n	8007938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01d      	beq.n	800788e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10d      	bne.n	800787c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007864:	2b00      	cmp	r3, #0
 8007866:	d031      	beq.n	80078cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
 8007870:	e02c      	b.n	80078cc <HAL_DMA_IRQHandler+0x2a0>
 8007872:	bf00      	nop
 8007874:	20000004 	.word	0x20000004
 8007878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d023      	beq.n	80078cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
 800788c:	e01e      	b.n	80078cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0210 	bic.w	r2, r2, #16
 80078aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d032      	beq.n	800793a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d022      	beq.n	8007926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2205      	movs	r2, #5
 80078e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0201 	bic.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3301      	adds	r3, #1
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	429a      	cmp	r2, r3
 8007902:	d307      	bcc.n	8007914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f2      	bne.n	80078f8 <HAL_DMA_IRQHandler+0x2cc>
 8007912:	e000      	b.n	8007916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	e000      	b.n	800793a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007938:	bf00      	nop
    }
  }
}
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800794e:	b2db      	uxtb	r3, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b40      	cmp	r3, #64	@ 0x40
 8007988:	d108      	bne.n	800799c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800799a:	e007      	b.n	80079ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	60da      	str	r2, [r3, #12]
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	3b10      	subs	r3, #16
 80079c8:	4a14      	ldr	r2, [pc, #80]	@ (8007a1c <DMA_CalcBaseAndBitshift+0x64>)
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079d2:	4a13      	ldr	r2, [pc, #76]	@ (8007a20 <DMA_CalcBaseAndBitshift+0x68>)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d909      	bls.n	80079fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	1d1a      	adds	r2, r3, #4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80079f8:	e007      	b.n	8007a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	aaaaaaab 	.word	0xaaaaaaab
 8007a20:	08012178 	.word	0x08012178

08007a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d11f      	bne.n	8007a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d856      	bhi.n	8007af2 <DMA_CheckFifoParam+0xce>
 8007a44:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <DMA_CheckFifoParam+0x28>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a6f 	.word	0x08007a6f
 8007a54:	08007a5d 	.word	0x08007a5d
 8007a58:	08007af3 	.word	0x08007af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d046      	beq.n	8007af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a6c:	e043      	b.n	8007af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a76:	d140      	bne.n	8007afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a7c:	e03d      	b.n	8007afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a86:	d121      	bne.n	8007acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d837      	bhi.n	8007afe <DMA_CheckFifoParam+0xda>
 8007a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <DMA_CheckFifoParam+0x70>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007aab 	.word	0x08007aab
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	08007abd 	.word	0x08007abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	e030      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d025      	beq.n	8007b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aba:	e022      	b.n	8007b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007ac4:	d11f      	bne.n	8007b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007aca:	e01c      	b.n	8007b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d903      	bls.n	8007ada <DMA_CheckFifoParam+0xb6>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d003      	beq.n	8007ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ad8:	e018      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ade:	e015      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00e      	beq.n	8007b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e00b      	b.n	8007b0a <DMA_CheckFifoParam+0xe6>
      break;
 8007af2:	bf00      	nop
 8007af4:	e00a      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007af6:	bf00      	nop
 8007af8:	e008      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007afa:	bf00      	nop
 8007afc:	e006      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007afe:	bf00      	nop
 8007b00:	e004      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007b02:	bf00      	nop
 8007b04:	e002      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8007b06:	bf00      	nop
 8007b08:	e000      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop

08007b1c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e081      	b.n	8007c32 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fd fa4a 	bl	8004fdc <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2224      	movs	r2, #36	@ 0x24
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007b6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b7c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d107      	bne.n	8007b96 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b92:	609a      	str	r2, [r3, #8]
 8007b94:	e006      	b.n	8007ba4 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ba2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d104      	bne.n	8007bb6 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bd8:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	ea42 0103 	orr.w	r1, r2, r3
                          (hfmpi2c->Init.OwnAddress2Masks << 8));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69d9      	ldr	r1, [r3, #28]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <HAL_FMPI2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Master_Transmit(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	461a      	mov	r2, r3
 8007c48:	460b      	mov	r3, r1
 8007c4a:	817b      	strh	r3, [r7, #10]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	f040 80da 	bne.w	8007e12 <HAL_FMPI2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_FMPI2C_Master_Transmit+0x30>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e0d3      	b.n	8007e14 <HAL_FMPI2C_Master_Transmit+0x1d8>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c74:	f7fe fcae 	bl	80065d4 <HAL_GetTick>
 8007c78:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	2319      	movs	r3, #25
 8007c80:	2201      	movs	r2, #1
 8007c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fded 	bl	8008866 <FMPI2C_WaitOnFlagUntilTimeout>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <HAL_FMPI2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e0be      	b.n	8007e14 <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2221      	movs	r2, #33	@ 0x21
 8007c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MASTER;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hfmpi2c->XferCount = Size;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	893a      	ldrh	r2, [r7, #8]
 8007cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hfmpi2c->XferISR   = NULL;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2bff      	cmp	r3, #255	@ 0xff
 8007cc6:	d90e      	bls.n	8007ce6 <HAL_FMPI2C_Master_Transmit+0xaa>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	22ff      	movs	r2, #255	@ 0xff
 8007ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	8979      	ldrh	r1, [r7, #10]
 8007cd6:	4b51      	ldr	r3, [pc, #324]	@ (8007e1c <HAL_FMPI2C_Master_Transmit+0x1e0>)
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 ff2e 	bl	8008b40 <FMPI2C_TransferConfig>
 8007ce4:	e06c      	b.n	8007dc0 <HAL_FMPI2C_Master_Transmit+0x184>
                         FMPI2C_GENERATE_START_WRITE);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	8979      	ldrh	r1, [r7, #10]
 8007cf8:	4b48      	ldr	r3, [pc, #288]	@ (8007e1c <HAL_FMPI2C_Master_Transmit+0x1e0>)
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 ff1d 	bl	8008b40 <FMPI2C_TransferConfig>
                         FMPI2C_GENERATE_START_WRITE);
    }

    while (hfmpi2c->XferCount > 0U)
 8007d06:	e05b      	b.n	8007dc0 <HAL_FMPI2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	6a39      	ldr	r1, [r7, #32]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fdea 	bl	80088e6 <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_FMPI2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e07b      	b.n	8007e14 <HAL_FMPI2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d20:	781a      	ldrb	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	625a      	str	r2, [r3, #36]	@ 0x24

      hfmpi2c->XferCount--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hfmpi2c->XferSize--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d034      	beq.n	8007dc0 <HAL_FMPI2C_Master_Transmit+0x184>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d130      	bne.n	8007dc0 <HAL_FMPI2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	2200      	movs	r2, #0
 8007d66:	2180      	movs	r1, #128	@ 0x80
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fd7c 	bl	8008866 <FMPI2C_WaitOnFlagUntilTimeout>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <HAL_FMPI2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e04d      	b.n	8007e14 <HAL_FMPI2C_Master_Transmit+0x1d8>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2bff      	cmp	r3, #255	@ 0xff
 8007d80:	d90e      	bls.n	8007da0 <HAL_FMPI2C_Master_Transmit+0x164>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	22ff      	movs	r2, #255	@ 0xff
 8007d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	8979      	ldrh	r1, [r7, #10]
 8007d90:	2300      	movs	r3, #0
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fed1 	bl	8008b40 <FMPI2C_TransferConfig>
 8007d9e:	e00f      	b.n	8007dc0 <HAL_FMPI2C_Master_Transmit+0x184>
                             FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	8979      	ldrh	r1, [r7, #10]
 8007db2:	2300      	movs	r3, #0
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fec0 	bl	8008b40 <FMPI2C_TransferConfig>
    while (hfmpi2c->XferCount > 0U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d19e      	bne.n	8007d08 <HAL_FMPI2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	6a39      	ldr	r1, [r7, #32]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 fdc9 	bl	8008966 <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <HAL_FMPI2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e01a      	b.n	8007e14 <HAL_FMPI2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2220      	movs	r2, #32
 8007de4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6859      	ldr	r1, [r3, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <HAL_FMPI2C_Master_Transmit+0x1e4>)
 8007df2:	400b      	ands	r3, r1
 8007df4:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <HAL_FMPI2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	80002000 	.word	0x80002000
 8007e20:	fe00e800 	.word	0xfe00e800

08007e24 <HAL_FMPI2C_EV_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_EV_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60bb      	str	r3, [r7, #8]

  /* FMPI2C events treatment -------------------------------------*/
  if (hfmpi2c->XferISR != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_FMPI2C_EV_IRQHandler+0x2c>
  {
    hfmpi2c->XferISR(hfmpi2c, itflags, itsources);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
  }
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_FMPI2C_ER_IRQHandler>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
void HAL_FMPI2C_ER_IRQHandler(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hfmpi2c->Instance->ISR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hfmpi2c->Instance->CR1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* FMPI2C Bus error interrupt occurred ------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00f      	beq.n	8007e9a <HAL_FMPI2C_ER_IRQHandler+0x42>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_BERR) != RESET) && \
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <HAL_FMPI2C_ER_IRQHandler+0x42>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_BERR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e88:	f043 0201 	orr.w	r2, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e98:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00f      	beq.n	8007ec4 <HAL_FMPI2C_ER_IRQHandler+0x6c>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_OVR) != RESET) && \
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <HAL_FMPI2C_ER_IRQHandler+0x6c>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_OVR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb2:	f043 0208 	orr.w	r2, r3, #8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ec2:	61da      	str	r2, [r3, #28]
  }

  /* FMPI2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00f      	beq.n	8007eee <HAL_FMPI2C_ER_IRQHandler+0x96>
      (FMPI2C_CHECK_IT_SOURCE(itsources, FMPI2C_IT_ERRI) != RESET))
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((FMPI2C_CHECK_FLAG(itflags, FMPI2C_FLAG_ARLO) != RESET) && \
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <HAL_FMPI2C_ER_IRQHandler+0x96>
  {
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_ARLO;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007edc:	f043 0202 	orr.w	r2, r3, #2
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hfmpi2c->ErrorCode, misra rule */
  tmperror = hfmpi2c->ErrorCode;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_FMPI2C_ERROR_BERR | HAL_FMPI2C_ERROR_OVR | HAL_FMPI2C_ERROR_ARLO)) !=  HAL_FMPI2C_ERROR_NONE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f003 030b 	and.w	r3, r3, #11
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_FMPI2C_ER_IRQHandler+0xae>
  {
    FMPI2C_ITError(hfmpi2c, tmperror);
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fb77 	bl	80085f4 <FMPI2C_ITError>
  }
}
 8007f06:	bf00      	nop
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_FMPI2C_SlaveTxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveTxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_FMPI2C_SlaveRxCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_SlaveRxCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <HAL_FMPI2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref FMPI2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_FMPI2C_AddrCallback(FMPI2C_HandleTypeDef *hfmpi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
 8007f42:	4613      	mov	r3, r2
 8007f44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AddrCallback() could be implemented in the user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <HAL_FMPI2C_ListenCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ListenCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HAL_FMPI2C_ErrorCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_ErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_ErrorCallback could be implemented in the user file
   */
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <HAL_FMPI2C_AbortCpltCallback>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval None
  */
__weak void HAL_FMPI2C_AbortCpltCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  UNUSED(hfmpi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FMPI2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <FMPI2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_Slave_ISR_IT(struct __FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hfmpi2c->XferOptions;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hfmpi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <FMPI2C_Slave_ISR_IT+0x24>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e0e1      	b.n	8008176 <FMPI2C_Slave_ISR_IT+0x1e8>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <FMPI2C_Slave_ISR_IT+0x48>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_STOPI) != RESET))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_STOPF) != RESET) && \
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <FMPI2C_Slave_ISR_IT+0x48>
  {
    /* Call FMPI2C Slave complete process */
    FMPI2C_ITSlaveCplt(hfmpi2c, tmpITFlags);
 8007fce:	6939      	ldr	r1, [r7, #16]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 f9b5 	bl	8008340 <FMPI2C_ITSlaveCplt>
  }

  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d04b      	beq.n	8008078 <FMPI2C_Slave_ISR_IT+0xea>
      (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_NACKI) != RESET))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
  if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_AF) != RESET) && \
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d046      	beq.n	8008078 <FMPI2C_Slave_ISR_IT+0xea>
  {
    /* Check that FMPI2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hfmpi2c->XferCount == 0U)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d128      	bne.n	8008046 <FMPI2C_Slave_ISR_IT+0xb8>
    {
      if ((hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN) && (tmpoptions == FMPI2C_FIRST_AND_LAST_FRAME))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b28      	cmp	r3, #40	@ 0x28
 8007ffe:	d108      	bne.n	8008012 <FMPI2C_Slave_ISR_IT+0x84>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008006:	d104      	bne.n	8008012 <FMPI2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == FMPI2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call FMPI2C Listen complete process */
        FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 8008008:	6939      	ldr	r1, [r7, #16]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fa9e 	bl	800854c <FMPI2C_ITListenCplt>
 8008010:	e031      	b.n	8008076 <FMPI2C_Slave_ISR_IT+0xe8>
      }
      else if ((hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != FMPI2C_NO_OPTION_FRAME))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b29      	cmp	r3, #41	@ 0x29
 800801c:	d10e      	bne.n	800803c <FMPI2C_Slave_ISR_IT+0xae>
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008024:	d00a      	beq.n	800803c <FMPI2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2210      	movs	r2, #16
 800802c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        FMPI2C_Flush_TXDR(hfmpi2c);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 fbd7 	bl	80087e2 <FMPI2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f926 	bl	8008286 <FMPI2C_ITSlaveSeqCplt>
 800803a:	e01c      	b.n	8008076 <FMPI2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2210      	movs	r2, #16
 8008042:	61da      	str	r2, [r3, #28]
    if (hfmpi2c->XferCount == 0U)
 8008044:	e08f      	b.n	8008166 <FMPI2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2210      	movs	r2, #16
 800804c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008052:	f043 0204 	orr.w	r2, r3, #4
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == FMPI2C_FIRST_FRAME) || (tmpoptions == FMPI2C_NEXT_FRAME))
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <FMPI2C_Slave_ISR_IT+0xda>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008066:	d17e      	bne.n	8008166 <FMPI2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806c:	4619      	mov	r1, r3
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fac0 	bl	80085f4 <FMPI2C_ITError>
    if (hfmpi2c->XferCount == 0U)
 8008074:	e077      	b.n	8008166 <FMPI2C_Slave_ISR_IT+0x1d8>
 8008076:	e076      	b.n	8008166 <FMPI2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d02f      	beq.n	80080e2 <FMPI2C_Slave_ISR_IT+0x154>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_RXI) != RESET))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f003 0304 	and.w	r3, r3, #4
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET) && \
 8008088:	2b00      	cmp	r3, #0
 800808a:	d02a      	beq.n	80080e2 <FMPI2C_Slave_ISR_IT+0x154>
  {
    if (hfmpi2c->XferCount > 0U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d018      	beq.n	80080c8 <FMPI2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a0:	b2d2      	uxtb	r2, r2
 80080a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hfmpi2c->XferSize--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hfmpi2c->XferCount--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hfmpi2c->XferCount == 0U) && \
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d14b      	bne.n	800816a <FMPI2C_Slave_ISR_IT+0x1dc>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080d8:	d047      	beq.n	800816a <FMPI2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != FMPI2C_NO_OPTION_FRAME))
    {
      /* Call FMPI2C Slave Sequential complete process */
      FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f8d3 	bl	8008286 <FMPI2C_ITSlaveSeqCplt>
    if ((hfmpi2c->XferCount == 0U) && \
 80080e0:	e043      	b.n	800816a <FMPI2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <FMPI2C_Slave_ISR_IT+0x172>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_ADDRI) != RESET))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f003 0308 	and.w	r3, r3, #8
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_ADDR) != RESET) && \
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <FMPI2C_Slave_ISR_IT+0x172>
  {
    FMPI2C_ITAddrCplt(hfmpi2c, tmpITFlags);
 80080f6:	6939      	ldr	r1, [r7, #16]
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 f840 	bl	800817e <FMPI2C_ITAddrCplt>
 80080fe:	e035      	b.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
  }
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d030      	beq.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
           (FMPI2C_CHECK_IT_SOURCE(ITSources, FMPI2C_IT_TXI) != RESET))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f003 0302 	and.w	r3, r3, #2
  else if ((FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_TXIS) != RESET) && \
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02b      	beq.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hfmpi2c->XferCount > 0U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d018      	beq.n	8008150 <FMPI2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	625a      	str	r2, [r3, #36]	@ 0x24

      hfmpi2c->XferCount--;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hfmpi2c->XferSize--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800814e:	e00d      	b.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == FMPI2C_NEXT_FRAME) || (tmpoptions == FMPI2C_FIRST_FRAME))
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008156:	d002      	beq.n	800815e <FMPI2C_Slave_ISR_IT+0x1d0>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call FMPI2C Slave Sequential complete process */
        FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f891 	bl	8008286 <FMPI2C_ITSlaveSeqCplt>
 8008164:	e002      	b.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
    if (hfmpi2c->XferCount == 0U)
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <FMPI2C_Slave_ISR_IT+0x1de>
    if ((hfmpi2c->XferCount == 0U) && \
 800816a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <FMPI2C_ITAddrCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITAddrCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) == (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008194:	2b28      	cmp	r3, #40	@ 0x28
 8008196:	d16a      	bne.n	800826e <FMPI2C_ITAddrCplt+0xf0>
  {
    transferdirection = FMPI2C_GET_DIR(hfmpi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	0c1b      	lsrs	r3, r3, #16
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = FMPI2C_GET_ADDR_MATCH(hfmpi2c);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	0c1b      	lsrs	r3, r3, #16
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80081b6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = FMPI2C_GET_OWN_ADDRESS1(hfmpi2c);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = FMPI2C_GET_OWN_ADDRESS2(hfmpi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80081d2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d138      	bne.n	800824e <FMPI2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80081dc:	897b      	ldrh	r3, [r7, #10]
 80081de:	09db      	lsrs	r3, r3, #7
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	89bb      	ldrh	r3, [r7, #12]
 80081e4:	4053      	eors	r3, r2
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f003 0306 	and.w	r3, r3, #6
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d11c      	bne.n	800822a <FMPI2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80081f0:	897b      	ldrh	r3, [r7, #10]
 80081f2:	81bb      	strh	r3, [r7, #12]
        hfmpi2c->AddrEventCount++;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hfmpi2c->AddrEventCount == 2U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008202:	2b02      	cmp	r3, #2
 8008204:	d13b      	bne.n	800827e <FMPI2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hfmpi2c->AddrEventCount = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
          hfmpi2c->AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
#else
          HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 800821c:	89ba      	ldrh	r2, [r7, #12]
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fe87 	bl	8007f36 <HAL_FMPI2C_AddrCallback>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
  }
}
 8008228:	e029      	b.n	800827e <FMPI2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800822a:	893b      	ldrh	r3, [r7, #8]
 800822c:	81bb      	strh	r3, [r7, #12]
        FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 800822e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fcb6 	bl	8008ba4 <FMPI2C_Disable_IRQ>
        __HAL_UNLOCK(hfmpi2c);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8008240:	89ba      	ldrh	r2, [r7, #12]
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff fe75 	bl	8007f36 <HAL_FMPI2C_AddrCallback>
}
 800824c:	e017      	b.n	800827e <FMPI2C_ITAddrCplt+0x100>
      FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT);
 800824e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fca6 	bl	8008ba4 <FMPI2C_Disable_IRQ>
      __HAL_UNLOCK(hfmpi2c);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_FMPI2C_AddrCallback(hfmpi2c, transferdirection, slaveaddrcode);
 8008260:	89ba      	ldrh	r2, [r7, #12]
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff fe65 	bl	8007f36 <HAL_FMPI2C_AddrCallback>
}
 800826c:	e007      	b.n	800827e <FMPI2C_ITAddrCplt+0x100>
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ADDR);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2208      	movs	r2, #8
 8008274:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hfmpi2c);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <FMPI2C_ITSlaveSeqCplt>:
  * @brief  FMPI2C Slave sequential complete process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_ITSlaveSeqCplt(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60fb      	str	r3, [r7, #12]

  /* Reset FMPI2C handle mode */
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <FMPI2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	e00c      	b.n	80082d4 <FMPI2C_ITSlaveSeqCplt+0x4e>
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <FMPI2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_TX_LISTEN)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b29      	cmp	r3, #41	@ 0x29
 80082de:	d112      	bne.n	8008306 <FMPI2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_FMPI2C_STATE_SLAVE_BUSY_TX, keep only HAL_FMPI2C_STATE_LISTEN */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2228      	movs	r2, #40	@ 0x28
 80082e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2221      	movs	r2, #33	@ 0x21
 80082ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_TX_IT);
 80082ee:	2101      	movs	r1, #1
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc57 	bl	8008ba4 <FMPI2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff fe05 	bl	8007f0e <HAL_FMPI2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008304:	e017      	b.n	8008336 <FMPI2C_ITSlaveSeqCplt+0xb0>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX_LISTEN)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008310:	d111      	bne.n	8008336 <FMPI2C_ITSlaveSeqCplt+0xb0>
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2228      	movs	r2, #40	@ 0x28
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2222      	movs	r2, #34	@ 0x22
 800831e:	631a      	str	r2, [r3, #48]	@ 0x30
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT);
 8008320:	2102      	movs	r1, #2
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc3e 	bl	8008ba4 <FMPI2C_Disable_IRQ>
    __HAL_UNLOCK(hfmpi2c);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff fdf6 	bl	8007f22 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <FMPI2C_ITSlaveCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITSlaveCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hfmpi2c->Instance->CR1);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	617b      	str	r3, [r7, #20]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800835c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2220      	movs	r2, #32
 8008364:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_FMPI2C_STATE_BUSY_TX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN))
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	2b21      	cmp	r3, #33	@ 0x21
 800836a:	d002      	beq.n	8008372 <FMPI2C_ITSlaveCplt+0x32>
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b29      	cmp	r3, #41	@ 0x29
 8008370:	d108      	bne.n	8008384 <FMPI2C_ITSlaveCplt+0x44>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_TX_IT);
 8008372:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fc14 	bl	8008ba4 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_TX;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2221      	movs	r2, #33	@ 0x21
 8008380:	631a      	str	r2, [r3, #48]	@ 0x30
 8008382:	e00d      	b.n	80083a0 <FMPI2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_FMPI2C_STATE_BUSY_RX) || (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b22      	cmp	r3, #34	@ 0x22
 8008388:	d002      	beq.n	8008390 <FMPI2C_ITSlaveCplt+0x50>
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	2b2a      	cmp	r3, #42	@ 0x2a
 800838e:	d107      	bne.n	80083a0 <FMPI2C_ITSlaveCplt+0x60>
  {
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT);
 8008390:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc05 	bl	8008ba4 <FMPI2C_Disable_IRQ>
    hfmpi2c->PreviousState = FMPI2C_STATE_SLAVE_BUSY_RX;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2222      	movs	r2, #34	@ 0x22
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hfmpi2c->Instance->CR2 |= FMPI2C_CR2_NACK;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083ae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  FMPI2C_RESET_CR2(hfmpi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6859      	ldr	r1, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b62      	ldr	r3, [pc, #392]	@ (8008544 <FMPI2C_ITSlaveCplt+0x204>)
 80083bc:	400b      	ands	r3, r1
 80083be:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  FMPI2C_Flush_TXDR(hfmpi2c);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa0e 	bl	80087e2 <FMPI2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_TXDMAEN) != RESET)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d013      	beq.n	80083f8 <FMPI2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083de:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmatx != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01f      	beq.n	8008428 <FMPI2C_ITSlaveCplt+0xe8>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmatx);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083f6:	e017      	b.n	8008428 <FMPI2C_ITSlaveCplt+0xe8>
    }
  }
  else if (FMPI2C_CHECK_IT_SOURCE(tmpcr1value, FMPI2C_CR1_RXDMAEN) != RESET)
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d012      	beq.n	8008428 <FMPI2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008410:	601a      	str	r2, [r3, #0]

    if (hfmpi2c->hdmarx != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d006      	beq.n	8008428 <FMPI2C_ITSlaveCplt+0xe8>
    {
      hfmpi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hfmpi2c->hdmarx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(tmpITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d020      	beq.n	8008474 <FMPI2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~FMPI2C_FLAG_RXNE;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f023 0304 	bic.w	r3, r3, #4
 8008438:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hfmpi2c->XferSize > 0U))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00c      	beq.n	8008474 <FMPI2C_ITSlaveCplt+0x134>
    {
      hfmpi2c->XferSize--;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	851a      	strh	r2, [r3, #40]	@ 0x28
      hfmpi2c->XferCount--;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846a:	b29b      	uxth	r3, r3
 800846c:	3b01      	subs	r3, #1
 800846e:	b29a      	uxth	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hfmpi2c->XferCount != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <FMPI2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	f043 0204 	orr.w	r2, r3, #4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hfmpi2c->XferISR = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hfmpi2c->ErrorCode != HAL_FMPI2C_ERROR_NONE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <FMPI2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    FMPI2C_ITError(hfmpi2c, hfmpi2c->ErrorCode);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f8a4 	bl	80085f4 <FMPI2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hfmpi2c->State == HAL_FMPI2C_STATE_LISTEN)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b28      	cmp	r3, #40	@ 0x28
 80084b6:	d141      	bne.n	800853c <FMPI2C_ITSlaveCplt+0x1fc>
    {
      /* Call FMPI2C Listen complete process */
      FMPI2C_ITListenCplt(hfmpi2c, tmpITFlags);
 80084b8:	6979      	ldr	r1, [r7, #20]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f846 	bl	800854c <FMPI2C_ITListenCplt>
    hfmpi2c->SlaveTxCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 80084c0:	e03c      	b.n	800853c <FMPI2C_ITSlaveCplt+0x1fc>
  else if (hfmpi2c->XferOptions != FMPI2C_NO_OPTION_FRAME)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084ca:	d014      	beq.n	80084f6 <FMPI2C_ITSlaveCplt+0x1b6>
    FMPI2C_ITSlaveSeqCplt(hfmpi2c);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff feda 	bl	8008286 <FMPI2C_ITSlaveSeqCplt>
    hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <FMPI2C_ITSlaveCplt+0x208>)
 80084d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hfmpi2c);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fd2f 	bl	8007f52 <HAL_FMPI2C_ListenCpltCallback>
}
 80084f4:	e022      	b.n	800853c <FMPI2C_ITSlaveCplt+0x1fc>
  else if (hfmpi2c->State == HAL_FMPI2C_STATE_BUSY_RX)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b22      	cmp	r3, #34	@ 0x22
 8008500:	d10e      	bne.n	8008520 <FMPI2C_ITSlaveCplt+0x1e0>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hfmpi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_FMPI2C_SlaveRxCpltCallback(hfmpi2c);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fd02 	bl	8007f22 <HAL_FMPI2C_SlaveRxCpltCallback>
}
 800851e:	e00d      	b.n	800853c <FMPI2C_ITSlaveCplt+0x1fc>
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hfmpi2c);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_FMPI2C_SlaveTxCpltCallback(hfmpi2c);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fce9 	bl	8007f0e <HAL_FMPI2C_SlaveTxCpltCallback>
}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	fe00e800 	.word	0xfe00e800
 8008548:	ffff0000 	.word	0xffff0000

0800854c <FMPI2C_ITListenCplt>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void FMPI2C_ITListenCplt(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ITFlags)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hfmpi2c->XferOptions = FMPI2C_NO_OPTION_FRAME;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a25      	ldr	r2, [pc, #148]	@ (80085f0 <FMPI2C_ITListenCplt+0xa4>)
 800855a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hfmpi2c->XferISR = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (FMPI2C_CHECK_FLAG(ITFlags, FMPI2C_FLAG_RXNE) != RESET)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d022      	beq.n	80085c8 <FMPI2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hfmpi2c->pBuffPtr++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hfmpi2c->XferSize > 0U))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d012      	beq.n	80085c8 <FMPI2C_ITListenCplt+0x7c>
    {
      hfmpi2c->XferSize--;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hfmpi2c->XferCount--;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	3b01      	subs	r3, #1
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c0:	f043 0204 	orr.w	r2, r3, #4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 80085c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fae9 	bl	8008ba4 <FMPI2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2210      	movs	r2, #16
 80085d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hfmpi2c);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
  hfmpi2c->ListenCpltCallback(hfmpi2c);
#else
  HAL_FMPI2C_ListenCpltCallback(hfmpi2c);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fcb5 	bl	8007f52 <HAL_FMPI2C_ListenCpltCallback>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	ffff0000 	.word	0xffff0000

080085f4 <FMPI2C_ITError>:
  * @param  hfmpi2c FMPI2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void FMPI2C_ITError(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t ErrorCode)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  HAL_FMPI2C_StateTypeDef tmpstate = hfmpi2c->State;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hfmpi2c->Mode          = HAL_FMPI2C_MODE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hfmpi2c->XferOptions   = FMPI2C_NO_OPTION_FRAME;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a5d      	ldr	r2, [pc, #372]	@ (8008788 <FMPI2C_ITError+0x194>)
 8008612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfmpi2c->XferCount     = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hfmpi2c->ErrorCode |= ErrorCode;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_FMPI2C_STATE_LISTEN)         ||
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	2b28      	cmp	r3, #40	@ 0x28
 800862a:	d005      	beq.n	8008638 <FMPI2C_ITError+0x44>
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b29      	cmp	r3, #41	@ 0x29
 8008630:	d002      	beq.n	8008638 <FMPI2C_ITError+0x44>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_TX_LISTEN) ||
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	2b2a      	cmp	r3, #42	@ 0x2a
 8008636:	d10b      	bne.n	8008650 <FMPI2C_ITError+0x5c>
      (tmpstate == HAL_FMPI2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8008638:	2103      	movs	r1, #3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fab2 	bl	8008ba4 <FMPI2C_Disable_IRQ>

    /* keep HAL_FMPI2C_STATE_LISTEN if set */
    hfmpi2c->State         = HAL_FMPI2C_STATE_LISTEN;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2228      	movs	r2, #40	@ 0x28
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->XferISR       = FMPI2C_Slave_ISR_IT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a50      	ldr	r2, [pc, #320]	@ (800878c <FMPI2C_ITError+0x198>)
 800864c:	635a      	str	r2, [r3, #52]	@ 0x34
 800864e:	e011      	b.n	8008674 <FMPI2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    FMPI2C_Disable_IRQ(hfmpi2c, FMPI2C_XFER_LISTEN_IT | FMPI2C_XFER_RX_IT | FMPI2C_XFER_TX_IT);
 8008650:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 faa5 	bl	8008ba4 <FMPI2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hfmpi2c->State != HAL_FMPI2C_STATE_ABORT)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b60      	cmp	r3, #96	@ 0x60
 8008664:	d003      	beq.n	800866e <FMPI2C_ITError+0x7a>
    {
      /* Set HAL_FMPI2C_STATE_READY */
      hfmpi2c->State         = HAL_FMPI2C_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hfmpi2c->XferISR       = NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hfmpi2c->PreviousState;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008678:	60bb      	str	r3, [r7, #8]
  if ((hfmpi2c->hdmatx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_TX) || \
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867e:	2b00      	cmp	r3, #0
 8008680:	d039      	beq.n	80086f6 <FMPI2C_ITError+0x102>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b11      	cmp	r3, #17
 8008686:	d002      	beq.n	800868e <FMPI2C_ITError+0x9a>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b21      	cmp	r3, #33	@ 0x21
 800868c:	d133      	bne.n	80086f6 <FMPI2C_ITError+0x102>
                                 (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_TXDMAEN) == FMPI2C_CR1_TXDMAEN)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800869c:	d107      	bne.n	80086ae <FMPI2C_ITError+0xba>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_TXDMAEN;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80086ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff f944 	bl	8007940 <HAL_DMA_GetState>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d017      	beq.n	80086ee <FMPI2C_ITError+0xfa>
    {
      /* Set the FMPI2C DMA Abort callback :
       will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmatx->XferAbortCallback = FMPI2C_DMAAbort;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c2:	4a33      	ldr	r2, [pc, #204]	@ (8008790 <FMPI2C_ITError+0x19c>)
 80086c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmatx) != HAL_OK)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe ff88 	bl	80075e8 <HAL_DMA_Abort_IT>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d04d      	beq.n	800877a <FMPI2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hfmpi2c->hdmatx->XferAbortCallback(hfmpi2c->hdmatx);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086ec:	e045      	b.n	800877a <FMPI2C_ITError+0x186>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f850 	bl	8008794 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086f4:	e041      	b.n	800877a <FMPI2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hfmpi2c->hdmarx != NULL) && ((tmppreviousstate == FMPI2C_STATE_MASTER_BUSY_RX) || \
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d039      	beq.n	8008772 <FMPI2C_ITError+0x17e>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b12      	cmp	r3, #18
 8008702:	d002      	beq.n	800870a <FMPI2C_ITError+0x116>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b22      	cmp	r3, #34	@ 0x22
 8008708:	d133      	bne.n	8008772 <FMPI2C_ITError+0x17e>
                                      (tmppreviousstate == FMPI2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hfmpi2c->Instance->CR1 & FMPI2C_CR1_RXDMAEN) == FMPI2C_CR1_RXDMAEN)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008718:	d107      	bne.n	800872a <FMPI2C_ITError+0x136>
    {
      hfmpi2c->Instance->CR1 &= ~FMPI2C_CR1_RXDMAEN;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008728:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff f906 	bl	8007940 <HAL_DMA_GetState>
 8008734:	4603      	mov	r3, r0
 8008736:	2b01      	cmp	r3, #1
 8008738:	d017      	beq.n	800876a <FMPI2C_ITError+0x176>
    {
      /* Set the FMPI2C DMA Abort callback :
        will lead to call HAL_FMPI2C_ErrorCallback() at end of DMA abort procedure */
      hfmpi2c->hdmarx->XferAbortCallback = FMPI2C_DMAAbort;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873e:	4a14      	ldr	r2, [pc, #80]	@ (8008790 <FMPI2C_ITError+0x19c>)
 8008740:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hfmpi2c->hdmarx) != HAL_OK)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe ff4a 	bl	80075e8 <HAL_DMA_Abort_IT>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <FMPI2C_ITError+0x18a>
      {
        /* Call Directly hfmpi2c->hdmarx->XferAbortCallback function in case of error */
        hfmpi2c->hdmarx->XferAbortCallback(hfmpi2c->hdmarx);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800875e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008768:	e009      	b.n	800877e <FMPI2C_ITError+0x18a>
      }
    }
    else
    {
      FMPI2C_TreatErrorCallback(hfmpi2c);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f812 	bl	8008794 <FMPI2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008770:	e005      	b.n	800877e <FMPI2C_ITError+0x18a>
    }
  }
  else
  {
    FMPI2C_TreatErrorCallback(hfmpi2c);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f80e 	bl	8008794 <FMPI2C_TreatErrorCallback>
  }
}
 8008778:	e002      	b.n	8008780 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmatx) != HAL_DMA_STATE_READY)
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <FMPI2C_ITError+0x18c>
    if (HAL_DMA_GetState(hfmpi2c->hdmarx) != HAL_DMA_STATE_READY)
 800877e:	bf00      	nop
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	ffff0000 	.word	0xffff0000
 800878c:	08007f8f 	.word	0x08007f8f
 8008790:	0800882b 	.word	0x0800882b

08008794 <FMPI2C_TreatErrorCallback>:
  * @brief  FMPI2C Error callback treatment.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_TreatErrorCallback(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  if (hfmpi2c->State == HAL_FMPI2C_STATE_ABORT)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b60      	cmp	r3, #96	@ 0x60
 80087a6:	d10e      	bne.n	80087c6 <FMPI2C_TreatErrorCallback+0x32>
  {
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_FMPI2C_REGISTER_CALLBACKS == 1)
    hfmpi2c->AbortCpltCallback(hfmpi2c);
#else
    HAL_FMPI2C_AbortCpltCallback(hfmpi2c);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff fbdb 	bl	8007f7a <HAL_FMPI2C_AbortCpltCallback>
    hfmpi2c->ErrorCallback(hfmpi2c);
#else
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }
}
 80087c4:	e009      	b.n	80087da <FMPI2C_TreatErrorCallback+0x46>
    hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hfmpi2c);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_FMPI2C_ErrorCallback(hfmpi2c);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff fbc6 	bl	8007f66 <HAL_FMPI2C_ErrorCallback>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d103      	bne.n	8008800 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2200      	movs	r2, #0
 80087fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b01      	cmp	r3, #1
 800880c:	d007      	beq.n	800881e <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 0201 	orr.w	r2, r2, #1
 800881c:	619a      	str	r2, [r3, #24]
  }
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <FMPI2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void FMPI2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  FMPI2C_HandleTypeDef *hfmpi2c = (FMPI2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hfmpi2c->hdmatx != NULL)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <FMPI2C_DMAAbort+0x1e>
  {
    hfmpi2c->hdmatx->XferAbortCallback = NULL;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008844:	2200      	movs	r2, #0
 8008846:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hfmpi2c->hdmarx != NULL)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <FMPI2C_DMAAbort+0x2e>
  {
    hfmpi2c->hdmarx->XferAbortCallback = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008854:	2200      	movs	r2, #0
 8008856:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  FMPI2C_TreatErrorCallback(hfmpi2c);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff ff9b 	bl	8008794 <FMPI2C_TreatErrorCallback>
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	603b      	str	r3, [r7, #0]
 8008872:	4613      	mov	r3, r2
 8008874:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8008876:	e022      	b.n	80088be <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d01e      	beq.n	80088be <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008880:	f7fd fea8 	bl	80065d4 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d302      	bcc.n	8008896 <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d113      	bne.n	80088be <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889a:	f043 0220 	orr.w	r2, r3, #32
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e00f      	b.n	80088de <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4013      	ands	r3, r2
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d0cd      	beq.n	8008878 <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 80088f2:	e02c      	b.n	800894e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f871 	bl	80089e0 <FMPI2C_IsErrorOccurred>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e02a      	b.n	800895e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890e:	d01e      	beq.n	800894e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008910:	f7fd fe60 	bl	80065d4 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	429a      	cmp	r2, r3
 800891e:	d302      	bcc.n	8008926 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d113      	bne.n	800894e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	645a      	str	r2, [r3, #68]	@ 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e007      	b.n	800895e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b02      	cmp	r3, #2
 800895a:	d1cb      	bne.n	80088f4 <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8008972:	e028      	b.n	80089c6 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (FMPI2C_IsErrorOccurred(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f831 	bl	80089e0 <FMPI2C_IsErrorOccurred>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e026      	b.n	80089d6 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008988:	f7fd fe24 	bl	80065d4 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d113      	bne.n	80089c6 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a2:	f043 0220 	orr.w	r2, r3, #32
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	645a      	str	r2, [r3, #68]	@ 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e007      	b.n	80089d6 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d1cf      	bne.n	8008974 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <FMPI2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsErrorOccurred(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hfmpi2c->Instance->ISR;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_AF))
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d040      	beq.n	8008a88 <FMPI2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a14:	d01d      	beq.n	8008a52 <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a24:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a26:	e014      	b.n	8008a52 <FMPI2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d010      	beq.n	8008a52 <FMPI2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a30:	f7fd fdd0 	bl	80065d4 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d302      	bcc.n	8008a46 <FMPI2C_IsErrorOccurred+0x66>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <FMPI2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_FMPI2C_ERROR_TIMEOUT;
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	f043 0320 	orr.w	r3, r3, #32
 8008a4c:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d002      	beq.n	8008a66 <FMPI2C_IsErrorOccurred+0x86>
 8008a60:	7ffb      	ldrb	r3, [r7, #31]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0e0      	beq.n	8008a28 <FMPI2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a66:	7ffb      	ldrb	r3, [r7, #31]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <FMPI2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2220      	movs	r2, #32
 8008a72:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2210      	movs	r2, #16
 8008a7a:	61da      	str	r2, [r3, #28]

    error_code |= HAL_FMPI2C_ERROR_AF;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f043 0304 	orr.w	r3, r3, #4
 8008a82:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hfmpi2c->Instance->ISR;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_BERR))
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <FMPI2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_FMPI2C_ERROR_BERR;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_BERR);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008aaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_OVR))
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <FMPI2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_FMPI2C_ERROR_OVR;
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	f043 0308 	orr.w	r3, r3, #8
 8008ac0:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_OVR);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008aca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, FMPI2C_FLAG_ARLO))
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <FMPI2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_FMPI2C_ERROR_ARLO;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	f043 0302 	orr.w	r3, r3, #2
 8008ae0:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_ARLO);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8008af0:	7ffb      	ldrb	r3, [r7, #31]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01c      	beq.n	8008b30 <FMPI2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7ff fe73 	bl	80087e2 <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6859      	ldr	r1, [r3, #4]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <FMPI2C_IsErrorOccurred+0x15c>)
 8008b08:	400b      	ands	r3, r1
 8008b0a:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= error_code;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	645a      	str	r2, [r3, #68]	@ 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	fe00e800 	.word	0xfe00e800

08008b40 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	607b      	str	r3, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	817b      	strh	r3, [r7, #10]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8008b52:	897b      	ldrh	r3, [r7, #10]
 8008b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 8008b58:	7a7b      	ldrb	r3, [r7, #9]
 8008b5a:	041b      	lsls	r3, r3, #16
 8008b5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8008b60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2, \
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	0d5b      	lsrs	r3, r3, #21
 8008b7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b7e:	4b08      	ldr	r3, [pc, #32]	@ (8008ba0 <FMPI2C_TransferConfig+0x60>)
 8008b80:	430b      	orrs	r3, r1
 8008b82:	43db      	mvns	r3, r3
 8008b84:	ea02 0103 	and.w	r1, r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
             ((FMPI2C_CR2_SADD | FMPI2C_CR2_NBYTES | FMPI2C_CR2_RELOAD | FMPI2C_CR2_AUTOEND | \
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                FMPI2C_CR2_START | FMPI2C_CR2_STOP)), tmp);
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	03ff63ff 	.word	0x03ff63ff

08008ba4 <FMPI2C_Disable_IRQ>:
  *                the configuration information for the specified FMPI2C.
  * @param  InterruptRequest Value of @ref FMPI2C_Interrupt_configuration_definition.
  * @retval None
  */
static void FMPI2C_Disable_IRQ(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t InterruptRequest)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & FMPI2C_XFER_TX_IT) == FMPI2C_XFER_TX_IT)
 8008bb4:	887b      	ldrh	r3, [r7, #2]
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <FMPI2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_TXI;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bd2:	2b28      	cmp	r3, #40	@ 0x28
 8008bd4:	d003      	beq.n	8008bde <FMPI2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008bdc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_RX_IT) == FMPI2C_XFER_RX_IT)
 8008bde:	887b      	ldrh	r3, [r7, #2]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00f      	beq.n	8008c08 <FMPI2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= FMPI2C_IT_TCI | FMPI2C_IT_RXI;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008bee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hfmpi2c->State & (uint32_t)HAL_FMPI2C_STATE_LISTEN) != (uint32_t)HAL_FMPI2C_STATE_LISTEN)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bfc:	2b28      	cmp	r3, #40	@ 0x28
 8008bfe:	d003      	beq.n	8008c08 <FMPI2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & FMPI2C_XFER_LISTEN_IT) == FMPI2C_XFER_LISTEN_IT)
 8008c08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da03      	bge.n	8008c18 <FMPI2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= FMPI2C_IT_ADDRI | FMPI2C_IT_STOPI | FMPI2C_IT_NACKI | FMPI2C_IT_ERRI;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008c16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_ERROR_IT)
 8008c18:	887b      	ldrh	r3, [r7, #2]
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d103      	bne.n	8008c26 <FMPI2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= FMPI2C_IT_ERRI | FMPI2C_IT_NACKI;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008c24:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_CPLT_IT)
 8008c26:	887b      	ldrh	r3, [r7, #2]
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d103      	bne.n	8008c34 <FMPI2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= FMPI2C_IT_STOPI;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f043 0320 	orr.w	r3, r3, #32
 8008c32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == FMPI2C_XFER_RELOAD_IT)
 8008c34:	887b      	ldrh	r3, [r7, #2]
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d103      	bne.n	8008c42 <FMPI2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= FMPI2C_IT_TCI;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c40:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_FMPI2C_DISABLE_IT(hfmpi2c, tmpisr);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6819      	ldr	r1, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	43da      	mvns	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	400a      	ands	r2, r1
 8008c52:	601a      	str	r2, [r3, #0]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d138      	bne.n	8008ce8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e032      	b.n	8008cea <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2224      	movs	r2, #36	@ 0x24
 8008c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0201 	orr.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e000      	b.n	8008cea <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ce8:	2302      	movs	r3, #2
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <HAL_FMPI2CEx_EnableFastModePlus>:
  * @note  For remaining FMPI2C1 pins (PA14, PA15...) fast mode plus driving capability
  *        can be enabled only by using FMPI2C_FASTMODEPLUS_FMPI2C1 parameter.
  * @retval None
  */
void HAL_FMPI2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMPI2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d00:	2300      	movs	r3, #0
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8008d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d08:	4a0a      	ldr	r2, [pc, #40]	@ (8008d34 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8008d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d10:	4b08      	ldr	r3, [pc, #32]	@ (8008d34 <HAL_FMPI2CEx_EnableFastModePlus+0x3c>)
 8008d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d18:	60fb      	str	r3, [r7, #12]
 8008d1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR, (uint32_t)ConfigFastModePlus);
 8008d1c:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8008d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d20:	4905      	ldr	r1, [pc, #20]	@ (8008d38 <HAL_FMPI2CEx_EnableFastModePlus+0x40>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	40023800 	.word	0x40023800
 8008d38:	40013800 	.word	0x40013800

08008d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b089      	sub	sp, #36	@ 0x24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d52:	2300      	movs	r3, #0
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	e159      	b.n	800900c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008d58:	2201      	movs	r2, #1
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	f040 8148 	bne.w	8009006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d005      	beq.n	8008d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d130      	bne.n	8008df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	2203      	movs	r2, #3
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	43db      	mvns	r3, r3
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	4013      	ands	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	091b      	lsrs	r3, r3, #4
 8008dda:	f003 0201 	and.w	r2, r3, #1
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d017      	beq.n	8008e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	2203      	movs	r2, #3
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	4013      	ands	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d123      	bne.n	8008e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	08da      	lsrs	r2, r3, #3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3208      	adds	r2, #8
 8008e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	220f      	movs	r2, #15
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	43db      	mvns	r3, r3
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	08da      	lsrs	r2, r3, #3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3208      	adds	r2, #8
 8008e7a:	69b9      	ldr	r1, [r7, #24]
 8008e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e90:	43db      	mvns	r3, r3
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	4013      	ands	r3, r2
 8008e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f003 0203 	and.w	r2, r3, #3
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80a2 	beq.w	8009006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
 8008ec6:	4b57      	ldr	r3, [pc, #348]	@ (8009024 <HAL_GPIO_Init+0x2e8>)
 8008ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eca:	4a56      	ldr	r2, [pc, #344]	@ (8009024 <HAL_GPIO_Init+0x2e8>)
 8008ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ed2:	4b54      	ldr	r3, [pc, #336]	@ (8009024 <HAL_GPIO_Init+0x2e8>)
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ede:	4a52      	ldr	r2, [pc, #328]	@ (8009028 <HAL_GPIO_Init+0x2ec>)
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	089b      	lsrs	r3, r3, #2
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	220f      	movs	r2, #15
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	43db      	mvns	r3, r3
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	4013      	ands	r3, r2
 8008f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a49      	ldr	r2, [pc, #292]	@ (800902c <HAL_GPIO_Init+0x2f0>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d019      	beq.n	8008f3e <HAL_GPIO_Init+0x202>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a48      	ldr	r2, [pc, #288]	@ (8009030 <HAL_GPIO_Init+0x2f4>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <HAL_GPIO_Init+0x1fe>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a47      	ldr	r2, [pc, #284]	@ (8009034 <HAL_GPIO_Init+0x2f8>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00d      	beq.n	8008f36 <HAL_GPIO_Init+0x1fa>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a46      	ldr	r2, [pc, #280]	@ (8009038 <HAL_GPIO_Init+0x2fc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <HAL_GPIO_Init+0x1f6>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a45      	ldr	r2, [pc, #276]	@ (800903c <HAL_GPIO_Init+0x300>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d101      	bne.n	8008f2e <HAL_GPIO_Init+0x1f2>
 8008f2a:	2304      	movs	r3, #4
 8008f2c:	e008      	b.n	8008f40 <HAL_GPIO_Init+0x204>
 8008f2e:	2307      	movs	r3, #7
 8008f30:	e006      	b.n	8008f40 <HAL_GPIO_Init+0x204>
 8008f32:	2303      	movs	r3, #3
 8008f34:	e004      	b.n	8008f40 <HAL_GPIO_Init+0x204>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e002      	b.n	8008f40 <HAL_GPIO_Init+0x204>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e000      	b.n	8008f40 <HAL_GPIO_Init+0x204>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	f002 0203 	and.w	r2, r2, #3
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	4093      	lsls	r3, r2
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f50:	4935      	ldr	r1, [pc, #212]	@ (8009028 <HAL_GPIO_Init+0x2ec>)
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	089b      	lsrs	r3, r3, #2
 8008f56:	3302      	adds	r3, #2
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f5e:	4b38      	ldr	r3, [pc, #224]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	43db      	mvns	r3, r3
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f82:	4a2f      	ldr	r2, [pc, #188]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f88:	4b2d      	ldr	r3, [pc, #180]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	4013      	ands	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008fac:	4a24      	ldr	r2, [pc, #144]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008fb2:	4b23      	ldr	r3, [pc, #140]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008fdc:	4b18      	ldr	r3, [pc, #96]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009000:	4a0f      	ldr	r2, [pc, #60]	@ (8009040 <HAL_GPIO_Init+0x304>)
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	3301      	adds	r3, #1
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	2b0f      	cmp	r3, #15
 8009010:	f67f aea2 	bls.w	8008d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	3724      	adds	r7, #36	@ 0x24
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40023800 	.word	0x40023800
 8009028:	40013800 	.word	0x40013800
 800902c:	40020000 	.word	0x40020000
 8009030:	40020400 	.word	0x40020400
 8009034:	40020800 	.word	0x40020800
 8009038:	40020c00 	.word	0x40020c00
 800903c:	40021000 	.word	0x40021000
 8009040:	40013c00 	.word	0x40013c00

08009044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	887b      	ldrh	r3, [r7, #2]
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e001      	b.n	8009066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	807b      	strh	r3, [r7, #2]
 8009080:	4613      	mov	r3, r2
 8009082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009084:	787b      	ldrb	r3, [r7, #1]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800908a:	887a      	ldrh	r2, [r7, #2]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009090:	e003      	b.n	800909a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009092:	887b      	ldrh	r3, [r7, #2]
 8009094:	041a      	lsls	r2, r3, #16
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	619a      	str	r2, [r3, #24]
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090b2:	4b08      	ldr	r3, [pc, #32]	@ (80090d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090b4:	695a      	ldr	r2, [r3, #20]
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	4013      	ands	r3, r2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d006      	beq.n	80090cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090be:	4a05      	ldr	r2, [pc, #20]	@ (80090d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fa fe5e 	bl	8003d88 <HAL_GPIO_EXTI_Callback>
  }
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40013c00 	.word	0x40013c00

080090d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e12b      	b.n	8009342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fc f82e 	bl	8005160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2224      	movs	r2, #36	@ 0x24
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f022 0201 	bic.w	r2, r2, #1
 800911a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800912a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800913a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800913c:	f000 ffb4 	bl	800a0a8 <HAL_RCC_GetPCLK1Freq>
 8009140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	4a81      	ldr	r2, [pc, #516]	@ (800934c <HAL_I2C_Init+0x274>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d807      	bhi.n	800915c <HAL_I2C_Init+0x84>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a80      	ldr	r2, [pc, #512]	@ (8009350 <HAL_I2C_Init+0x278>)
 8009150:	4293      	cmp	r3, r2
 8009152:	bf94      	ite	ls
 8009154:	2301      	movls	r3, #1
 8009156:	2300      	movhi	r3, #0
 8009158:	b2db      	uxtb	r3, r3
 800915a:	e006      	b.n	800916a <HAL_I2C_Init+0x92>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4a7d      	ldr	r2, [pc, #500]	@ (8009354 <HAL_I2C_Init+0x27c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	bf94      	ite	ls
 8009164:	2301      	movls	r3, #1
 8009166:	2300      	movhi	r3, #0
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e0e7      	b.n	8009342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a78      	ldr	r2, [pc, #480]	@ (8009358 <HAL_I2C_Init+0x280>)
 8009176:	fba2 2303 	umull	r2, r3, r2, r3
 800917a:	0c9b      	lsrs	r3, r3, #18
 800917c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4a6a      	ldr	r2, [pc, #424]	@ (800934c <HAL_I2C_Init+0x274>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d802      	bhi.n	80091ac <HAL_I2C_Init+0xd4>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	3301      	adds	r3, #1
 80091aa:	e009      	b.n	80091c0 <HAL_I2C_Init+0xe8>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
 80091b6:	4a69      	ldr	r2, [pc, #420]	@ (800935c <HAL_I2C_Init+0x284>)
 80091b8:	fba2 2303 	umull	r2, r3, r2, r3
 80091bc:	099b      	lsrs	r3, r3, #6
 80091be:	3301      	adds	r3, #1
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6812      	ldr	r2, [r2, #0]
 80091c4:	430b      	orrs	r3, r1
 80091c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80091d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	495c      	ldr	r1, [pc, #368]	@ (800934c <HAL_I2C_Init+0x274>)
 80091dc:	428b      	cmp	r3, r1
 80091de:	d819      	bhi.n	8009214 <HAL_I2C_Init+0x13c>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1e59      	subs	r1, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80091f4:	400b      	ands	r3, r1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <HAL_I2C_Init+0x138>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1e59      	subs	r1, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	fbb1 f3f3 	udiv	r3, r1, r3
 8009208:	3301      	adds	r3, #1
 800920a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800920e:	e051      	b.n	80092b4 <HAL_I2C_Init+0x1dc>
 8009210:	2304      	movs	r3, #4
 8009212:	e04f      	b.n	80092b4 <HAL_I2C_Init+0x1dc>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d111      	bne.n	8009240 <HAL_I2C_Init+0x168>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	1e58      	subs	r0, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6859      	ldr	r1, [r3, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	440b      	add	r3, r1
 800922a:	fbb0 f3f3 	udiv	r3, r0, r3
 800922e:	3301      	adds	r3, #1
 8009230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009234:	2b00      	cmp	r3, #0
 8009236:	bf0c      	ite	eq
 8009238:	2301      	moveq	r3, #1
 800923a:	2300      	movne	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	e012      	b.n	8009266 <HAL_I2C_Init+0x18e>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	1e58      	subs	r0, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6859      	ldr	r1, [r3, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	0099      	lsls	r1, r3, #2
 8009250:	440b      	add	r3, r1
 8009252:	fbb0 f3f3 	udiv	r3, r0, r3
 8009256:	3301      	adds	r3, #1
 8009258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf0c      	ite	eq
 8009260:	2301      	moveq	r3, #1
 8009262:	2300      	movne	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <HAL_I2C_Init+0x196>
 800926a:	2301      	movs	r3, #1
 800926c:	e022      	b.n	80092b4 <HAL_I2C_Init+0x1dc>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10e      	bne.n	8009294 <HAL_I2C_Init+0x1bc>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1e58      	subs	r0, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6859      	ldr	r1, [r3, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	440b      	add	r3, r1
 8009284:	fbb0 f3f3 	udiv	r3, r0, r3
 8009288:	3301      	adds	r3, #1
 800928a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009292:	e00f      	b.n	80092b4 <HAL_I2C_Init+0x1dc>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	1e58      	subs	r0, r3, #1
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6859      	ldr	r1, [r3, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	440b      	add	r3, r1
 80092a2:	0099      	lsls	r1, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80092aa:	3301      	adds	r3, #1
 80092ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	6809      	ldr	r1, [r1, #0]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69da      	ldr	r2, [r3, #28]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80092e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	6911      	ldr	r1, [r2, #16]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	68d2      	ldr	r2, [r2, #12]
 80092ee:	4311      	orrs	r1, r2
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	6812      	ldr	r2, [r2, #0]
 80092f4:	430b      	orrs	r3, r1
 80092f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695a      	ldr	r2, [r3, #20]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	431a      	orrs	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	000186a0 	.word	0x000186a0
 8009350:	001e847f 	.word	0x001e847f
 8009354:	003d08ff 	.word	0x003d08ff
 8009358:	431bde83 	.word	0x431bde83
 800935c:	10624dd3 	.word	0x10624dd3

08009360 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e154      	b.n	800961c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d109      	bne.n	8009392 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a98      	ldr	r2, [pc, #608]	@ (80095ec <HAL_I2S_Init+0x28c>)
 800938a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fb ff2f 	bl	80051f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6812      	ldr	r2, [r2, #0]
 80093a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80093a8:	f023 030f 	bic.w	r3, r3, #15
 80093ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2202      	movs	r2, #2
 80093b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d06f      	beq.n	800949e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80093c6:	2310      	movs	r3, #16
 80093c8:	617b      	str	r3, [r7, #20]
 80093ca:	e001      	b.n	80093d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80093cc:	2320      	movs	r3, #32
 80093ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	d802      	bhi.n	80093de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a83      	ldr	r2, [pc, #524]	@ (80095f0 <HAL_I2S_Init+0x290>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d004      	beq.n	80093f2 <HAL_I2S_Init+0x92>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a81      	ldr	r2, [pc, #516]	@ (80095f4 <HAL_I2S_Init+0x294>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d104      	bne.n	80093fc <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80093f2:	2001      	movs	r0, #1
 80093f4:	f001 f84e 	bl	800a494 <HAL_RCCEx_GetPeriphCLKFreq>
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	e003      	b.n	8009404 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80093fc:	2002      	movs	r0, #2
 80093fe:	f001 f849 	bl	800a494 <HAL_RCCEx_GetPeriphCLKFreq>
 8009402:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940c:	d125      	bne.n	800945a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	461a      	mov	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009432:	3305      	adds	r3, #5
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	e01f      	b.n	8009478 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	fbb2 f3f3 	udiv	r3, r2, r3
 8009454:	3305      	adds	r3, #5
 8009456:	613b      	str	r3, [r7, #16]
 8009458:	e00e      	b.n	8009478 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	461a      	mov	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	fbb2 f3f3 	udiv	r3, r2, r3
 8009474:	3305      	adds	r3, #5
 8009476:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	4a5f      	ldr	r2, [pc, #380]	@ (80095f8 <HAL_I2S_Init+0x298>)
 800947c:	fba2 2303 	umull	r2, r3, r2, r3
 8009480:	08db      	lsrs	r3, r3, #3
 8009482:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	085b      	lsrs	r3, r3, #1
 8009494:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e003      	b.n	80094a6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800949e:	2302      	movs	r3, #2
 80094a0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d902      	bls.n	80094b2 <HAL_I2S_Init+0x152>
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	2bff      	cmp	r3, #255	@ 0xff
 80094b0:	d907      	bls.n	80094c2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b6:	f043 0210 	orr.w	r2, r3, #16
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e0ac      	b.n	800961c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	ea42 0103 	orr.w	r1, r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69fa      	ldr	r2, [r7, #28]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80094e0:	f023 030f 	bic.w	r3, r3, #15
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6851      	ldr	r1, [r2, #4]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6892      	ldr	r2, [r2, #8]
 80094ec:	4311      	orrs	r1, r2
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68d2      	ldr	r2, [r2, #12]
 80094f2:	4311      	orrs	r1, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6992      	ldr	r2, [r2, #24]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009504:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	2b30      	cmp	r3, #48	@ 0x30
 800950c:	d003      	beq.n	8009516 <HAL_I2S_Init+0x1b6>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	2bb0      	cmp	r3, #176	@ 0xb0
 8009514:	d107      	bne.n	8009526 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69da      	ldr	r2, [r3, #28]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009524:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d16e      	bne.n	800960c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a32      	ldr	r2, [pc, #200]	@ (80095fc <HAL_I2S_Init+0x29c>)
 8009532:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a2d      	ldr	r2, [pc, #180]	@ (80095f0 <HAL_I2S_Init+0x290>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d101      	bne.n	8009542 <HAL_I2S_Init+0x1e2>
 800953e:	4b30      	ldr	r3, [pc, #192]	@ (8009600 <HAL_I2S_Init+0x2a0>)
 8009540:	e001      	b.n	8009546 <HAL_I2S_Init+0x1e6>
 8009542:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6812      	ldr	r2, [r2, #0]
 800954c:	4928      	ldr	r1, [pc, #160]	@ (80095f0 <HAL_I2S_Init+0x290>)
 800954e:	428a      	cmp	r2, r1
 8009550:	d101      	bne.n	8009556 <HAL_I2S_Init+0x1f6>
 8009552:	4a2b      	ldr	r2, [pc, #172]	@ (8009600 <HAL_I2S_Init+0x2a0>)
 8009554:	e001      	b.n	800955a <HAL_I2S_Init+0x1fa>
 8009556:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800955a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800955e:	f023 030f 	bic.w	r3, r3, #15
 8009562:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a21      	ldr	r2, [pc, #132]	@ (80095f0 <HAL_I2S_Init+0x290>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d101      	bne.n	8009572 <HAL_I2S_Init+0x212>
 800956e:	4b24      	ldr	r3, [pc, #144]	@ (8009600 <HAL_I2S_Init+0x2a0>)
 8009570:	e001      	b.n	8009576 <HAL_I2S_Init+0x216>
 8009572:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009576:	2202      	movs	r2, #2
 8009578:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a1c      	ldr	r2, [pc, #112]	@ (80095f0 <HAL_I2S_Init+0x290>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d101      	bne.n	8009588 <HAL_I2S_Init+0x228>
 8009584:	4b1e      	ldr	r3, [pc, #120]	@ (8009600 <HAL_I2S_Init+0x2a0>)
 8009586:	e001      	b.n	800958c <HAL_I2S_Init+0x22c>
 8009588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009598:	d003      	beq.n	80095a2 <HAL_I2S_Init+0x242>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80095a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	e001      	b.n	80095ae <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80095c2:	4313      	orrs	r3, r2
 80095c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80095cc:	4313      	orrs	r3, r2
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	897b      	ldrh	r3, [r7, #10]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80095da:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a03      	ldr	r2, [pc, #12]	@ (80095f0 <HAL_I2S_Init+0x290>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d10e      	bne.n	8009604 <HAL_I2S_Init+0x2a4>
 80095e6:	4b06      	ldr	r3, [pc, #24]	@ (8009600 <HAL_I2S_Init+0x2a0>)
 80095e8:	e00e      	b.n	8009608 <HAL_I2S_Init+0x2a8>
 80095ea:	bf00      	nop
 80095ec:	08009707 	.word	0x08009707
 80095f0:	40003800 	.word	0x40003800
 80095f4:	40003c00 	.word	0x40003c00
 80095f8:	cccccccd 	.word	0xcccccccd
 80095fc:	0800981d 	.word	0x0800981d
 8009600:	40003400 	.word	0x40003400
 8009604:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009608:	897a      	ldrh	r2, [r7, #10]
 800960a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009658:	881a      	ldrh	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009664:	1c9a      	adds	r2, r3, #2
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967c:	b29b      	uxth	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10e      	bne.n	80096a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009690:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff ffc2 	bl	8009624 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ba:	b292      	uxth	r2, r2
 80096bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	1c9a      	adds	r2, r3, #2
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096da:	b29b      	uxth	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10e      	bne.n	80096fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80096ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7fa fbd9 	bl	8003eb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b086      	sub	sp, #24
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b04      	cmp	r3, #4
 8009720:	d13a      	bne.n	8009798 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b01      	cmp	r3, #1
 800972a:	d109      	bne.n	8009740 <I2S_IRQHandler+0x3a>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009736:	2b40      	cmp	r3, #64	@ 0x40
 8009738:	d102      	bne.n	8009740 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff ffb4 	bl	80096a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009746:	2b40      	cmp	r3, #64	@ 0x40
 8009748:	d126      	bne.n	8009798 <I2S_IRQHandler+0x92>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b20      	cmp	r3, #32
 8009756:	d11f      	bne.n	8009798 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009766:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009768:	2300      	movs	r3, #0
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800978a:	f043 0202 	orr.w	r2, r3, #2
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff ff50 	bl	8009638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d136      	bne.n	8009812 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d109      	bne.n	80097c2 <I2S_IRQHandler+0xbc>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b8:	2b80      	cmp	r3, #128	@ 0x80
 80097ba:	d102      	bne.n	80097c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff ff45 	bl	800964c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f003 0308 	and.w	r3, r3, #8
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d122      	bne.n	8009812 <I2S_IRQHandler+0x10c>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f003 0320 	and.w	r3, r3, #32
 80097d6:	2b20      	cmp	r3, #32
 80097d8:	d11b      	bne.n	8009812 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80097e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009804:	f043 0204 	orr.w	r2, r3, #4
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ff13 	bl	8009638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009812:	bf00      	nop
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a92      	ldr	r2, [pc, #584]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d101      	bne.n	800983a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8009836:	4b92      	ldr	r3, [pc, #584]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009838:	e001      	b.n	800983e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800983a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a8b      	ldr	r2, [pc, #556]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d101      	bne.n	8009858 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8009854:	4b8a      	ldr	r3, [pc, #552]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009856:	e001      	b.n	800985c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009868:	d004      	beq.n	8009874 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f040 8099 	bne.w	80099a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b02      	cmp	r3, #2
 800987c:	d107      	bne.n	800988e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f91b 	bl	8009ac4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b01      	cmp	r3, #1
 8009896:	d107      	bne.n	80098a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f9be 	bl	8009c24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d13a      	bne.n	8009928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d035      	beq.n	8009928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a6e      	ldr	r2, [pc, #440]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d101      	bne.n	80098ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80098c6:	4b6e      	ldr	r3, [pc, #440]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80098c8:	e001      	b.n	80098ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80098ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4969      	ldr	r1, [pc, #420]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80098d6:	428b      	cmp	r3, r1
 80098d8:	d101      	bne.n	80098de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80098da:	4b69      	ldr	r3, [pc, #420]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80098dc:	e001      	b.n	80098e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80098de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80098e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80098e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80098f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991a:	f043 0202 	orr.w	r2, r3, #2
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fe88 	bl	8009638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f003 0308 	and.w	r3, r3, #8
 800992e:	2b08      	cmp	r3, #8
 8009930:	f040 80c3 	bne.w	8009aba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80bd 	beq.w	8009aba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800994e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a49      	ldr	r2, [pc, #292]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d101      	bne.n	800995e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800995a:	4b49      	ldr	r3, [pc, #292]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800995c:	e001      	b.n	8009962 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800995e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4944      	ldr	r1, [pc, #272]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800996a:	428b      	cmp	r3, r1
 800996c:	d101      	bne.n	8009972 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800996e:	4b44      	ldr	r3, [pc, #272]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009970:	e001      	b.n	8009976 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009972:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009976:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800997a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800997c:	2300      	movs	r3, #0
 800997e:	60bb      	str	r3, [r7, #8]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	60bb      	str	r3, [r7, #8]
 8009988:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009996:	f043 0204 	orr.w	r2, r3, #4
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fe4a 	bl	8009638 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80099a4:	e089      	b.n	8009aba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d107      	bne.n	80099c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f8b4 	bl	8009b28 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d107      	bne.n	80099da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f8f3 	bl	8009bc0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e0:	2b40      	cmp	r3, #64	@ 0x40
 80099e2:	d12f      	bne.n	8009a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f003 0320 	and.w	r3, r3, #32
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d02a      	beq.n	8009a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80099fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a1e      	ldr	r2, [pc, #120]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d101      	bne.n	8009a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009a08:	4b1d      	ldr	r3, [pc, #116]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009a0a:	e001      	b.n	8009a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009a0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4919      	ldr	r1, [pc, #100]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009a18:	428b      	cmp	r3, r1
 8009a1a:	d101      	bne.n	8009a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009a1c:	4b18      	ldr	r3, [pc, #96]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009a1e:	e001      	b.n	8009a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8009a20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009a28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a36:	f043 0202 	orr.w	r2, r3, #2
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff fdfa 	bl	8009638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d136      	bne.n	8009abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f003 0320 	and.w	r3, r3, #32
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d031      	beq.n	8009abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a07      	ldr	r2, [pc, #28]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d101      	bne.n	8009a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8009a62:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009a64:	e001      	b.n	8009a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009a66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4902      	ldr	r1, [pc, #8]	@ (8009a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009a72:	428b      	cmp	r3, r1
 8009a74:	d106      	bne.n	8009a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8009a76:	4b02      	ldr	r3, [pc, #8]	@ (8009a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009a78:	e006      	b.n	8009a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8009a7a:	bf00      	nop
 8009a7c:	40003800 	.word	0x40003800
 8009a80:	40003400 	.word	0x40003400
 8009a84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009a88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009a8c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009a9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aaa:	f043 0204 	orr.w	r2, r3, #4
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff fdc0 	bl	8009638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009ab8:	e000      	b.n	8009abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009aba:	bf00      	nop
}
 8009abc:	bf00      	nop
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad0:	1c99      	adds	r1, r3, #2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6251      	str	r1, [r2, #36]	@ 0x24
 8009ad6:	881a      	ldrh	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d113      	bne.n	8009b1e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009b04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d106      	bne.n	8009b1e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7fa f9bf 	bl	8003e9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	1c99      	adds	r1, r3, #2
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	6251      	str	r1, [r2, #36]	@ 0x24
 8009b3a:	8819      	ldrh	r1, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb8 <I2SEx_TxISR_I2SExt+0x90>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d101      	bne.n	8009b4a <I2SEx_TxISR_I2SExt+0x22>
 8009b46:	4b1d      	ldr	r3, [pc, #116]	@ (8009bbc <I2SEx_TxISR_I2SExt+0x94>)
 8009b48:	e001      	b.n	8009b4e <I2SEx_TxISR_I2SExt+0x26>
 8009b4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009b4e:	460a      	mov	r2, r1
 8009b50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d121      	bne.n	8009bae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a12      	ldr	r2, [pc, #72]	@ (8009bb8 <I2SEx_TxISR_I2SExt+0x90>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d101      	bne.n	8009b78 <I2SEx_TxISR_I2SExt+0x50>
 8009b74:	4b11      	ldr	r3, [pc, #68]	@ (8009bbc <I2SEx_TxISR_I2SExt+0x94>)
 8009b76:	e001      	b.n	8009b7c <I2SEx_TxISR_I2SExt+0x54>
 8009b78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	490d      	ldr	r1, [pc, #52]	@ (8009bb8 <I2SEx_TxISR_I2SExt+0x90>)
 8009b84:	428b      	cmp	r3, r1
 8009b86:	d101      	bne.n	8009b8c <I2SEx_TxISR_I2SExt+0x64>
 8009b88:	4b0c      	ldr	r3, [pc, #48]	@ (8009bbc <I2SEx_TxISR_I2SExt+0x94>)
 8009b8a:	e001      	b.n	8009b90 <I2SEx_TxISR_I2SExt+0x68>
 8009b8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009b90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009b94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7fa f977 	bl	8003e9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	40003800 	.word	0x40003800
 8009bbc:	40003400 	.word	0x40003400

08009bc0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68d8      	ldr	r0, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd2:	1c99      	adds	r1, r3, #2
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8009bd8:	b282      	uxth	r2, r0
 8009bda:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	3b01      	subs	r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d113      	bne.n	8009c1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009c02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7fa f940 	bl	8003e9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a20      	ldr	r2, [pc, #128]	@ (8009cb4 <I2SEx_RxISR_I2SExt+0x90>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d101      	bne.n	8009c3a <I2SEx_RxISR_I2SExt+0x16>
 8009c36:	4b20      	ldr	r3, [pc, #128]	@ (8009cb8 <I2SEx_RxISR_I2SExt+0x94>)
 8009c38:	e001      	b.n	8009c3e <I2SEx_RxISR_I2SExt+0x1a>
 8009c3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009c3e:	68d8      	ldr	r0, [r3, #12]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c44:	1c99      	adds	r1, r3, #2
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8009c4a:	b282      	uxth	r2, r0
 8009c4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d121      	bne.n	8009caa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a12      	ldr	r2, [pc, #72]	@ (8009cb4 <I2SEx_RxISR_I2SExt+0x90>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d101      	bne.n	8009c74 <I2SEx_RxISR_I2SExt+0x50>
 8009c70:	4b11      	ldr	r3, [pc, #68]	@ (8009cb8 <I2SEx_RxISR_I2SExt+0x94>)
 8009c72:	e001      	b.n	8009c78 <I2SEx_RxISR_I2SExt+0x54>
 8009c74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	490d      	ldr	r1, [pc, #52]	@ (8009cb4 <I2SEx_RxISR_I2SExt+0x90>)
 8009c80:	428b      	cmp	r3, r1
 8009c82:	d101      	bne.n	8009c88 <I2SEx_RxISR_I2SExt+0x64>
 8009c84:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb8 <I2SEx_RxISR_I2SExt+0x94>)
 8009c86:	e001      	b.n	8009c8c <I2SEx_RxISR_I2SExt+0x68>
 8009c88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009c8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009c90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7fa f8f9 	bl	8003e9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40003800 	.word	0x40003800
 8009cb8:	40003400 	.word	0x40003400

08009cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d101      	bne.n	8009cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e0cc      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009cd0:	4b68      	ldr	r3, [pc, #416]	@ (8009e74 <HAL_RCC_ClockConfig+0x1b8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d90c      	bls.n	8009cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cde:	4b65      	ldr	r3, [pc, #404]	@ (8009e74 <HAL_RCC_ClockConfig+0x1b8>)
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ce6:	4b63      	ldr	r3, [pc, #396]	@ (8009e74 <HAL_RCC_ClockConfig+0x1b8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d001      	beq.n	8009cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e0b8      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0302 	and.w	r3, r3, #2
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d020      	beq.n	8009d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d10:	4b59      	ldr	r3, [pc, #356]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	4a58      	ldr	r2, [pc, #352]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 0308 	and.w	r3, r3, #8
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d28:	4b53      	ldr	r3, [pc, #332]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	4a52      	ldr	r2, [pc, #328]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d34:	4b50      	ldr	r3, [pc, #320]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	494d      	ldr	r1, [pc, #308]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d044      	beq.n	8009ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d107      	bne.n	8009d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d5a:	4b47      	ldr	r3, [pc, #284]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d119      	bne.n	8009d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e07f      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d003      	beq.n	8009d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d107      	bne.n	8009d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e06f      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d101      	bne.n	8009d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e067      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d9a:	4b37      	ldr	r3, [pc, #220]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f023 0203 	bic.w	r2, r3, #3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	4934      	ldr	r1, [pc, #208]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009dac:	f7fc fc12 	bl	80065d4 <HAL_GetTick>
 8009db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009db2:	e00a      	b.n	8009dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009db4:	f7fc fc0e 	bl	80065d4 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e04f      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009dca:	4b2b      	ldr	r3, [pc, #172]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f003 020c 	and.w	r2, r3, #12
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d1eb      	bne.n	8009db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ddc:	4b25      	ldr	r3, [pc, #148]	@ (8009e74 <HAL_RCC_ClockConfig+0x1b8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d20c      	bcs.n	8009e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dea:	4b22      	ldr	r3, [pc, #136]	@ (8009e74 <HAL_RCC_ClockConfig+0x1b8>)
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	b2d2      	uxtb	r2, r2
 8009df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009df2:	4b20      	ldr	r3, [pc, #128]	@ (8009e74 <HAL_RCC_ClockConfig+0x1b8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d001      	beq.n	8009e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e032      	b.n	8009e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d008      	beq.n	8009e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e10:	4b19      	ldr	r3, [pc, #100]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	4916      	ldr	r1, [pc, #88]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0308 	and.w	r3, r3, #8
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d009      	beq.n	8009e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e2e:	4b12      	ldr	r3, [pc, #72]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	490e      	ldr	r1, [pc, #56]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e42:	f000 f821 	bl	8009e88 <HAL_RCC_GetSysClockFreq>
 8009e46:	4602      	mov	r2, r0
 8009e48:	4b0b      	ldr	r3, [pc, #44]	@ (8009e78 <HAL_RCC_ClockConfig+0x1bc>)
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	091b      	lsrs	r3, r3, #4
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	490a      	ldr	r1, [pc, #40]	@ (8009e7c <HAL_RCC_ClockConfig+0x1c0>)
 8009e54:	5ccb      	ldrb	r3, [r1, r3]
 8009e56:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5a:	4a09      	ldr	r2, [pc, #36]	@ (8009e80 <HAL_RCC_ClockConfig+0x1c4>)
 8009e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e5e:	4b09      	ldr	r3, [pc, #36]	@ (8009e84 <HAL_RCC_ClockConfig+0x1c8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fc fb86 	bl	8006574 <HAL_InitTick>

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	40023c00 	.word	0x40023c00
 8009e78:	40023800 	.word	0x40023800
 8009e7c:	080120b8 	.word	0x080120b8
 8009e80:	20000004 	.word	0x20000004
 8009e84:	20000008 	.word	0x20000008

08009e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e8c:	b094      	sub	sp, #80	@ 0x50
 8009e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e94:	2300      	movs	r3, #0
 8009e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e98:	2300      	movs	r3, #0
 8009e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ea0:	4b79      	ldr	r3, [pc, #484]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f003 030c 	and.w	r3, r3, #12
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d00d      	beq.n	8009ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	f200 80e1 	bhi.w	800a074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <HAL_RCC_GetSysClockFreq+0x34>
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009eba:	e0db      	b.n	800a074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ebc:	4b73      	ldr	r3, [pc, #460]	@ (800a08c <HAL_RCC_GetSysClockFreq+0x204>)
 8009ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009ec0:	e0db      	b.n	800a07a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ec2:	4b72      	ldr	r3, [pc, #456]	@ (800a08c <HAL_RCC_GetSysClockFreq+0x204>)
 8009ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009ec6:	e0d8      	b.n	800a07a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ec8:	4b6f      	ldr	r3, [pc, #444]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x200>)
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ed0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ed2:	4b6d      	ldr	r3, [pc, #436]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d063      	beq.n	8009fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ede:	4b6a      	ldr	r3, [pc, #424]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	099b      	lsrs	r3, r3, #6
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009efa:	4622      	mov	r2, r4
 8009efc:	462b      	mov	r3, r5
 8009efe:	f04f 0000 	mov.w	r0, #0
 8009f02:	f04f 0100 	mov.w	r1, #0
 8009f06:	0159      	lsls	r1, r3, #5
 8009f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f0c:	0150      	lsls	r0, r2, #5
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4621      	mov	r1, r4
 8009f14:	1a51      	subs	r1, r2, r1
 8009f16:	6139      	str	r1, [r7, #16]
 8009f18:	4629      	mov	r1, r5
 8009f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	f04f 0200 	mov.w	r2, #0
 8009f24:	f04f 0300 	mov.w	r3, #0
 8009f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f2c:	4659      	mov	r1, fp
 8009f2e:	018b      	lsls	r3, r1, #6
 8009f30:	4651      	mov	r1, sl
 8009f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f36:	4651      	mov	r1, sl
 8009f38:	018a      	lsls	r2, r1, #6
 8009f3a:	4651      	mov	r1, sl
 8009f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8009f40:	4659      	mov	r1, fp
 8009f42:	eb63 0901 	sbc.w	r9, r3, r1
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	f04f 0300 	mov.w	r3, #0
 8009f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f5a:	4690      	mov	r8, r2
 8009f5c:	4699      	mov	r9, r3
 8009f5e:	4623      	mov	r3, r4
 8009f60:	eb18 0303 	adds.w	r3, r8, r3
 8009f64:	60bb      	str	r3, [r7, #8]
 8009f66:	462b      	mov	r3, r5
 8009f68:	eb49 0303 	adc.w	r3, r9, r3
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	f04f 0300 	mov.w	r3, #0
 8009f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	028b      	lsls	r3, r1, #10
 8009f7e:	4621      	mov	r1, r4
 8009f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f84:	4621      	mov	r1, r4
 8009f86:	028a      	lsls	r2, r1, #10
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f8e:	2200      	movs	r2, #0
 8009f90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f98:	f7f6 fe96 	bl	8000cc8 <__aeabi_uldivmod>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fa4:	e058      	b.n	800a058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fa6:	4b38      	ldr	r3, [pc, #224]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	099b      	lsrs	r3, r3, #6
 8009fac:	2200      	movs	r2, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009fb6:	623b      	str	r3, [r7, #32]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f04f 0100 	mov.w	r1, #0
 8009fcc:	0159      	lsls	r1, r3, #5
 8009fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009fd2:	0150      	lsls	r0, r2, #5
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4641      	mov	r1, r8
 8009fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8009fde:	4649      	mov	r1, r9
 8009fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8009ffc:	eb63 050b 	sbc.w	r5, r3, fp
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	f04f 0300 	mov.w	r3, #0
 800a008:	00eb      	lsls	r3, r5, #3
 800a00a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a00e:	00e2      	lsls	r2, r4, #3
 800a010:	4614      	mov	r4, r2
 800a012:	461d      	mov	r5, r3
 800a014:	4643      	mov	r3, r8
 800a016:	18e3      	adds	r3, r4, r3
 800a018:	603b      	str	r3, [r7, #0]
 800a01a:	464b      	mov	r3, r9
 800a01c:	eb45 0303 	adc.w	r3, r5, r3
 800a020:	607b      	str	r3, [r7, #4]
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a02e:	4629      	mov	r1, r5
 800a030:	028b      	lsls	r3, r1, #10
 800a032:	4621      	mov	r1, r4
 800a034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a038:	4621      	mov	r1, r4
 800a03a:	028a      	lsls	r2, r1, #10
 800a03c:	4610      	mov	r0, r2
 800a03e:	4619      	mov	r1, r3
 800a040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a042:	2200      	movs	r2, #0
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	61fa      	str	r2, [r7, #28]
 800a048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a04c:	f7f6 fe3c 	bl	8000cc8 <__aeabi_uldivmod>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4613      	mov	r3, r2
 800a056:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a058:	4b0b      	ldr	r3, [pc, #44]	@ (800a088 <HAL_RCC_GetSysClockFreq+0x200>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	0c1b      	lsrs	r3, r3, #16
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	3301      	adds	r3, #1
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800a068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a070:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a072:	e002      	b.n	800a07a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a074:	4b05      	ldr	r3, [pc, #20]	@ (800a08c <HAL_RCC_GetSysClockFreq+0x204>)
 800a076:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a07a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3750      	adds	r7, #80	@ 0x50
 800a080:	46bd      	mov	sp, r7
 800a082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a086:	bf00      	nop
 800a088:	40023800 	.word	0x40023800
 800a08c:	00f42400 	.word	0x00f42400

0800a090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a090:	b480      	push	{r7}
 800a092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a094:	4b03      	ldr	r3, [pc, #12]	@ (800a0a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a096:	681b      	ldr	r3, [r3, #0]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	20000004 	.word	0x20000004

0800a0a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0ac:	f7ff fff0 	bl	800a090 <HAL_RCC_GetHCLKFreq>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	4b05      	ldr	r3, [pc, #20]	@ (800a0c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	0a9b      	lsrs	r3, r3, #10
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	4903      	ldr	r1, [pc, #12]	@ (800a0cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0be:	5ccb      	ldrb	r3, [r1, r3]
 800a0c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	080120c8 	.word	0x080120c8

0800a0d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0d4:	f7ff ffdc 	bl	800a090 <HAL_RCC_GetHCLKFreq>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	0b5b      	lsrs	r3, r3, #13
 800a0e0:	f003 0307 	and.w	r3, r3, #7
 800a0e4:	4903      	ldr	r1, [pc, #12]	@ (800a0f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0e6:	5ccb      	ldrb	r3, [r1, r3]
 800a0e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	40023800 	.word	0x40023800
 800a0f4:	080120c8 	.word	0x080120c8

0800a0f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d010      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800a118:	4b87      	ldr	r3, [pc, #540]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a11a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a11e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	4984      	ldr	r1, [pc, #528]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800a136:	2301      	movs	r3, #1
 800a138:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d010      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800a146:	4b7c      	ldr	r3, [pc, #496]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a14c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	4978      	ldr	r1, [pc, #480]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a156:	4313      	orrs	r3, r2
 800a158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800a164:	2301      	movs	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 8083 	beq.w	800a27c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]
 800a17a:	4b6f      	ldr	r3, [pc, #444]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17e:	4a6e      	ldr	r2, [pc, #440]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a184:	6413      	str	r3, [r2, #64]	@ 0x40
 800a186:	4b6c      	ldr	r3, [pc, #432]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a18e:	60bb      	str	r3, [r7, #8]
 800a190:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a192:	4b6a      	ldr	r3, [pc, #424]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a69      	ldr	r2, [pc, #420]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800a198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a19c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a19e:	f7fc fa19 	bl	80065d4 <HAL_GetTick>
 800a1a2:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a1a4:	e008      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a1a6:	f7fc fa15 	bl	80065d4 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e162      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a1b8:	4b60      	ldr	r3, [pc, #384]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0f0      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a1c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a1c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1cc:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d02f      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d028      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a1e2:	4b55      	ldr	r3, [pc, #340]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a1e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1ea:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a1ec:	4b54      	ldr	r3, [pc, #336]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a1f2:	4b53      	ldr	r3, [pc, #332]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a1f8:	4a4f      	ldr	r2, [pc, #316]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a1fe:	4b4e      	ldr	r3, [pc, #312]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b01      	cmp	r3, #1
 800a208:	d114      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a20a:	f7fc f9e3 	bl	80065d4 <HAL_GetTick>
 800a20e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a210:	e00a      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a212:	f7fc f9df 	bl	80065d4 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a220:	4293      	cmp	r3, r2
 800a222:	d901      	bls.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e12a      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a228:	4b43      	ldr	r3, [pc, #268]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a22a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d0ee      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a23c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a240:	d10d      	bne.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800a242:	4b3d      	ldr	r3, [pc, #244]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a256:	4938      	ldr	r1, [pc, #224]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	608b      	str	r3, [r1, #8]
 800a25c:	e005      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a25e:	4b36      	ldr	r3, [pc, #216]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	4a35      	ldr	r2, [pc, #212]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a264:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a268:	6093      	str	r3, [r2, #8]
 800a26a:	4b33      	ldr	r3, [pc, #204]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a26c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a276:	4930      	ldr	r1, [pc, #192]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0304 	and.w	r3, r3, #4
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800a28e:	4b2d      	ldr	r3, [pc, #180]	@ (800a344 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a290:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0310 	and.w	r3, r3, #16
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800a29e:	4b26      	ldr	r3, [pc, #152]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ac:	4922      	ldr	r1, [pc, #136]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0320 	and.w	r3, r3, #32
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d011      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a2c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2c6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	491a      	ldr	r1, [pc, #104]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2de:	d101      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a2f0:	4b11      	ldr	r3, [pc, #68]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a2f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	490e      	ldr	r1, [pc, #56]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d004      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b80      	cmp	r3, #128	@ 0x80
 800a312:	f040 8091 	bne.w	800a438 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a316:	4b0c      	ldr	r3, [pc, #48]	@ (800a348 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a31c:	f7fc f95a 	bl	80065d4 <HAL_GetTick>
 800a320:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a322:	e013      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a324:	f7fc f956 	bl	80065d4 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d90c      	bls.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e0a3      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x386>
 800a336:	bf00      	nop
 800a338:	40023800 	.word	0x40023800
 800a33c:	40007000 	.word	0x40007000
 800a340:	42470e40 	.word	0x42470e40
 800a344:	424711e0 	.word	0x424711e0
 800a348:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a34c:	4b4e      	ldr	r3, [pc, #312]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e5      	bne.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800a358:	4a4c      	ldr	r2, [pc, #304]	@ (800a48c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d023      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	699b      	ldr	r3, [r3, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d019      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a39c:	d00e      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d019      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d115      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3ba:	d110      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	019b      	lsls	r3, r3, #6
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	431a      	orrs	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	071b      	lsls	r3, r3, #28
 800a3d6:	492c      	ldr	r1, [pc, #176]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d010      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	019b      	lsls	r3, r3, #6
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	061b      	lsls	r3, r3, #24
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	071b      	lsls	r3, r3, #28
 800a404:	4920      	ldr	r1, [pc, #128]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a406:	4313      	orrs	r3, r2
 800a408:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a40c:	4b20      	ldr	r3, [pc, #128]	@ (800a490 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800a40e:	2201      	movs	r2, #1
 800a410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a412:	f7fc f8df 	bl	80065d4 <HAL_GetTick>
 800a416:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a418:	e008      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a41a:	f7fc f8db 	bl	80065d4 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	2b02      	cmp	r3, #2
 800a426:	d901      	bls.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e028      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a42c:	4b16      	ldr	r3, [pc, #88]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0f0      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a444:	4b10      	ldr	r3, [pc, #64]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a44a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a452:	490d      	ldr	r1, [pc, #52]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a454:	4313      	orrs	r3, r2
 800a456:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a466:	4b08      	ldr	r3, [pc, #32]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a46c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a474:	4904      	ldr	r1, [pc, #16]	@ (800a488 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800a476:	4313      	orrs	r3, r2
 800a478:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	40023800 	.word	0x40023800
 800a48c:	424710d8 	.word	0x424710d8
 800a490:	42470068 	.word	0x42470068

0800a494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d004      	beq.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	f000 80a1 	beq.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800a4ba:	e13f      	b.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800a4bc:	4ba3      	ldr	r3, [pc, #652]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a4be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4c2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800a4ce:	f000 8084 	beq.w	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800a4d8:	f200 808c 	bhi.w	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4e2:	d04f      	beq.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4ea:	f200 8083 	bhi.w	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d006      	beq.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4fa:	d17b      	bne.n	800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a4fc:	4b94      	ldr	r3, [pc, #592]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a4fe:	617b      	str	r3, [r7, #20]
          break;
 800a500:	e07b      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800a502:	4b92      	ldr	r3, [pc, #584]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a50c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a510:	d109      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a512:	4b8e      	ldr	r3, [pc, #568]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a51c:	4a8c      	ldr	r2, [pc, #560]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a51e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	e019      	b.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a526:	4b89      	ldr	r3, [pc, #548]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a52e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a532:	d109      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a534:	4b85      	ldr	r3, [pc, #532]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a53a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a53e:	4a85      	ldr	r2, [pc, #532]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a540:	fbb2 f3f3 	udiv	r3, r2, r3
 800a544:	613b      	str	r3, [r7, #16]
 800a546:	e008      	b.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a548:	4b80      	ldr	r3, [pc, #512]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a54a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a54e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a552:	4a80      	ldr	r2, [pc, #512]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a554:	fbb2 f3f3 	udiv	r3, r2, r3
 800a558:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a55a:	4b7c      	ldr	r3, [pc, #496]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a560:	099b      	lsrs	r3, r3, #6
 800a562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	fb02 f303 	mul.w	r3, r2, r3
 800a56c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a56e:	4b77      	ldr	r3, [pc, #476]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a574:	0f1b      	lsrs	r3, r3, #28
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a580:	617b      	str	r3, [r7, #20]
          break;
 800a582:	e03a      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a584:	4b71      	ldr	r3, [pc, #452]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a58c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a590:	d108      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a592:	4b6e      	ldr	r3, [pc, #440]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a59a:	4a6e      	ldr	r2, [pc, #440]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	e007      	b.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a5a4:	4b69      	ldr	r3, [pc, #420]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5ac:	4a69      	ldr	r2, [pc, #420]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800a5b4:	4b65      	ldr	r3, [pc, #404]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	099b      	lsrs	r3, r3, #6
 800a5ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800a5c6:	4b61      	ldr	r3, [pc, #388]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	0f1b      	lsrs	r3, r3, #28
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d6:	617b      	str	r3, [r7, #20]
          break;
 800a5d8:	e00f      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a5da:	4b5c      	ldr	r3, [pc, #368]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5e6:	d102      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800a5e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a5ea:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800a5ec:	e005      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 800a5ee:	4b59      	ldr	r3, [pc, #356]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a5f0:	617b      	str	r3, [r7, #20]
          break;
 800a5f2:	e002      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	617b      	str	r3, [r7, #20]
          break;
 800a5f8:	bf00      	nop
        }
      }
      break;
 800a5fa:	e09f      	b.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800a5fc:	4b53      	ldr	r3, [pc, #332]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a602:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a60e:	f000 8084 	beq.w	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a618:	f200 808c 	bhi.w	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a622:	d04f      	beq.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a62a:	f200 8083 	bhi.w	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d006      	beq.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a63a:	d17b      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a63c:	4b44      	ldr	r3, [pc, #272]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a63e:	617b      	str	r3, [r7, #20]
          break;
 800a640:	e07b      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800a642:	4b42      	ldr	r3, [pc, #264]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a64c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a650:	d109      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a652:	4b3e      	ldr	r3, [pc, #248]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a65c:	4a3c      	ldr	r2, [pc, #240]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a662:	613b      	str	r3, [r7, #16]
 800a664:	e019      	b.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a666:	4b39      	ldr	r3, [pc, #228]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a66e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a672:	d109      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a674:	4b35      	ldr	r3, [pc, #212]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a67a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a67e:	4a35      	ldr	r2, [pc, #212]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a680:	fbb2 f3f3 	udiv	r3, r2, r3
 800a684:	613b      	str	r3, [r7, #16]
 800a686:	e008      	b.n	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800a688:	4b30      	ldr	r3, [pc, #192]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a68a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a68e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a692:	4a30      	ldr	r2, [pc, #192]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a694:	fbb2 f3f3 	udiv	r3, r2, r3
 800a698:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a69a:	4b2c      	ldr	r3, [pc, #176]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6a0:	099b      	lsrs	r3, r3, #6
 800a6a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a6ae:	4b27      	ldr	r3, [pc, #156]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b4:	0f1b      	lsrs	r3, r3, #28
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c0:	617b      	str	r3, [r7, #20]
          break;
 800a6c2:	e03a      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a6c4:	4b21      	ldr	r3, [pc, #132]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6d0:	d108      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a6d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6da:	4a1e      	ldr	r2, [pc, #120]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	e007      	b.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a6e4:	4b19      	ldr	r3, [pc, #100]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6ec:	4a19      	ldr	r2, [pc, #100]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800a6f4:	4b15      	ldr	r3, [pc, #84]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	099b      	lsrs	r3, r3, #6
 800a6fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	fb02 f303 	mul.w	r3, r2, r3
 800a704:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800a706:	4b11      	ldr	r3, [pc, #68]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	0f1b      	lsrs	r3, r3, #28
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	fbb2 f3f3 	udiv	r3, r2, r3
 800a716:	617b      	str	r3, [r7, #20]
          break;
 800a718:	e00f      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a71a:	4b0c      	ldr	r3, [pc, #48]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a726:	d102      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 800a728:	4b0a      	ldr	r3, [pc, #40]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a72a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800a72c:	e005      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 800a72e:	4b09      	ldr	r3, [pc, #36]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a730:	617b      	str	r3, [r7, #20]
          break;
 800a732:	e002      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
          break;
 800a738:	bf00      	nop
        }
      }
      break;
 800a73a:	bf00      	nop
    }
  }
  return frequency;
 800a73c:	697b      	ldr	r3, [r7, #20]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	40023800 	.word	0x40023800
 800a750:	00bb8000 	.word	0x00bb8000
 800a754:	00f42400 	.word	0x00f42400

0800a758 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e273      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d075      	beq.n	800a862 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a776:	4b88      	ldr	r3, [pc, #544]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 030c 	and.w	r3, r3, #12
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d00c      	beq.n	800a79c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a782:	4b85      	ldr	r3, [pc, #532]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d112      	bne.n	800a7b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a78e:	4b82      	ldr	r3, [pc, #520]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a79a:	d10b      	bne.n	800a7b4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a79c:	4b7e      	ldr	r3, [pc, #504]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d05b      	beq.n	800a860 <HAL_RCC_OscConfig+0x108>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d157      	bne.n	800a860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e24e      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7bc:	d106      	bne.n	800a7cc <HAL_RCC_OscConfig+0x74>
 800a7be:	4b76      	ldr	r3, [pc, #472]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a75      	ldr	r2, [pc, #468]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	e01d      	b.n	800a808 <HAL_RCC_OscConfig+0xb0>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7d4:	d10c      	bne.n	800a7f0 <HAL_RCC_OscConfig+0x98>
 800a7d6:	4b70      	ldr	r3, [pc, #448]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a6f      	ldr	r2, [pc, #444]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	4b6d      	ldr	r3, [pc, #436]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a6c      	ldr	r2, [pc, #432]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	e00b      	b.n	800a808 <HAL_RCC_OscConfig+0xb0>
 800a7f0:	4b69      	ldr	r3, [pc, #420]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a68      	ldr	r2, [pc, #416]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	4b66      	ldr	r3, [pc, #408]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a65      	ldr	r2, [pc, #404]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d013      	beq.n	800a838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a810:	f7fb fee0 	bl	80065d4 <HAL_GetTick>
 800a814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a816:	e008      	b.n	800a82a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a818:	f7fb fedc 	bl	80065d4 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b64      	cmp	r3, #100	@ 0x64
 800a824:	d901      	bls.n	800a82a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e213      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a82a:	4b5b      	ldr	r3, [pc, #364]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0f0      	beq.n	800a818 <HAL_RCC_OscConfig+0xc0>
 800a836:	e014      	b.n	800a862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a838:	f7fb fecc 	bl	80065d4 <HAL_GetTick>
 800a83c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a840:	f7fb fec8 	bl	80065d4 <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b64      	cmp	r3, #100	@ 0x64
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e1ff      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a852:	4b51      	ldr	r3, [pc, #324]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1f0      	bne.n	800a840 <HAL_RCC_OscConfig+0xe8>
 800a85e:	e000      	b.n	800a862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d063      	beq.n	800a936 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a86e:	4b4a      	ldr	r3, [pc, #296]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 030c 	and.w	r3, r3, #12
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a87a:	4b47      	ldr	r3, [pc, #284]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a882:	2b08      	cmp	r3, #8
 800a884:	d11c      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a886:	4b44      	ldr	r3, [pc, #272]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d116      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a892:	4b41      	ldr	r3, [pc, #260]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0302 	and.w	r3, r3, #2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d005      	beq.n	800a8aa <HAL_RCC_OscConfig+0x152>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d001      	beq.n	800a8aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e1d3      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8aa:	4b3b      	ldr	r3, [pc, #236]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4937      	ldr	r1, [pc, #220]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8be:	e03a      	b.n	800a936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d020      	beq.n	800a90a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8c8:	4b34      	ldr	r3, [pc, #208]	@ (800a99c <HAL_RCC_OscConfig+0x244>)
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ce:	f7fb fe81 	bl	80065d4 <HAL_GetTick>
 800a8d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8d4:	e008      	b.n	800a8e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8d6:	f7fb fe7d 	bl	80065d4 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d901      	bls.n	800a8e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e1b4      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8e8:	4b2b      	ldr	r3, [pc, #172]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0f0      	beq.n	800a8d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f4:	4b28      	ldr	r3, [pc, #160]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	4925      	ldr	r1, [pc, #148]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a904:	4313      	orrs	r3, r2
 800a906:	600b      	str	r3, [r1, #0]
 800a908:	e015      	b.n	800a936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a90a:	4b24      	ldr	r3, [pc, #144]	@ (800a99c <HAL_RCC_OscConfig+0x244>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a910:	f7fb fe60 	bl	80065d4 <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a918:	f7fb fe5c 	bl	80065d4 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e193      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a92a:	4b1b      	ldr	r3, [pc, #108]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1f0      	bne.n	800a918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d036      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d016      	beq.n	800a978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a94a:	4b15      	ldr	r3, [pc, #84]	@ (800a9a0 <HAL_RCC_OscConfig+0x248>)
 800a94c:	2201      	movs	r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a950:	f7fb fe40 	bl	80065d4 <HAL_GetTick>
 800a954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a956:	e008      	b.n	800a96a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a958:	f7fb fe3c 	bl	80065d4 <HAL_GetTick>
 800a95c:	4602      	mov	r2, r0
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	2b02      	cmp	r3, #2
 800a964:	d901      	bls.n	800a96a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e173      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a96a:	4b0b      	ldr	r3, [pc, #44]	@ (800a998 <HAL_RCC_OscConfig+0x240>)
 800a96c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a96e:	f003 0302 	and.w	r3, r3, #2
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0f0      	beq.n	800a958 <HAL_RCC_OscConfig+0x200>
 800a976:	e01b      	b.n	800a9b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a978:	4b09      	ldr	r3, [pc, #36]	@ (800a9a0 <HAL_RCC_OscConfig+0x248>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a97e:	f7fb fe29 	bl	80065d4 <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a984:	e00e      	b.n	800a9a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a986:	f7fb fe25 	bl	80065d4 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b02      	cmp	r3, #2
 800a992:	d907      	bls.n	800a9a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e15c      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
 800a998:	40023800 	.word	0x40023800
 800a99c:	42470000 	.word	0x42470000
 800a9a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9a4:	4b8a      	ldr	r3, [pc, #552]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800a9a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1ea      	bne.n	800a986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 8097 	beq.w	800aaec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9c2:	4b83      	ldr	r3, [pc, #524]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10f      	bne.n	800a9ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	4b7f      	ldr	r3, [pc, #508]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d6:	4a7e      	ldr	r2, [pc, #504]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800a9d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9dc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a9de:	4b7c      	ldr	r3, [pc, #496]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9e6:	60bb      	str	r3, [r7, #8]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ee:	4b79      	ldr	r3, [pc, #484]	@ (800abd4 <HAL_RCC_OscConfig+0x47c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d118      	bne.n	800aa2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9fa:	4b76      	ldr	r3, [pc, #472]	@ (800abd4 <HAL_RCC_OscConfig+0x47c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a75      	ldr	r2, [pc, #468]	@ (800abd4 <HAL_RCC_OscConfig+0x47c>)
 800aa00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa06:	f7fb fde5 	bl	80065d4 <HAL_GetTick>
 800aa0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa0c:	e008      	b.n	800aa20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa0e:	f7fb fde1 	bl	80065d4 <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d901      	bls.n	800aa20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e118      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa20:	4b6c      	ldr	r3, [pc, #432]	@ (800abd4 <HAL_RCC_OscConfig+0x47c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0f0      	beq.n	800aa0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d106      	bne.n	800aa42 <HAL_RCC_OscConfig+0x2ea>
 800aa34:	4b66      	ldr	r3, [pc, #408]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa38:	4a65      	ldr	r2, [pc, #404]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa3a:	f043 0301 	orr.w	r3, r3, #1
 800aa3e:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa40:	e01c      	b.n	800aa7c <HAL_RCC_OscConfig+0x324>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	2b05      	cmp	r3, #5
 800aa48:	d10c      	bne.n	800aa64 <HAL_RCC_OscConfig+0x30c>
 800aa4a:	4b61      	ldr	r3, [pc, #388]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa4e:	4a60      	ldr	r2, [pc, #384]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa50:	f043 0304 	orr.w	r3, r3, #4
 800aa54:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa56:	4b5e      	ldr	r3, [pc, #376]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa5a:	4a5d      	ldr	r2, [pc, #372]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa5c:	f043 0301 	orr.w	r3, r3, #1
 800aa60:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa62:	e00b      	b.n	800aa7c <HAL_RCC_OscConfig+0x324>
 800aa64:	4b5a      	ldr	r3, [pc, #360]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa68:	4a59      	ldr	r2, [pc, #356]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa6a:	f023 0301 	bic.w	r3, r3, #1
 800aa6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa70:	4b57      	ldr	r3, [pc, #348]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa74:	4a56      	ldr	r2, [pc, #344]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aa76:	f023 0304 	bic.w	r3, r3, #4
 800aa7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d015      	beq.n	800aab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa84:	f7fb fda6 	bl	80065d4 <HAL_GetTick>
 800aa88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa8a:	e00a      	b.n	800aaa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa8c:	f7fb fda2 	bl	80065d4 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e0d7      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaa2:	4b4b      	ldr	r3, [pc, #300]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aaa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0ee      	beq.n	800aa8c <HAL_RCC_OscConfig+0x334>
 800aaae:	e014      	b.n	800aada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aab0:	f7fb fd90 	bl	80065d4 <HAL_GetTick>
 800aab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aab6:	e00a      	b.n	800aace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aab8:	f7fb fd8c 	bl	80065d4 <HAL_GetTick>
 800aabc:	4602      	mov	r2, r0
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d901      	bls.n	800aace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e0c1      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aace:	4b40      	ldr	r3, [pc, #256]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1ee      	bne.n	800aab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d105      	bne.n	800aaec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aae0:	4b3b      	ldr	r3, [pc, #236]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae4:	4a3a      	ldr	r2, [pc, #232]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 80ad 	beq.w	800ac50 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aaf6:	4b36      	ldr	r3, [pc, #216]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 030c 	and.w	r3, r3, #12
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d060      	beq.n	800abc4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d145      	bne.n	800ab96 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab0a:	4b33      	ldr	r3, [pc, #204]	@ (800abd8 <HAL_RCC_OscConfig+0x480>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab10:	f7fb fd60 	bl	80065d4 <HAL_GetTick>
 800ab14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab16:	e008      	b.n	800ab2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab18:	f7fb fd5c 	bl	80065d4 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d901      	bls.n	800ab2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e093      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab2a:	4b29      	ldr	r3, [pc, #164]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1f0      	bne.n	800ab18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69da      	ldr	r2, [r3, #28]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab44:	019b      	lsls	r3, r3, #6
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	041b      	lsls	r3, r3, #16
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab58:	061b      	lsls	r3, r3, #24
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab60:	071b      	lsls	r3, r3, #28
 800ab62:	491b      	ldr	r1, [pc, #108]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab68:	4b1b      	ldr	r3, [pc, #108]	@ (800abd8 <HAL_RCC_OscConfig+0x480>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab6e:	f7fb fd31 	bl	80065d4 <HAL_GetTick>
 800ab72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab74:	e008      	b.n	800ab88 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab76:	f7fb fd2d 	bl	80065d4 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e064      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab88:	4b11      	ldr	r3, [pc, #68]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0f0      	beq.n	800ab76 <HAL_RCC_OscConfig+0x41e>
 800ab94:	e05c      	b.n	800ac50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab96:	4b10      	ldr	r3, [pc, #64]	@ (800abd8 <HAL_RCC_OscConfig+0x480>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9c:	f7fb fd1a 	bl	80065d4 <HAL_GetTick>
 800aba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aba4:	f7fb fd16 	bl	80065d4 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e04d      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abb6:	4b06      	ldr	r3, [pc, #24]	@ (800abd0 <HAL_RCC_OscConfig+0x478>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f0      	bne.n	800aba4 <HAL_RCC_OscConfig+0x44c>
 800abc2:	e045      	b.n	800ac50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d107      	bne.n	800abdc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e040      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
 800abd0:	40023800 	.word	0x40023800
 800abd4:	40007000 	.word	0x40007000
 800abd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800abdc:	4b1f      	ldr	r3, [pc, #124]	@ (800ac5c <HAL_RCC_OscConfig+0x504>)
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d030      	beq.n	800ac4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d129      	bne.n	800ac4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d122      	bne.n	800ac4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ac12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d119      	bne.n	800ac4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac22:	085b      	lsrs	r3, r3, #1
 800ac24:	3b01      	subs	r3, #1
 800ac26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d10f      	bne.n	800ac4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d107      	bne.n	800ac4c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d001      	beq.n	800ac50 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e000      	b.n	800ac52 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	40023800 	.word	0x40023800

0800ac60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e066      	b.n	800ad44 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7f5b      	ldrb	r3, [r3, #29]
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d105      	bne.n	800ac8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7fa fb50 	bl	800532c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	22ca      	movs	r2, #202	@ 0xca
 800ac98:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2253      	movs	r2, #83	@ 0x53
 800aca0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fb2a 	bl	800b2fc <RTC_EnterInitMode>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800acac:	7bfb      	ldrb	r3, [r7, #15]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d12c      	bne.n	800ad0c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6812      	ldr	r2, [r2, #0]
 800acbc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800acc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acc4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6899      	ldr	r1, [r3, #8]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	68d2      	ldr	r2, [r2, #12]
 800acec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6919      	ldr	r1, [r3, #16]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	041a      	lsls	r2, r3, #16
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fb31 	bl	800b36a <RTC_ExitInitMode>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d113      	bne.n	800ad3a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ad20:	641a      	str	r2, [r3, #64]	@ 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	641a      	str	r2, [r3, #64]	@ 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	22ff      	movs	r2, #255	@ 0xff
 800ad40:	625a      	str	r2, [r3, #36]	@ 0x24

  return status;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	7f1b      	ldrb	r3, [r3, #28]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <HAL_RTC_SetTime+0x1c>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e087      	b.n	800ae78 <HAL_RTC_SetTime+0x12c>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2202      	movs	r2, #2
 800ad72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d126      	bne.n	800adc8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fb0e 	bl	800b3b4 <RTC_ByteToBcd2>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	785b      	ldrb	r3, [r3, #1]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fb07 	bl	800b3b4 <RTC_ByteToBcd2>
 800ada6:	4603      	mov	r3, r0
 800ada8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800adaa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	789b      	ldrb	r3, [r3, #2]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 faff 	bl	800b3b4 <RTC_ByteToBcd2>
 800adb6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800adb8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	78db      	ldrb	r3, [r3, #3]
 800adc0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800adc2:	4313      	orrs	r3, r2
 800adc4:	617b      	str	r3, [r7, #20]
 800adc6:	e018      	b.n	800adfa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	785b      	ldrb	r3, [r3, #1]
 800ade6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ade8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800adee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	78db      	ldrb	r3, [r3, #3]
 800adf4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800adf6:	4313      	orrs	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	22ca      	movs	r2, #202	@ 0xca
 800ae00:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2253      	movs	r2, #83	@ 0x53
 800ae08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 fa76 	bl	800b2fc <RTC_EnterInitMode>
 800ae10:	4603      	mov	r3, r0
 800ae12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ae14:	7cfb      	ldrb	r3, [r7, #19]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d120      	bne.n	800ae5c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ae24:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ae28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ae38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6899      	ldr	r1, [r3, #8]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 fa89 	bl	800b36a <RTC_ExitInitMode>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ae5c:	7cfb      	ldrb	r3, [r7, #19]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d102      	bne.n	800ae68 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2201      	movs	r2, #1
 800ae66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	22ff      	movs	r2, #255	@ 0xff
 800ae6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	771a      	strb	r2, [r3, #28]

  return status;
 800ae76:	7cfb      	ldrb	r3, [r7, #19]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd90      	pop	{r4, r7, pc}

0800ae80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	7f1b      	ldrb	r3, [r3, #28]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d101      	bne.n	800ae9c <HAL_RTC_SetDate+0x1c>
 800ae98:	2302      	movs	r3, #2
 800ae9a:	e071      	b.n	800af80 <HAL_RTC_SetDate+0x100>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2202      	movs	r2, #2
 800aea6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10e      	bne.n	800aecc <HAL_RTC_SetDate+0x4c>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	f003 0310 	and.w	r3, r3, #16
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d008      	beq.n	800aecc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	f023 0310 	bic.w	r3, r3, #16
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	330a      	adds	r3, #10
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d11c      	bne.n	800af0c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	78db      	ldrb	r3, [r3, #3]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fa6c 	bl	800b3b4 <RTC_ByteToBcd2>
 800aedc:	4603      	mov	r3, r0
 800aede:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	785b      	ldrb	r3, [r3, #1]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fa65 	bl	800b3b4 <RTC_ByteToBcd2>
 800aeea:	4603      	mov	r3, r0
 800aeec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aeee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	789b      	ldrb	r3, [r3, #2]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 fa5d 	bl	800b3b4 <RTC_ByteToBcd2>
 800aefa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aefc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	e00e      	b.n	800af2a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	78db      	ldrb	r3, [r3, #3]
 800af10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	785b      	ldrb	r3, [r3, #1]
 800af16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af18:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af26:	4313      	orrs	r3, r2
 800af28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	22ca      	movs	r2, #202	@ 0xca
 800af30:	625a      	str	r2, [r3, #36]	@ 0x24
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2253      	movs	r2, #83	@ 0x53
 800af38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 f9de 	bl	800b2fc <RTC_EnterInitMode>
 800af40:	4603      	mov	r3, r0
 800af42:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800af44:	7cfb      	ldrb	r3, [r7, #19]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10c      	bne.n	800af64 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800af54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800af58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 fa05 	bl	800b36a <RTC_ExitInitMode>
 800af60:	4603      	mov	r3, r0
 800af62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800af64:	7cfb      	ldrb	r3, [r7, #19]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	22ff      	movs	r2, #255	@ 0xff
 800af76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	771a      	strb	r2, [r3, #28]

  return status;
 800af7e:	7cfb      	ldrb	r3, [r7, #19]
}
 800af80:	4618      	mov	r0, r3
 800af82:	371c      	adds	r7, #28
 800af84:	46bd      	mov	sp, r7
 800af86:	bd90      	pop	{r4, r7, pc}

0800af88 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800af88:	b590      	push	{r4, r7, lr}
 800af8a:	b089      	sub	sp, #36	@ 0x24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800af94:	4b9a      	ldr	r3, [pc, #616]	@ (800b200 <HAL_RTC_SetAlarm_IT+0x278>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a9a      	ldr	r2, [pc, #616]	@ (800b204 <HAL_RTC_SetAlarm_IT+0x27c>)
 800af9a:	fba2 2303 	umull	r2, r3, r2, r3
 800af9e:	0adb      	lsrs	r3, r3, #11
 800afa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800afa4:	fb02 f303 	mul.w	r3, r2, r3
 800afa8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	7f1b      	ldrb	r3, [r3, #28]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <HAL_RTC_SetAlarm_IT+0x36>
 800afba:	2302      	movs	r3, #2
 800afbc:	e11c      	b.n	800b1f8 <HAL_RTC_SetAlarm_IT+0x270>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2202      	movs	r2, #2
 800afc8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d137      	bne.n	800b040 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2200      	movs	r2, #0
 800afe2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 f9e3 	bl	800b3b4 <RTC_ByteToBcd2>
 800afee:	4603      	mov	r3, r0
 800aff0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	785b      	ldrb	r3, [r3, #1]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 f9dc 	bl	800b3b4 <RTC_ByteToBcd2>
 800affc:	4603      	mov	r3, r0
 800affe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b000:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	789b      	ldrb	r3, [r3, #2]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f9d4 	bl	800b3b4 <RTC_ByteToBcd2>
 800b00c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b00e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	78db      	ldrb	r3, [r3, #3]
 800b016:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b018:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 f9c6 	bl	800b3b4 <RTC_ByteToBcd2>
 800b028:	4603      	mov	r3, r0
 800b02a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800b02c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b034:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b03a:	4313      	orrs	r3, r2
 800b03c:	61fb      	str	r3, [r7, #28]
 800b03e:	e023      	b.n	800b088 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d102      	bne.n	800b054 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2200      	movs	r2, #0
 800b052:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b060:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b066:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	78db      	ldrb	r3, [r3, #3]
 800b06c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b06e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b076:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800b078:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b07e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b084:	4313      	orrs	r3, r2
 800b086:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b090:	4313      	orrs	r3, r2
 800b092:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	22ca      	movs	r2, #202	@ 0xca
 800b09a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2253      	movs	r2, #83	@ 0x53
 800b0a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ac:	d141      	bne.n	800b132 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	689a      	ldr	r2, [r3, #8]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b0bc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b0ce:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	1e5a      	subs	r2, r3, #1
 800b0d4:	617a      	str	r2, [r7, #20]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10b      	bne.n	800b0f2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	22ff      	movs	r2, #255	@ 0xff
 800b0e0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2203      	movs	r2, #3
 800b0e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e082      	b.n	800b1f8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0e7      	beq.n	800b0d0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b11e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	689a      	ldr	r2, [r3, #8]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b12e:	609a      	str	r2, [r3, #8]
 800b130:	e04b      	b.n	800b1ca <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	689a      	ldr	r2, [r3, #8]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b140:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b152:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800b154:	4b2a      	ldr	r3, [pc, #168]	@ (800b200 <HAL_RTC_SetAlarm_IT+0x278>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a2a      	ldr	r2, [pc, #168]	@ (800b204 <HAL_RTC_SetAlarm_IT+0x27c>)
 800b15a:	fba2 2303 	umull	r2, r3, r2, r3
 800b15e:	0adb      	lsrs	r3, r3, #11
 800b160:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b164:	fb02 f303 	mul.w	r3, r2, r3
 800b168:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	617a      	str	r2, [r7, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10b      	bne.n	800b18c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	22ff      	movs	r2, #255	@ 0xff
 800b17a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2203      	movs	r2, #3
 800b180:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e035      	b.n	800b1f8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0e7      	beq.n	800b16a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1b8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1c8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b208 <HAL_RTC_SetAlarm_IT+0x280>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b208 <HAL_RTC_SetAlarm_IT+0x280>)
 800b1d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1d4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800b1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b208 <HAL_RTC_SetAlarm_IT+0x280>)
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4a0b      	ldr	r2, [pc, #44]	@ (800b208 <HAL_RTC_SetAlarm_IT+0x280>)
 800b1dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1e0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	22ff      	movs	r2, #255	@ 0xff
 800b1e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3724      	adds	r7, #36	@ 0x24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd90      	pop	{r4, r7, pc}
 800b200:	20000004 	.word	0x20000004
 800b204:	10624dd3 	.word	0x10624dd3
 800b208:	40013c00 	.word	0x40013c00

0800b20c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00b      	beq.n	800b248 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f831 	bl	800b298 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b246:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d012      	beq.n	800b27c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f8c2 	bl	800b3ee <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	b2da      	uxtb	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b27a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800b27c:	4b05      	ldr	r3, [pc, #20]	@ (800b294 <HAL_RTC_AlarmIRQHandler+0x88>)
 800b27e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b282:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	775a      	strb	r2, [r3, #29]
}
 800b28a:	bf00      	nop
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	40013c00 	.word	0x40013c00

0800b298 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800b2c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2c8:	f7fb f984 	bl	80065d4 <HAL_GetTick>
 800b2cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b2ce:	e009      	b.n	800b2e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b2d0:	f7fb f980 	bl	80065d4 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2de:	d901      	bls.n	800b2e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e007      	b.n	800b2f4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0ee      	beq.n	800b2d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b316:	2b00      	cmp	r3, #0
 800b318:	d122      	bne.n	800b360 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68da      	ldr	r2, [r3, #12]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b328:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b32a:	f7fb f953 	bl	80065d4 <HAL_GetTick>
 800b32e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b330:	e00c      	b.n	800b34c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b332:	f7fb f94f 	bl	80065d4 <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b340:	d904      	bls.n	800b34c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2204      	movs	r2, #4
 800b346:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <RTC_EnterInitMode+0x64>
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d1e8      	bne.n	800b332 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68da      	ldr	r2, [r3, #12]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b384:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ff89 	bl	800b2ac <HAL_RTC_WaitForSynchro>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2204      	movs	r2, #4
 800b3a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800b3c2:	e005      	b.n	800b3d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	3b0a      	subs	r3, #10
 800b3ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b09      	cmp	r3, #9
 800b3d4:	d8f6      	bhi.n	800b3c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	b2db      	uxtb	r3, r3
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b083      	sub	sp, #12
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b3f6:	bf00      	nop
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e022      	b.n	800b45a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d105      	bne.n	800b42c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7f9 ffb2 	bl	8005390 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2203      	movs	r2, #3
 800b430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f815 	bl	800b464 <HAL_SD_InitCard>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e00a      	b.n	800b45a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b464:	b5b0      	push	{r4, r5, r7, lr}
 800b466:	b08e      	sub	sp, #56	@ 0x38
 800b468:	af04      	add	r7, sp, #16
 800b46a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b474:	2300      	movs	r3, #0
 800b476:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b478:	2300      	movs	r3, #0
 800b47a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b480:	2376      	movs	r3, #118	@ 0x76
 800b482:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681d      	ldr	r5, [r3, #0]
 800b488:	466c      	mov	r4, sp
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b496:	f107 0308 	add.w	r3, r7, #8
 800b49a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b49c:	4628      	mov	r0, r5
 800b49e:	f003 f961 	bl	800e764 <SDIO_Init>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800b4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e04f      	b.n	800b554 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b4b4:	4b29      	ldr	r3, [pc, #164]	@ (800b55c <HAL_SD_InitCard+0xf8>)
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f003 f999 	bl	800e7f6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b4c4:	4b25      	ldr	r3, [pc, #148]	@ (800b55c <HAL_SD_InitCard+0xf8>)
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b4ca:	2002      	movs	r0, #2
 800b4cc:	f7fb f88e 	bl	80065ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fe69 	bl	800c1a8 <SD_PowerON>
 800b4d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00b      	beq.n	800b4f6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e02e      	b.n	800b554 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fd88 	bl	800c00c <SD_InitCard>
 800b4fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00b      	beq.n	800b51c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	431a      	orrs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e01b      	b.n	800b554 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b524:	4618      	mov	r0, r3
 800b526:	f003 f9f8 	bl	800e91a <SDMMC_CmdBlockLength>
 800b52a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b52c:	6a3b      	ldr	r3, [r7, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00f      	beq.n	800b552 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a0a      	ldr	r2, [pc, #40]	@ (800b560 <HAL_SD_InitCard+0xfc>)
 800b538:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e000      	b.n	800b554 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3728      	adds	r7, #40	@ 0x28
 800b558:	46bd      	mov	sp, r7
 800b55a:	bdb0      	pop	{r4, r5, r7, pc}
 800b55c:	422580a0 	.word	0x422580a0
 800b560:	004005ff 	.word	0x004005ff

0800b564 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b092      	sub	sp, #72	@ 0x48
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b572:	f7fb f82f 	bl	80065d4 <HAL_GetTick>
 800b576:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d107      	bne.n	800b596 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b58a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e1bd      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	f040 81b0 	bne.w	800b904 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b5aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	441a      	add	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d907      	bls.n	800b5c8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e1a4      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2203      	movs	r2, #3
 800b5cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d002      	beq.n	800b5e6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e2:	025b      	lsls	r3, r3, #9
 800b5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	025b      	lsls	r3, r3, #9
 800b5f0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b5f2:	2390      	movs	r3, #144	@ 0x90
 800b5f4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b5fe:	2301      	movs	r3, #1
 800b600:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f107 0214 	add.w	r2, r7, #20
 800b60a:	4611      	mov	r1, r2
 800b60c:	4618      	mov	r0, r3
 800b60e:	f003 f958 	bl	800e8c2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d90a      	bls.n	800b62e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2202      	movs	r2, #2
 800b61c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b624:	4618      	mov	r0, r3
 800b626:	f003 f9bc 	bl	800e9a2 <SDMMC_CmdReadMultiBlock>
 800b62a:	6478      	str	r0, [r7, #68]	@ 0x44
 800b62c:	e009      	b.n	800b642 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b63a:	4618      	mov	r0, r3
 800b63c:	f003 f98f 	bl	800e95e <SDMMC_CmdReadSingleBlock>
 800b640:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b644:	2b00      	cmp	r3, #0
 800b646:	d012      	beq.n	800b66e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a7a      	ldr	r2, [pc, #488]	@ (800b838 <HAL_SD_ReadBlocks+0x2d4>)
 800b64e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b656:	431a      	orrs	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e151      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800b672:	e061      	b.n	800b738 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b67a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d03c      	beq.n	800b6fc <HAL_SD_ReadBlocks+0x198>
 800b682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d039      	beq.n	800b6fc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b688:	2300      	movs	r3, #0
 800b68a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b68c:	e033      	b.n	800b6f6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4618      	mov	r0, r3
 800b694:	f003 f891 	bl	800e7ba <SDIO_ReadFIFO>
 800b698:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b0:	0a1b      	lsrs	r3, r3, #8
 800b6b2:	b2da      	uxtb	r2, r3
 800b6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c6:	0c1b      	lsrs	r3, r3, #16
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6dc:	0e1b      	lsrs	r3, r3, #24
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800b6f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6f8:	2b07      	cmp	r3, #7
 800b6fa:	d9c8      	bls.n	800b68e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b6fc:	f7fa ff6a 	bl	80065d4 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b708:	429a      	cmp	r2, r3
 800b70a:	d902      	bls.n	800b712 <HAL_SD_ReadBlocks+0x1ae>
 800b70c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d112      	bne.n	800b738 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a48      	ldr	r2, [pc, #288]	@ (800b838 <HAL_SD_ReadBlocks+0x2d4>)
 800b718:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b71e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b734:	2303      	movs	r3, #3
 800b736:	e0ec      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b73e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b742:	2b00      	cmp	r3, #0
 800b744:	d096      	beq.n	800b674 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b74c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b750:	2b00      	cmp	r3, #0
 800b752:	d022      	beq.n	800b79a <HAL_SD_ReadBlocks+0x236>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d91f      	bls.n	800b79a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b75e:	2b03      	cmp	r3, #3
 800b760:	d01b      	beq.n	800b79a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f003 f982 	bl	800ea70 <SDMMC_CmdStopTransfer>
 800b76c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b76e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b770:	2b00      	cmp	r3, #0
 800b772:	d012      	beq.n	800b79a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a2f      	ldr	r2, [pc, #188]	@ (800b838 <HAL_SD_ReadBlocks+0x2d4>)
 800b77a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b782:	431a      	orrs	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e0bb      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7a0:	f003 0308 	and.w	r3, r3, #8
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d012      	beq.n	800b7ce <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a22      	ldr	r2, [pc, #136]	@ (800b838 <HAL_SD_ReadBlocks+0x2d4>)
 800b7ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	f043 0208 	orr.w	r2, r3, #8
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e0a1      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d012      	beq.n	800b802 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a15      	ldr	r2, [pc, #84]	@ (800b838 <HAL_SD_ReadBlocks+0x2d4>)
 800b7e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e8:	f043 0202 	orr.w	r2, r3, #2
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e087      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d064      	beq.n	800b8da <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a08      	ldr	r2, [pc, #32]	@ (800b838 <HAL_SD_ReadBlocks+0x2d4>)
 800b816:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	f043 0220 	orr.w	r2, r3, #32
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e06d      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
 800b836:	bf00      	nop
 800b838:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f002 ffba 	bl	800e7ba <SDIO_ReadFIFO>
 800b846:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b852:	3301      	adds	r3, #1
 800b854:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b858:	3b01      	subs	r3, #1
 800b85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85e:	0a1b      	lsrs	r3, r3, #8
 800b860:	b2da      	uxtb	r2, r3
 800b862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b864:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b868:	3301      	adds	r3, #1
 800b86a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b86e:	3b01      	subs	r3, #1
 800b870:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b874:	0c1b      	lsrs	r3, r3, #16
 800b876:	b2da      	uxtb	r2, r3
 800b878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b87a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b87e:	3301      	adds	r3, #1
 800b880:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b884:	3b01      	subs	r3, #1
 800b886:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88a:	0e1b      	lsrs	r3, r3, #24
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b890:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b894:	3301      	adds	r3, #1
 800b896:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b89a:	3b01      	subs	r3, #1
 800b89c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b89e:	f7fa fe99 	bl	80065d4 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d902      	bls.n	800b8b4 <HAL_SD_ReadBlocks+0x350>
 800b8ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d112      	bne.n	800b8da <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a18      	ldr	r2, [pc, #96]	@ (800b91c <HAL_SD_ReadBlocks+0x3b8>)
 800b8ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e01b      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <HAL_SD_ReadBlocks+0x38a>
 800b8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1a6      	bne.n	800b83c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b8f6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	e006      	b.n	800b912 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b908:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
  }
}
 800b912:	4618      	mov	r0, r3
 800b914:	3748      	adds	r7, #72	@ 0x48
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	004005ff 	.word	0x004005ff

0800b920 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b092      	sub	sp, #72	@ 0x48
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b92e:	f7fa fe51 	bl	80065d4 <HAL_GetTick>
 800b932:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d107      	bne.n	800b952 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b946:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e165      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	f040 8158 	bne.w	800bc10 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b966:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	441a      	add	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b970:	429a      	cmp	r2, r3
 800b972:	d907      	bls.n	800b984 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b978:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e14c      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2203      	movs	r2, #3
 800b988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d002      	beq.n	800b9a2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99e:	025b      	lsls	r3, r3, #9
 800b9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	025b      	lsls	r3, r3, #9
 800b9ac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b9ae:	2390      	movs	r3, #144	@ 0x90
 800b9b0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f107 0218 	add.w	r2, r7, #24
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f002 ff7a 	bl	800e8c2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d90a      	bls.n	800b9ea <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f003 f822 	bl	800ea2a <SDMMC_CmdWriteMultiBlock>
 800b9e6:	6478      	str	r0, [r7, #68]	@ 0x44
 800b9e8:	e009      	b.n	800b9fe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2210      	movs	r2, #16
 800b9ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f002 fff5 	bl	800e9e6 <SDMMC_CmdWriteSingleBlock>
 800b9fc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d012      	beq.n	800ba2a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a87      	ldr	r2, [pc, #540]	@ (800bc28 <HAL_SD_WriteBlocks+0x308>)
 800ba0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba12:	431a      	orrs	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e0f9      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800ba2e:	e065      	b.n	800bafc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d040      	beq.n	800bac0 <HAL_SD_WriteBlocks+0x1a0>
 800ba3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d03d      	beq.n	800bac0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800ba44:	2300      	movs	r3, #0
 800ba46:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba48:	e037      	b.n	800baba <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800ba4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba52:	3301      	adds	r3, #1
 800ba54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ba56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800ba5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	021a      	lsls	r2, r3, #8
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ba6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba70:	3b01      	subs	r3, #1
 800ba72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ba74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	041a      	lsls	r2, r3, #16
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba82:	3301      	adds	r3, #1
 800ba84:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ba86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ba8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	061a      	lsls	r2, r3, #24
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ba98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ba9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa0:	3b01      	subs	r3, #1
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f107 0214 	add.w	r2, r7, #20
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f002 fe90 	bl	800e7d4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bab6:	3301      	adds	r3, #1
 800bab8:	643b      	str	r3, [r7, #64]	@ 0x40
 800baba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800babc:	2b07      	cmp	r3, #7
 800babe:	d9c4      	bls.n	800ba4a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bac0:	f7fa fd88 	bl	80065d4 <HAL_GetTick>
 800bac4:	4602      	mov	r2, r0
 800bac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bacc:	429a      	cmp	r2, r3
 800bace:	d902      	bls.n	800bad6 <HAL_SD_WriteBlocks+0x1b6>
 800bad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d112      	bne.n	800bafc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a53      	ldr	r2, [pc, #332]	@ (800bc28 <HAL_SD_WriteBlocks+0x308>)
 800badc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bae4:	431a      	orrs	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2200      	movs	r2, #0
 800baf6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800baf8:	2303      	movs	r3, #3
 800bafa:	e090      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb02:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d092      	beq.n	800ba30 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d022      	beq.n	800bb5e <HAL_SD_WriteBlocks+0x23e>
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d91f      	bls.n	800bb5e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d01b      	beq.n	800bb5e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f002 ffa0 	bl	800ea70 <SDMMC_CmdStopTransfer>
 800bb30:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bb32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d012      	beq.n	800bb5e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a3a      	ldr	r2, [pc, #232]	@ (800bc28 <HAL_SD_WriteBlocks+0x308>)
 800bb3e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb46:	431a      	orrs	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e05f      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d012      	beq.n	800bb92 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a2d      	ldr	r2, [pc, #180]	@ (800bc28 <HAL_SD_WriteBlocks+0x308>)
 800bb72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb78:	f043 0208 	orr.w	r2, r3, #8
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e045      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb98:	f003 0302 	and.w	r3, r3, #2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d012      	beq.n	800bbc6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a20      	ldr	r2, [pc, #128]	@ (800bc28 <HAL_SD_WriteBlocks+0x308>)
 800bba6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbac:	f043 0202 	orr.w	r2, r3, #2
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e02b      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbcc:	f003 0310 	and.w	r3, r3, #16
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d012      	beq.n	800bbfa <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a13      	ldr	r2, [pc, #76]	@ (800bc28 <HAL_SD_WriteBlocks+0x308>)
 800bbda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe0:	f043 0210 	orr.w	r2, r3, #16
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e011      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f240 523a 	movw	r2, #1338	@ 0x53a
 800bc02:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	e006      	b.n	800bc1e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
  }
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3748      	adds	r7, #72	@ 0x48
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	004005ff 	.word	0x004005ff

0800bc2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc3a:	0f9b      	lsrs	r3, r3, #30
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc46:	0e9b      	lsrs	r3, r3, #26
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	f003 030f 	and.w	r3, r3, #15
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc58:	0e1b      	lsrs	r3, r3, #24
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc6a:	0c1b      	lsrs	r3, r3, #16
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc76:	0a1b      	lsrs	r3, r3, #8
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc8c:	0d1b      	lsrs	r3, r3, #20
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bc98:	0c1b      	lsrs	r3, r3, #16
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcaa:	0bdb      	lsrs	r3, r3, #15
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcbc:	0b9b      	lsrs	r3, r3, #14
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bcce:	0b5b      	lsrs	r3, r3, #13
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bce0:	0b1b      	lsrs	r3, r3, #12
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d163      	bne.n	800bdc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd00:	009a      	lsls	r2, r3, #2
 800bd02:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bd06:	4013      	ands	r3, r2
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800bd0c:	0f92      	lsrs	r2, r2, #30
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd18:	0edb      	lsrs	r3, r3, #27
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	f003 0307 	and.w	r3, r3, #7
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd2a:	0e1b      	lsrs	r3, r3, #24
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	f003 0307 	and.w	r3, r3, #7
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd3c:	0d5b      	lsrs	r3, r3, #21
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 0307 	and.w	r3, r3, #7
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd4e:	0c9b      	lsrs	r3, r3, #18
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0307 	and.w	r3, r3, #7
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd60:	0bdb      	lsrs	r3, r3, #15
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	f003 0307 	and.w	r3, r3, #7
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	7e1b      	ldrb	r3, [r3, #24]
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f003 0307 	and.w	r3, r3, #7
 800bd82:	3302      	adds	r3, #2
 800bd84:	2201      	movs	r2, #1
 800bd86:	fa02 f303 	lsl.w	r3, r2, r3
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800bd8e:	fb03 f202 	mul.w	r2, r3, r2
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	7a1b      	ldrb	r3, [r3, #8]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	2201      	movs	r2, #1
 800bda2:	409a      	lsls	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800bdb0:	0a52      	lsrs	r2, r2, #9
 800bdb2:	fb03 f202 	mul.w	r2, r3, r2
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdc0:	661a      	str	r2, [r3, #96]	@ 0x60
 800bdc2:	e031      	b.n	800be28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d11d      	bne.n	800be08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdd0:	041b      	lsls	r3, r3, #16
 800bdd2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdda:	0c1b      	lsrs	r3, r3, #16
 800bddc:	431a      	orrs	r2, r3
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	3301      	adds	r3, #1
 800bde8:	029a      	lsls	r2, r3, #10
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdfc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	661a      	str	r2, [r3, #96]	@ 0x60
 800be06:	e00f      	b.n	800be28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a58      	ldr	r2, [pc, #352]	@ (800bf70 <HAL_SD_GetCardCSD+0x344>)
 800be0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e09d      	b.n	800bf64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be2c:	0b9b      	lsrs	r3, r3, #14
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	b2da      	uxtb	r2, r3
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be3e:	09db      	lsrs	r3, r3, #7
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be46:	b2da      	uxtb	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be50:	b2db      	uxtb	r3, r3
 800be52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be56:	b2da      	uxtb	r2, r3
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be60:	0fdb      	lsrs	r3, r3, #31
 800be62:	b2da      	uxtb	r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be6c:	0f5b      	lsrs	r3, r3, #29
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	f003 0303 	and.w	r3, r3, #3
 800be74:	b2da      	uxtb	r2, r3
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be7e:	0e9b      	lsrs	r3, r3, #26
 800be80:	b2db      	uxtb	r3, r3
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	b2da      	uxtb	r2, r3
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be90:	0d9b      	lsrs	r3, r3, #22
 800be92:	b2db      	uxtb	r3, r3
 800be94:	f003 030f 	and.w	r3, r3, #15
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea2:	0d5b      	lsrs	r3, r3, #21
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bebe:	0c1b      	lsrs	r3, r3, #16
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bed2:	0bdb      	lsrs	r3, r3, #15
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bee6:	0b9b      	lsrs	r3, r3, #14
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800befa:	0b5b      	lsrs	r3, r3, #13
 800befc:	b2db      	uxtb	r3, r3
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf0e:	0b1b      	lsrs	r3, r3, #12
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf22:	0a9b      	lsrs	r3, r3, #10
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	f003 0303 	and.w	r3, r3, #3
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf36:	0a1b      	lsrs	r3, r3, #8
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf4a:	085b      	lsrs	r3, r3, #1
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	004005ff 	.word	0x004005ff

0800bf74 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bfd8:	f107 030c 	add.w	r3, r7, #12
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f970 	bl	800c2c4 <SD_SendStatus>
 800bfe4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	0a5b      	lsrs	r3, r3, #9
 800bffc:	f003 030f 	and.w	r3, r3, #15
 800c000:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c002:	693b      	ldr	r3, [r7, #16]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c00c:	b5b0      	push	{r4, r5, r7, lr}
 800c00e:	b094      	sub	sp, #80	@ 0x50
 800c010:	af04      	add	r7, sp, #16
 800c012:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c014:	2301      	movs	r3, #1
 800c016:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f002 fbf8 	bl	800e812 <SDIO_GetPowerState>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c028:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c02c:	e0b8      	b.n	800c1a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c032:	2b03      	cmp	r3, #3
 800c034:	d02f      	beq.n	800c096 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f002 fddf 	bl	800ebfe <SDMMC_CmdSendCID>
 800c040:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <SD_InitCard+0x40>
    {
      return errorstate;
 800c048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04a:	e0a9      	b.n	800c1a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2100      	movs	r1, #0
 800c052:	4618      	mov	r0, r3
 800c054:	f002 fc22 	bl	800e89c <SDIO_GetResponse>
 800c058:	4602      	mov	r2, r0
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2104      	movs	r1, #4
 800c064:	4618      	mov	r0, r3
 800c066:	f002 fc19 	bl	800e89c <SDIO_GetResponse>
 800c06a:	4602      	mov	r2, r0
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2108      	movs	r1, #8
 800c076:	4618      	mov	r0, r3
 800c078:	f002 fc10 	bl	800e89c <SDIO_GetResponse>
 800c07c:	4602      	mov	r2, r0
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	210c      	movs	r1, #12
 800c088:	4618      	mov	r0, r3
 800c08a:	f002 fc07 	bl	800e89c <SDIO_GetResponse>
 800c08e:	4602      	mov	r2, r0
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09a:	2b03      	cmp	r3, #3
 800c09c:	d00d      	beq.n	800c0ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f107 020e 	add.w	r2, r7, #14
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f002 fde5 	bl	800ec78 <SDMMC_CmdSetRelAdd>
 800c0ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <SD_InitCard+0xae>
    {
      return errorstate;
 800c0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0b8:	e072      	b.n	800c1a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d036      	beq.n	800c130 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c0c2:	89fb      	ldrh	r3, [r7, #14]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0d2:	041b      	lsls	r3, r3, #16
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	f002 fdaf 	bl	800ec3a <SDMMC_CmdSendCSD>
 800c0dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e6:	e05b      	b.n	800c1a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f002 fbd4 	bl	800e89c <SDIO_GetResponse>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2104      	movs	r1, #4
 800c100:	4618      	mov	r0, r3
 800c102:	f002 fbcb 	bl	800e89c <SDIO_GetResponse>
 800c106:	4602      	mov	r2, r0
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2108      	movs	r1, #8
 800c112:	4618      	mov	r0, r3
 800c114:	f002 fbc2 	bl	800e89c <SDIO_GetResponse>
 800c118:	4602      	mov	r2, r0
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	210c      	movs	r1, #12
 800c124:	4618      	mov	r0, r3
 800c126:	f002 fbb9 	bl	800e89c <SDIO_GetResponse>
 800c12a:	4602      	mov	r2, r0
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2104      	movs	r1, #4
 800c136:	4618      	mov	r0, r3
 800c138:	f002 fbb0 	bl	800e89c <SDIO_GetResponse>
 800c13c:	4603      	mov	r3, r0
 800c13e:	0d1a      	lsrs	r2, r3, #20
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c144:	f107 0310 	add.w	r3, r7, #16
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff fd6e 	bl	800bc2c <HAL_SD_GetCardCSD>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c156:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c15a:	e021      	b.n	800c1a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6819      	ldr	r1, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c164:	041b      	lsls	r3, r3, #16
 800c166:	2200      	movs	r2, #0
 800c168:	461c      	mov	r4, r3
 800c16a:	4615      	mov	r5, r2
 800c16c:	4622      	mov	r2, r4
 800c16e:	462b      	mov	r3, r5
 800c170:	4608      	mov	r0, r1
 800c172:	f002 fc9f 	bl	800eab4 <SDMMC_CmdSelDesel>
 800c176:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <SD_InitCard+0x176>
  {
    return errorstate;
 800c17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c180:	e00e      	b.n	800c1a0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681d      	ldr	r5, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	466c      	mov	r4, sp
 800c18a:	f103 0210 	add.w	r2, r3, #16
 800c18e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c194:	3304      	adds	r3, #4
 800c196:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c198:	4628      	mov	r0, r5
 800c19a:	f002 fae3 	bl	800e764 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3740      	adds	r7, #64	@ 0x40
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bdb0      	pop	{r4, r5, r7, pc}

0800c1a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	617b      	str	r3, [r7, #20]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f002 fc9a 	bl	800eafa <SDMMC_CmdGoIdleState>
 800c1c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	e072      	b.n	800c2b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f002 fcad 	bl	800eb36 <SDMMC_CmdOperCond>
 800c1dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00d      	beq.n	800c200 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f002 fc83 	bl	800eafa <SDMMC_CmdGoIdleState>
 800c1f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d004      	beq.n	800c206 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	e05b      	b.n	800c2b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d137      	bne.n	800c27e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2100      	movs	r1, #0
 800c214:	4618      	mov	r0, r3
 800c216:	f002 fcad 	bl	800eb74 <SDMMC_CmdAppCommand>
 800c21a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d02d      	beq.n	800c27e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c222:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c226:	e047      	b.n	800c2b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f002 fca0 	bl	800eb74 <SDMMC_CmdAppCommand>
 800c234:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <SD_PowerON+0x98>
    {
      return errorstate;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	e03b      	b.n	800c2b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	491e      	ldr	r1, [pc, #120]	@ (800c2c0 <SD_PowerON+0x118>)
 800c246:	4618      	mov	r0, r3
 800c248:	f002 fcb6 	bl	800ebb8 <SDMMC_CmdAppOperCommand>
 800c24c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c254:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c258:	e02e      	b.n	800c2b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2100      	movs	r1, #0
 800c260:	4618      	mov	r0, r3
 800c262:	f002 fb1b 	bl	800e89c <SDIO_GetResponse>
 800c266:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	0fdb      	lsrs	r3, r3, #31
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d101      	bne.n	800c274 <SD_PowerON+0xcc>
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <SD_PowerON+0xce>
 800c274:	2300      	movs	r3, #0
 800c276:	613b      	str	r3, [r7, #16]

    count++;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	3301      	adds	r3, #1
 800c27c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c284:	4293      	cmp	r3, r2
 800c286:	d802      	bhi.n	800c28e <SD_PowerON+0xe6>
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d0cc      	beq.n	800c228 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c294:	4293      	cmp	r3, r2
 800c296:	d902      	bls.n	800c29e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c29c:	e00c      	b.n	800c2b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d003      	beq.n	800c2b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	645a      	str	r2, [r3, #68]	@ 0x44
 800c2ae:	e002      	b.n	800c2b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	c1100000 	.word	0xc1100000

0800c2c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c2d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c2d8:	e018      	b.n	800c30c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2e2:	041b      	lsls	r3, r3, #16
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	f002 fce7 	bl	800ecba <SDMMC_CmdSendStatus>
 800c2ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	e009      	b.n	800c30c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	4618      	mov	r0, r3
 800c300:	f002 facc 	bl	800e89c <SDIO_GetResponse>
 800c304:	4602      	mov	r2, r0
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e07b      	b.n	800c41e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d108      	bne.n	800c340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c336:	d009      	beq.n	800c34c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	61da      	str	r2, [r3, #28]
 800c33e:	e005      	b.n	800c34c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7f9 f8b2 	bl	80054d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800c394:	431a      	orrs	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	f003 0302 	and.w	r3, r3, #2
 800c3a8:	431a      	orrs	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	69db      	ldr	r3, [r3, #28]
 800c3c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3d0:	ea42 0103 	orr.w	r1, r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	0c1b      	lsrs	r3, r3, #16
 800c3ea:	f003 0104 	and.w	r1, r3, #4
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f2:	f003 0210 	and.w	r2, r3, #16
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69da      	ldr	r2, [r3, #28]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c40c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e041      	b.n	800c4bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	d106      	bne.n	800c452 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7f9 f887 	bl	8005560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2202      	movs	r2, #2
 800c456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3304      	adds	r3, #4
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f000 fcd5 	bl	800ce14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d001      	beq.n	800c4dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e046      	b.n	800c56a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a23      	ldr	r2, [pc, #140]	@ (800c578 <HAL_TIM_Base_Start+0xb4>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d022      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4f6:	d01d      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a1f      	ldr	r2, [pc, #124]	@ (800c57c <HAL_TIM_Base_Start+0xb8>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d018      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a1e      	ldr	r2, [pc, #120]	@ (800c580 <HAL_TIM_Base_Start+0xbc>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d013      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a1c      	ldr	r2, [pc, #112]	@ (800c584 <HAL_TIM_Base_Start+0xc0>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d00e      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a1b      	ldr	r2, [pc, #108]	@ (800c588 <HAL_TIM_Base_Start+0xc4>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d009      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a19      	ldr	r2, [pc, #100]	@ (800c58c <HAL_TIM_Base_Start+0xc8>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d004      	beq.n	800c534 <HAL_TIM_Base_Start+0x70>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a18      	ldr	r2, [pc, #96]	@ (800c590 <HAL_TIM_Base_Start+0xcc>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d111      	bne.n	800c558 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b06      	cmp	r3, #6
 800c544:	d010      	beq.n	800c568 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f042 0201 	orr.w	r2, r2, #1
 800c554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c556:	e007      	b.n	800c568 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f042 0201 	orr.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	40010000 	.word	0x40010000
 800c57c:	40000400 	.word	0x40000400
 800c580:	40000800 	.word	0x40000800
 800c584:	40000c00 	.word	0x40000c00
 800c588:	40010400 	.word	0x40010400
 800c58c:	40014000 	.word	0x40014000
 800c590:	40001800 	.word	0x40001800

0800c594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e041      	b.n	800c62a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f839 	bl	800c632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	f000 fc1e 	bl	800ce14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c632:	b480      	push	{r7}
 800c634:	b083      	sub	sp, #12
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
	...

0800c648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d109      	bne.n	800c66c <HAL_TIM_PWM_Start+0x24>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b01      	cmp	r3, #1
 800c662:	bf14      	ite	ne
 800c664:	2301      	movne	r3, #1
 800c666:	2300      	moveq	r3, #0
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	e022      	b.n	800c6b2 <HAL_TIM_PWM_Start+0x6a>
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2b04      	cmp	r3, #4
 800c670:	d109      	bne.n	800c686 <HAL_TIM_PWM_Start+0x3e>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	bf14      	ite	ne
 800c67e:	2301      	movne	r3, #1
 800c680:	2300      	moveq	r3, #0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	e015      	b.n	800c6b2 <HAL_TIM_PWM_Start+0x6a>
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b08      	cmp	r3, #8
 800c68a:	d109      	bne.n	800c6a0 <HAL_TIM_PWM_Start+0x58>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b01      	cmp	r3, #1
 800c696:	bf14      	ite	ne
 800c698:	2301      	movne	r3, #1
 800c69a:	2300      	moveq	r3, #0
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	e008      	b.n	800c6b2 <HAL_TIM_PWM_Start+0x6a>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	bf14      	ite	ne
 800c6ac:	2301      	movne	r3, #1
 800c6ae:	2300      	moveq	r3, #0
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e07c      	b.n	800c7b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d104      	bne.n	800c6ca <HAL_TIM_PWM_Start+0x82>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6c8:	e013      	b.n	800c6f2 <HAL_TIM_PWM_Start+0xaa>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d104      	bne.n	800c6da <HAL_TIM_PWM_Start+0x92>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6d8:	e00b      	b.n	800c6f2 <HAL_TIM_PWM_Start+0xaa>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b08      	cmp	r3, #8
 800c6de:	d104      	bne.n	800c6ea <HAL_TIM_PWM_Start+0xa2>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6e8:	e003      	b.n	800c6f2 <HAL_TIM_PWM_Start+0xaa>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2202      	movs	r2, #2
 800c6ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	6839      	ldr	r1, [r7, #0]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fe74 	bl	800d3e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a2d      	ldr	r2, [pc, #180]	@ (800c7bc <HAL_TIM_PWM_Start+0x174>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d004      	beq.n	800c714 <HAL_TIM_PWM_Start+0xcc>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a2c      	ldr	r2, [pc, #176]	@ (800c7c0 <HAL_TIM_PWM_Start+0x178>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d101      	bne.n	800c718 <HAL_TIM_PWM_Start+0xd0>
 800c714:	2301      	movs	r3, #1
 800c716:	e000      	b.n	800c71a <HAL_TIM_PWM_Start+0xd2>
 800c718:	2300      	movs	r3, #0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d007      	beq.n	800c72e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c72c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a22      	ldr	r2, [pc, #136]	@ (800c7bc <HAL_TIM_PWM_Start+0x174>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d022      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c740:	d01d      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a1f      	ldr	r2, [pc, #124]	@ (800c7c4 <HAL_TIM_PWM_Start+0x17c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d018      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a1d      	ldr	r2, [pc, #116]	@ (800c7c8 <HAL_TIM_PWM_Start+0x180>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d013      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a1c      	ldr	r2, [pc, #112]	@ (800c7cc <HAL_TIM_PWM_Start+0x184>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00e      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a16      	ldr	r2, [pc, #88]	@ (800c7c0 <HAL_TIM_PWM_Start+0x178>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d009      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a18      	ldr	r2, [pc, #96]	@ (800c7d0 <HAL_TIM_PWM_Start+0x188>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d004      	beq.n	800c77e <HAL_TIM_PWM_Start+0x136>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a16      	ldr	r2, [pc, #88]	@ (800c7d4 <HAL_TIM_PWM_Start+0x18c>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d111      	bne.n	800c7a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	f003 0307 	and.w	r3, r3, #7
 800c788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b06      	cmp	r3, #6
 800c78e:	d010      	beq.n	800c7b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0201 	orr.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a0:	e007      	b.n	800c7b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f042 0201 	orr.w	r2, r2, #1
 800c7b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	40010000 	.word	0x40010000
 800c7c0:	40010400 	.word	0x40010400
 800c7c4:	40000400 	.word	0x40000400
 800c7c8:	40000800 	.word	0x40000800
 800c7cc:	40000c00 	.word	0x40000c00
 800c7d0:	40014000 	.word	0x40014000
 800c7d4:	40001800 	.word	0x40001800

0800c7d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e041      	b.n	800c870 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f839 	bl	800c878 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2202      	movs	r2, #2
 800c80a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3304      	adds	r3, #4
 800c816:	4619      	mov	r1, r3
 800c818:	4610      	mov	r0, r2
 800c81a:	f000 fafb 	bl	800ce14 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f022 0208 	bic.w	r2, r2, #8
 800c82c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6819      	ldr	r1, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	430a      	orrs	r2, r1
 800c83c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	f003 0302 	and.w	r3, r3, #2
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d122      	bne.n	800c8e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d11b      	bne.n	800c8e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f06f 0202 	mvn.w	r2, #2
 800c8b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	699b      	ldr	r3, [r3, #24]
 800c8c6:	f003 0303 	and.w	r3, r3, #3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d003      	beq.n	800c8d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fa81 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800c8d4:	e005      	b.n	800c8e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fa73 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fa84 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	f003 0304 	and.w	r3, r3, #4
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d122      	bne.n	800c93c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	f003 0304 	and.w	r3, r3, #4
 800c900:	2b04      	cmp	r3, #4
 800c902:	d11b      	bne.n	800c93c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f06f 0204 	mvn.w	r2, #4
 800c90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2202      	movs	r2, #2
 800c912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d003      	beq.n	800c92a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa57 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800c928:	e005      	b.n	800c936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fa49 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fa5a 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	f003 0308 	and.w	r3, r3, #8
 800c946:	2b08      	cmp	r3, #8
 800c948:	d122      	bne.n	800c990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	f003 0308 	and.w	r3, r3, #8
 800c954:	2b08      	cmp	r3, #8
 800c956:	d11b      	bne.n	800c990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f06f 0208 	mvn.w	r2, #8
 800c960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2204      	movs	r2, #4
 800c966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	f003 0303 	and.w	r3, r3, #3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d003      	beq.n	800c97e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa2d 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800c97c:	e005      	b.n	800c98a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fa1f 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fa30 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	f003 0310 	and.w	r3, r3, #16
 800c99a:	2b10      	cmp	r3, #16
 800c99c:	d122      	bne.n	800c9e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	f003 0310 	and.w	r3, r3, #16
 800c9a8:	2b10      	cmp	r3, #16
 800c9aa:	d11b      	bne.n	800c9e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f06f 0210 	mvn.w	r2, #16
 800c9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2208      	movs	r2, #8
 800c9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa03 	bl	800cdd6 <HAL_TIM_IC_CaptureCallback>
 800c9d0:	e005      	b.n	800c9de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f9f5 	bl	800cdc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fa06 	bl	800cdea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d10e      	bne.n	800ca10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d107      	bne.n	800ca10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f06f 0201 	mvn.w	r2, #1
 800ca08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f9cf 	bl	800cdae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca1a:	2b80      	cmp	r3, #128	@ 0x80
 800ca1c:	d10e      	bne.n	800ca3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca28:	2b80      	cmp	r3, #128	@ 0x80
 800ca2a:	d107      	bne.n	800ca3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ca34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fdd4 	bl	800d5e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca46:	2b40      	cmp	r3, #64	@ 0x40
 800ca48:	d10e      	bne.n	800ca68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca54:	2b40      	cmp	r3, #64	@ 0x40
 800ca56:	d107      	bne.n	800ca68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ca60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f9cb 	bl	800cdfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	f003 0320 	and.w	r3, r3, #32
 800ca72:	2b20      	cmp	r3, #32
 800ca74:	d10e      	bne.n	800ca94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d107      	bne.n	800ca94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f06f 0220 	mvn.w	r2, #32
 800ca8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fd9e 	bl	800d5d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d101      	bne.n	800caba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cab6:	2302      	movs	r3, #2
 800cab8:	e0ae      	b.n	800cc18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b0c      	cmp	r3, #12
 800cac6:	f200 809f 	bhi.w	800cc08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800caca:	a201      	add	r2, pc, #4	@ (adr r2, 800cad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad0:	0800cb05 	.word	0x0800cb05
 800cad4:	0800cc09 	.word	0x0800cc09
 800cad8:	0800cc09 	.word	0x0800cc09
 800cadc:	0800cc09 	.word	0x0800cc09
 800cae0:	0800cb45 	.word	0x0800cb45
 800cae4:	0800cc09 	.word	0x0800cc09
 800cae8:	0800cc09 	.word	0x0800cc09
 800caec:	0800cc09 	.word	0x0800cc09
 800caf0:	0800cb87 	.word	0x0800cb87
 800caf4:	0800cc09 	.word	0x0800cc09
 800caf8:	0800cc09 	.word	0x0800cc09
 800cafc:	0800cc09 	.word	0x0800cc09
 800cb00:	0800cbc7 	.word	0x0800cbc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68b9      	ldr	r1, [r7, #8]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fa22 	bl	800cf54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	699a      	ldr	r2, [r3, #24]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f042 0208 	orr.w	r2, r2, #8
 800cb1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699a      	ldr	r2, [r3, #24]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f022 0204 	bic.w	r2, r2, #4
 800cb2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6999      	ldr	r1, [r3, #24]
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	691a      	ldr	r2, [r3, #16]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	619a      	str	r2, [r3, #24]
      break;
 800cb42:	e064      	b.n	800cc0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 fa72 	bl	800d034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	699a      	ldr	r2, [r3, #24]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	699a      	ldr	r2, [r3, #24]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6999      	ldr	r1, [r3, #24]
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	021a      	lsls	r2, r3, #8
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	430a      	orrs	r2, r1
 800cb82:	619a      	str	r2, [r3, #24]
      break;
 800cb84:	e043      	b.n	800cc0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 fac7 	bl	800d120 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69da      	ldr	r2, [r3, #28]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f042 0208 	orr.w	r2, r2, #8
 800cba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	69da      	ldr	r2, [r3, #28]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f022 0204 	bic.w	r2, r2, #4
 800cbb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	69d9      	ldr	r1, [r3, #28]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	691a      	ldr	r2, [r3, #16]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	61da      	str	r2, [r3, #28]
      break;
 800cbc4:	e023      	b.n	800cc0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68b9      	ldr	r1, [r7, #8]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fb1b 	bl	800d208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	69da      	ldr	r2, [r3, #28]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	69da      	ldr	r2, [r3, #28]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	69d9      	ldr	r1, [r3, #28]
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	021a      	lsls	r2, r3, #8
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	61da      	str	r2, [r3, #28]
      break;
 800cc06:	e002      	b.n	800cc0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	75fb      	strb	r3, [r7, #23]
      break;
 800cc0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d101      	bne.n	800cc3c <HAL_TIM_ConfigClockSource+0x1c>
 800cc38:	2302      	movs	r3, #2
 800cc3a:	e0b4      	b.n	800cda6 <HAL_TIM_ConfigClockSource+0x186>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cc5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc74:	d03e      	beq.n	800ccf4 <HAL_TIM_ConfigClockSource+0xd4>
 800cc76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc7a:	f200 8087 	bhi.w	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800cc7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc82:	f000 8086 	beq.w	800cd92 <HAL_TIM_ConfigClockSource+0x172>
 800cc86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc8a:	d87f      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800cc8c:	2b70      	cmp	r3, #112	@ 0x70
 800cc8e:	d01a      	beq.n	800ccc6 <HAL_TIM_ConfigClockSource+0xa6>
 800cc90:	2b70      	cmp	r3, #112	@ 0x70
 800cc92:	d87b      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800cc94:	2b60      	cmp	r3, #96	@ 0x60
 800cc96:	d050      	beq.n	800cd3a <HAL_TIM_ConfigClockSource+0x11a>
 800cc98:	2b60      	cmp	r3, #96	@ 0x60
 800cc9a:	d877      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800cc9c:	2b50      	cmp	r3, #80	@ 0x50
 800cc9e:	d03c      	beq.n	800cd1a <HAL_TIM_ConfigClockSource+0xfa>
 800cca0:	2b50      	cmp	r3, #80	@ 0x50
 800cca2:	d873      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800cca4:	2b40      	cmp	r3, #64	@ 0x40
 800cca6:	d058      	beq.n	800cd5a <HAL_TIM_ConfigClockSource+0x13a>
 800cca8:	2b40      	cmp	r3, #64	@ 0x40
 800ccaa:	d86f      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800ccac:	2b30      	cmp	r3, #48	@ 0x30
 800ccae:	d064      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x15a>
 800ccb0:	2b30      	cmp	r3, #48	@ 0x30
 800ccb2:	d86b      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800ccb4:	2b20      	cmp	r3, #32
 800ccb6:	d060      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x15a>
 800ccb8:	2b20      	cmp	r3, #32
 800ccba:	d867      	bhi.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d05c      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x15a>
 800ccc0:	2b10      	cmp	r3, #16
 800ccc2:	d05a      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x15a>
 800ccc4:	e062      	b.n	800cd8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6818      	ldr	r0, [r3, #0]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	6899      	ldr	r1, [r3, #8]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	f000 fb67 	bl	800d3a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	609a      	str	r2, [r3, #8]
      break;
 800ccf2:	e04f      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6818      	ldr	r0, [r3, #0]
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	6899      	ldr	r1, [r3, #8]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	f000 fb50 	bl	800d3a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	689a      	ldr	r2, [r3, #8]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cd16:	609a      	str	r2, [r3, #8]
      break;
 800cd18:	e03c      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	6859      	ldr	r1, [r3, #4]
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	461a      	mov	r2, r3
 800cd28:	f000 fac4 	bl	800d2b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2150      	movs	r1, #80	@ 0x50
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 fb1d 	bl	800d372 <TIM_ITRx_SetConfig>
      break;
 800cd38:	e02c      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	6859      	ldr	r1, [r3, #4]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	461a      	mov	r2, r3
 800cd48:	f000 fae3 	bl	800d312 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2160      	movs	r1, #96	@ 0x60
 800cd52:	4618      	mov	r0, r3
 800cd54:	f000 fb0d 	bl	800d372 <TIM_ITRx_SetConfig>
      break;
 800cd58:	e01c      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	6859      	ldr	r1, [r3, #4]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	461a      	mov	r2, r3
 800cd68:	f000 faa4 	bl	800d2b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2140      	movs	r1, #64	@ 0x40
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 fafd 	bl	800d372 <TIM_ITRx_SetConfig>
      break;
 800cd78:	e00c      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4619      	mov	r1, r3
 800cd84:	4610      	mov	r0, r2
 800cd86:	f000 faf4 	bl	800d372 <TIM_ITRx_SetConfig>
      break;
 800cd8a:	e003      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd90:	e000      	b.n	800cd94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cd92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cdb6:	bf00      	nop
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cdca:	bf00      	nop
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cdde:	bf00      	nop
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdf2:	bf00      	nop
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ce06:	bf00      	nop
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
	...

0800ce14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4a40      	ldr	r2, [pc, #256]	@ (800cf28 <TIM_Base_SetConfig+0x114>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d013      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce32:	d00f      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a3d      	ldr	r2, [pc, #244]	@ (800cf2c <TIM_Base_SetConfig+0x118>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d00b      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a3c      	ldr	r2, [pc, #240]	@ (800cf30 <TIM_Base_SetConfig+0x11c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d007      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a3b      	ldr	r2, [pc, #236]	@ (800cf34 <TIM_Base_SetConfig+0x120>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d003      	beq.n	800ce54 <TIM_Base_SetConfig+0x40>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a3a      	ldr	r2, [pc, #232]	@ (800cf38 <TIM_Base_SetConfig+0x124>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d108      	bne.n	800ce66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a2f      	ldr	r2, [pc, #188]	@ (800cf28 <TIM_Base_SetConfig+0x114>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d02b      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce74:	d027      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a2c      	ldr	r2, [pc, #176]	@ (800cf2c <TIM_Base_SetConfig+0x118>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d023      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4a2b      	ldr	r2, [pc, #172]	@ (800cf30 <TIM_Base_SetConfig+0x11c>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d01f      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4a2a      	ldr	r2, [pc, #168]	@ (800cf34 <TIM_Base_SetConfig+0x120>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d01b      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4a29      	ldr	r2, [pc, #164]	@ (800cf38 <TIM_Base_SetConfig+0x124>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d017      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4a28      	ldr	r2, [pc, #160]	@ (800cf3c <TIM_Base_SetConfig+0x128>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d013      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4a27      	ldr	r2, [pc, #156]	@ (800cf40 <TIM_Base_SetConfig+0x12c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d00f      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a26      	ldr	r2, [pc, #152]	@ (800cf44 <TIM_Base_SetConfig+0x130>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d00b      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a25      	ldr	r2, [pc, #148]	@ (800cf48 <TIM_Base_SetConfig+0x134>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d007      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a24      	ldr	r2, [pc, #144]	@ (800cf4c <TIM_Base_SetConfig+0x138>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d003      	beq.n	800cec6 <TIM_Base_SetConfig+0xb2>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a23      	ldr	r2, [pc, #140]	@ (800cf50 <TIM_Base_SetConfig+0x13c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d108      	bne.n	800ced8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	695b      	ldr	r3, [r3, #20]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	689a      	ldr	r2, [r3, #8]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a0a      	ldr	r2, [pc, #40]	@ (800cf28 <TIM_Base_SetConfig+0x114>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d003      	beq.n	800cf0c <TIM_Base_SetConfig+0xf8>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a0c      	ldr	r2, [pc, #48]	@ (800cf38 <TIM_Base_SetConfig+0x124>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d103      	bne.n	800cf14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	691a      	ldr	r2, [r3, #16]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	615a      	str	r2, [r3, #20]
}
 800cf1a:	bf00      	nop
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	40010000 	.word	0x40010000
 800cf2c:	40000400 	.word	0x40000400
 800cf30:	40000800 	.word	0x40000800
 800cf34:	40000c00 	.word	0x40000c00
 800cf38:	40010400 	.word	0x40010400
 800cf3c:	40014000 	.word	0x40014000
 800cf40:	40014400 	.word	0x40014400
 800cf44:	40014800 	.word	0x40014800
 800cf48:	40001800 	.word	0x40001800
 800cf4c:	40001c00 	.word	0x40001c00
 800cf50:	40002000 	.word	0x40002000

0800cf54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	f023 0201 	bic.w	r2, r3, #1
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f023 0302 	bic.w	r3, r3, #2
 800cf9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a20      	ldr	r2, [pc, #128]	@ (800d02c <TIM_OC1_SetConfig+0xd8>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d003      	beq.n	800cfb8 <TIM_OC1_SetConfig+0x64>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a1f      	ldr	r2, [pc, #124]	@ (800d030 <TIM_OC1_SetConfig+0xdc>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d10c      	bne.n	800cfd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f023 0308 	bic.w	r3, r3, #8
 800cfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f023 0304 	bic.w	r3, r3, #4
 800cfd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a15      	ldr	r2, [pc, #84]	@ (800d02c <TIM_OC1_SetConfig+0xd8>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d003      	beq.n	800cfe2 <TIM_OC1_SetConfig+0x8e>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a14      	ldr	r2, [pc, #80]	@ (800d030 <TIM_OC1_SetConfig+0xdc>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d111      	bne.n	800d006 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cfe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	4313      	orrs	r3, r2
 800d004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	621a      	str	r2, [r3, #32]
}
 800d020:	bf00      	nop
 800d022:	371c      	adds	r7, #28
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	40010000 	.word	0x40010000
 800d030:	40010400 	.word	0x40010400

0800d034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d034:	b480      	push	{r7}
 800d036:	b087      	sub	sp, #28
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	f023 0210 	bic.w	r2, r3, #16
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	4313      	orrs	r3, r2
 800d076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	f023 0320 	bic.w	r3, r3, #32
 800d07e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	011b      	lsls	r3, r3, #4
 800d086:	697a      	ldr	r2, [r7, #20]
 800d088:	4313      	orrs	r3, r2
 800d08a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a22      	ldr	r2, [pc, #136]	@ (800d118 <TIM_OC2_SetConfig+0xe4>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d003      	beq.n	800d09c <TIM_OC2_SetConfig+0x68>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a21      	ldr	r2, [pc, #132]	@ (800d11c <TIM_OC2_SetConfig+0xe8>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d10d      	bne.n	800d0b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	697a      	ldr	r2, [r7, #20]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a17      	ldr	r2, [pc, #92]	@ (800d118 <TIM_OC2_SetConfig+0xe4>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d003      	beq.n	800d0c8 <TIM_OC2_SetConfig+0x94>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a16      	ldr	r2, [pc, #88]	@ (800d11c <TIM_OC2_SetConfig+0xe8>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d113      	bne.n	800d0f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d0ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	695b      	ldr	r3, [r3, #20]
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	621a      	str	r2, [r3, #32]
}
 800d10a:	bf00      	nop
 800d10c:	371c      	adds	r7, #28
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	40010000 	.word	0x40010000
 800d11c:	40010400 	.word	0x40010400

0800d120 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	69db      	ldr	r3, [r3, #28]
 800d146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4313      	orrs	r3, r2
 800d160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	697a      	ldr	r2, [r7, #20]
 800d172:	4313      	orrs	r3, r2
 800d174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a21      	ldr	r2, [pc, #132]	@ (800d200 <TIM_OC3_SetConfig+0xe0>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d003      	beq.n	800d186 <TIM_OC3_SetConfig+0x66>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4a20      	ldr	r2, [pc, #128]	@ (800d204 <TIM_OC3_SetConfig+0xe4>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d10d      	bne.n	800d1a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d18c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	021b      	lsls	r3, r3, #8
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	4313      	orrs	r3, r2
 800d198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d1a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a16      	ldr	r2, [pc, #88]	@ (800d200 <TIM_OC3_SetConfig+0xe0>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d003      	beq.n	800d1b2 <TIM_OC3_SetConfig+0x92>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4a15      	ldr	r2, [pc, #84]	@ (800d204 <TIM_OC3_SetConfig+0xe4>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d113      	bne.n	800d1da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	699b      	ldr	r3, [r3, #24]
 800d1d2:	011b      	lsls	r3, r3, #4
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	693a      	ldr	r2, [r7, #16]
 800d1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	697a      	ldr	r2, [r7, #20]
 800d1f2:	621a      	str	r2, [r3, #32]
}
 800d1f4:	bf00      	nop
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	40010000 	.word	0x40010000
 800d204:	40010400 	.word	0x40010400

0800d208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d208:	b480      	push	{r7}
 800d20a:	b087      	sub	sp, #28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	69db      	ldr	r3, [r3, #28]
 800d22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d23e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	021b      	lsls	r3, r3, #8
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	4313      	orrs	r3, r2
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	031b      	lsls	r3, r3, #12
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	4313      	orrs	r3, r2
 800d25e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a12      	ldr	r2, [pc, #72]	@ (800d2ac <TIM_OC4_SetConfig+0xa4>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d003      	beq.n	800d270 <TIM_OC4_SetConfig+0x68>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a11      	ldr	r2, [pc, #68]	@ (800d2b0 <TIM_OC4_SetConfig+0xa8>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d109      	bne.n	800d284 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	019b      	lsls	r3, r3, #6
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	4313      	orrs	r3, r2
 800d282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	621a      	str	r2, [r3, #32]
}
 800d29e:	bf00      	nop
 800d2a0:	371c      	adds	r7, #28
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	40010000 	.word	0x40010000
 800d2b0:	40010400 	.word	0x40010400

0800d2b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6a1b      	ldr	r3, [r3, #32]
 800d2c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	f023 0201 	bic.w	r2, r3, #1
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d2de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	011b      	lsls	r3, r3, #4
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f023 030a 	bic.w	r3, r3, #10
 800d2f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	621a      	str	r2, [r3, #32]
}
 800d306:	bf00      	nop
 800d308:	371c      	adds	r7, #28
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d312:	b480      	push	{r7}
 800d314:	b087      	sub	sp, #28
 800d316:	af00      	add	r7, sp, #0
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	60b9      	str	r1, [r7, #8]
 800d31c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	f023 0210 	bic.w	r2, r3, #16
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d33c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	031b      	lsls	r3, r3, #12
 800d342:	697a      	ldr	r2, [r7, #20]
 800d344:	4313      	orrs	r3, r2
 800d346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d34e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	4313      	orrs	r3, r2
 800d358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	697a      	ldr	r2, [r7, #20]
 800d35e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	621a      	str	r2, [r3, #32]
}
 800d366:	bf00      	nop
 800d368:	371c      	adds	r7, #28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d372:	b480      	push	{r7}
 800d374:	b085      	sub	sp, #20
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	4313      	orrs	r3, r2
 800d390:	f043 0307 	orr.w	r3, r3, #7
 800d394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	609a      	str	r2, [r3, #8]
}
 800d39c:	bf00      	nop
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d3c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	021a      	lsls	r2, r3, #8
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	431a      	orrs	r2, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	609a      	str	r2, [r3, #8]
}
 800d3dc:	bf00      	nop
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b087      	sub	sp, #28
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f003 031f 	and.w	r3, r3, #31
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6a1a      	ldr	r2, [r3, #32]
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	43db      	mvns	r3, r3
 800d40a:	401a      	ands	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6a1a      	ldr	r2, [r3, #32]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	f003 031f 	and.w	r3, r3, #31
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	fa01 f303 	lsl.w	r3, r1, r3
 800d420:	431a      	orrs	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	621a      	str	r2, [r3, #32]
}
 800d426:	bf00      	nop
 800d428:	371c      	adds	r7, #28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
	...

0800d434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d444:	2b01      	cmp	r3, #1
 800d446:	d101      	bne.n	800d44c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d448:	2302      	movs	r3, #2
 800d44a:	e05a      	b.n	800d502 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2202      	movs	r2, #2
 800d458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a21      	ldr	r2, [pc, #132]	@ (800d510 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d022      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d498:	d01d      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a1d      	ldr	r2, [pc, #116]	@ (800d514 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d018      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d518 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d013      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a1a      	ldr	r2, [pc, #104]	@ (800d51c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d00e      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a18      	ldr	r2, [pc, #96]	@ (800d520 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d009      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a17      	ldr	r2, [pc, #92]	@ (800d524 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d004      	beq.n	800d4d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a15      	ldr	r2, [pc, #84]	@ (800d528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d10c      	bne.n	800d4f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3714      	adds	r7, #20
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	40010000 	.word	0x40010000
 800d514:	40000400 	.word	0x40000400
 800d518:	40000800 	.word	0x40000800
 800d51c:	40000c00 	.word	0x40000c00
 800d520:	40010400 	.word	0x40010400
 800d524:	40014000 	.word	0x40014000
 800d528:	40001800 	.word	0x40001800

0800d52c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d540:	2b01      	cmp	r3, #1
 800d542:	d101      	bne.n	800d548 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d544:	2302      	movs	r3, #2
 800d546:	e03d      	b.n	800d5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	4313      	orrs	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	4313      	orrs	r3, r2
 800d578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4313      	orrs	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	4313      	orrs	r3, r2
 800d594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	69db      	ldr	r3, [r3, #28]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e03f      	b.n	800d68a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7f8 f86c 	bl	80056fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2224      	movs	r2, #36	@ 0x24
 800d628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d63a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fe1d 	bl	800e27c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	691a      	ldr	r2, [r3, #16]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	695a      	ldr	r2, [r3, #20]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2220      	movs	r2, #32
 800d67c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2220      	movs	r2, #32
 800d684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b08a      	sub	sp, #40	@ 0x28
 800d696:	af02      	add	r7, sp, #8
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	603b      	str	r3, [r7, #0]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b20      	cmp	r3, #32
 800d6b0:	d17c      	bne.n	800d7ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <HAL_UART_Transmit+0x2c>
 800d6b8:	88fb      	ldrh	r3, [r7, #6]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d101      	bne.n	800d6c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e075      	b.n	800d7ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d101      	bne.n	800d6d0 <HAL_UART_Transmit+0x3e>
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	e06e      	b.n	800d7ae <HAL_UART_Transmit+0x11c>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2221      	movs	r2, #33	@ 0x21
 800d6e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6e6:	f7f8 ff75 	bl	80065d4 <HAL_GetTick>
 800d6ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	88fa      	ldrh	r2, [r7, #6]
 800d6f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d700:	d108      	bne.n	800d714 <HAL_UART_Transmit+0x82>
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d104      	bne.n	800d714 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	61bb      	str	r3, [r7, #24]
 800d712:	e003      	b.n	800d71c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d718:	2300      	movs	r3, #0
 800d71a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800d724:	e02a      	b.n	800d77c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2200      	movs	r2, #0
 800d72e:	2180      	movs	r1, #128	@ 0x80
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f000 fb9b 	bl	800de6c <UART_WaitOnFlagUntilTimeout>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e036      	b.n	800d7ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10b      	bne.n	800d75e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	3302      	adds	r3, #2
 800d75a:	61bb      	str	r3, [r7, #24]
 800d75c:	e007      	b.n	800d76e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	3301      	adds	r3, #1
 800d76c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d772:	b29b      	uxth	r3, r3
 800d774:	3b01      	subs	r3, #1
 800d776:	b29a      	uxth	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d780:	b29b      	uxth	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1cf      	bne.n	800d726 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2200      	movs	r2, #0
 800d78e:	2140      	movs	r1, #64	@ 0x40
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f000 fb6b 	bl	800de6c <UART_WaitOnFlagUntilTimeout>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d79c:	2303      	movs	r3, #3
 800d79e:	e006      	b.n	800d7ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2220      	movs	r2, #32
 800d7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	e000      	b.n	800d7ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d7ac:	2302      	movs	r3, #2
  }
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3720      	adds	r7, #32
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b08a      	sub	sp, #40	@ 0x28
 800d7ba:	af02      	add	r7, sp, #8
 800d7bc:	60f8      	str	r0, [r7, #12]
 800d7be:	60b9      	str	r1, [r7, #8]
 800d7c0:	603b      	str	r3, [r7, #0]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	2b20      	cmp	r3, #32
 800d7d4:	f040 808c 	bne.w	800d8f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <HAL_UART_Receive+0x2e>
 800d7de:	88fb      	ldrh	r3, [r7, #6]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e084      	b.n	800d8f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <HAL_UART_Receive+0x40>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	e07d      	b.n	800d8f2 <HAL_UART_Receive+0x13c>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2222      	movs	r2, #34	@ 0x22
 800d808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d812:	f7f8 fedf 	bl	80065d4 <HAL_GetTick>
 800d816:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	88fa      	ldrh	r2, [r7, #6]
 800d81c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	88fa      	ldrh	r2, [r7, #6]
 800d822:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d82c:	d108      	bne.n	800d840 <HAL_UART_Receive+0x8a>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d104      	bne.n	800d840 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	61bb      	str	r3, [r7, #24]
 800d83e:	e003      	b.n	800d848 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d844:	2300      	movs	r3, #0
 800d846:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d850:	e043      	b.n	800d8da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	2200      	movs	r2, #0
 800d85a:	2120      	movs	r1, #32
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f000 fb05 	bl	800de6c <UART_WaitOnFlagUntilTimeout>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d868:	2303      	movs	r3, #3
 800d86a:	e042      	b.n	800d8f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10c      	bne.n	800d88c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	b29b      	uxth	r3, r3
 800d87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d87e:	b29a      	uxth	r2, r3
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	3302      	adds	r3, #2
 800d888:	61bb      	str	r3, [r7, #24]
 800d88a:	e01f      	b.n	800d8cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d894:	d007      	beq.n	800d8a6 <HAL_UART_Receive+0xf0>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d10a      	bne.n	800d8b4 <HAL_UART_Receive+0xfe>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d106      	bne.n	800d8b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	701a      	strb	r2, [r3, #0]
 800d8b2:	e008      	b.n	800d8c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1b6      	bne.n	800d852 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2220      	movs	r2, #32
 800d8e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	e000      	b.n	800d8f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d8f0:	2302      	movs	r3, #2
  }
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b0ba      	sub	sp, #232	@ 0xe8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	695b      	ldr	r3, [r3, #20]
 800d91e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d922:	2300      	movs	r3, #0
 800d924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d928:	2300      	movs	r3, #0
 800d92a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d932:	f003 030f 	and.w	r3, r3, #15
 800d936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d93a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10f      	bne.n	800d962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d946:	f003 0320 	and.w	r3, r3, #32
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d009      	beq.n	800d962 <HAL_UART_IRQHandler+0x66>
 800d94e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d952:	f003 0320 	and.w	r3, r3, #32
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fbd3 	bl	800e106 <UART_Receive_IT>
      return;
 800d960:	e256      	b.n	800de10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 80de 	beq.w	800db28 <HAL_UART_IRQHandler+0x22c>
 800d96c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d970:	f003 0301 	and.w	r3, r3, #1
 800d974:	2b00      	cmp	r3, #0
 800d976:	d106      	bne.n	800d986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d97c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 80d1 	beq.w	800db28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00b      	beq.n	800d9aa <HAL_UART_IRQHandler+0xae>
 800d992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d005      	beq.n	800d9aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a2:	f043 0201 	orr.w	r2, r3, #1
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9ae:	f003 0304 	and.w	r3, r3, #4
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00b      	beq.n	800d9ce <HAL_UART_IRQHandler+0xd2>
 800d9b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9ba:	f003 0301 	and.w	r3, r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d005      	beq.n	800d9ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c6:	f043 0202 	orr.w	r2, r3, #2
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9d2:	f003 0302 	and.w	r3, r3, #2
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00b      	beq.n	800d9f2 <HAL_UART_IRQHandler+0xf6>
 800d9da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d005      	beq.n	800d9f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ea:	f043 0204 	orr.w	r2, r3, #4
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9f6:	f003 0308 	and.w	r3, r3, #8
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d011      	beq.n	800da22 <HAL_UART_IRQHandler+0x126>
 800d9fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da02:	f003 0320 	and.w	r3, r3, #32
 800da06:	2b00      	cmp	r3, #0
 800da08:	d105      	bne.n	800da16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800da0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da1a:	f043 0208 	orr.w	r2, r3, #8
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da26:	2b00      	cmp	r3, #0
 800da28:	f000 81ed 	beq.w	800de06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da30:	f003 0320 	and.w	r3, r3, #32
 800da34:	2b00      	cmp	r3, #0
 800da36:	d008      	beq.n	800da4a <HAL_UART_IRQHandler+0x14e>
 800da38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da3c:	f003 0320 	and.w	r3, r3, #32
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fb5e 	bl	800e106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	695b      	ldr	r3, [r3, #20]
 800da50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da54:	2b40      	cmp	r3, #64	@ 0x40
 800da56:	bf0c      	ite	eq
 800da58:	2301      	moveq	r3, #1
 800da5a:	2300      	movne	r3, #0
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da66:	f003 0308 	and.w	r3, r3, #8
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <HAL_UART_IRQHandler+0x17a>
 800da6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800da72:	2b00      	cmp	r3, #0
 800da74:	d04f      	beq.n	800db16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa66 	bl	800df48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da86:	2b40      	cmp	r3, #64	@ 0x40
 800da88:	d141      	bne.n	800db0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	3314      	adds	r3, #20
 800da90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da98:	e853 3f00 	ldrex	r3, [r3]
 800da9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800daa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800daa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	3314      	adds	r3, #20
 800dab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dab6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800daba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dabe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dac6:	e841 2300 	strex	r3, r2, [r1]
 800daca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1d9      	bne.n	800da8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d013      	beq.n	800db06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dae2:	4a7d      	ldr	r2, [pc, #500]	@ (800dcd8 <HAL_UART_IRQHandler+0x3dc>)
 800dae4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daea:	4618      	mov	r0, r3
 800daec:	f7f9 fd7c 	bl	80075e8 <HAL_DMA_Abort_IT>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d016      	beq.n	800db24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dafa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800db00:	4610      	mov	r0, r2
 800db02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db04:	e00e      	b.n	800db24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f99a 	bl	800de40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db0c:	e00a      	b.n	800db24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f996 	bl	800de40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db14:	e006      	b.n	800db24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f992 	bl	800de40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800db22:	e170      	b.n	800de06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db24:	bf00      	nop
    return;
 800db26:	e16e      	b.n	800de06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	f040 814a 	bne.w	800ddc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800db32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db36:	f003 0310 	and.w	r3, r3, #16
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 8143 	beq.w	800ddc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800db40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db44:	f003 0310 	and.w	r3, r3, #16
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f000 813c 	beq.w	800ddc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800db4e:	2300      	movs	r3, #0
 800db50:	60bb      	str	r3, [r7, #8]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	60bb      	str	r3, [r7, #8]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	60bb      	str	r3, [r7, #8]
 800db62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db6e:	2b40      	cmp	r3, #64	@ 0x40
 800db70:	f040 80b4 	bne.w	800dcdc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 8140 	beq.w	800de0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800db8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db92:	429a      	cmp	r2, r3
 800db94:	f080 8139 	bcs.w	800de0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800db9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba4:	69db      	ldr	r3, [r3, #28]
 800dba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbaa:	f000 8088 	beq.w	800dcbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	330c      	adds	r3, #12
 800dbb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dbbc:	e853 3f00 	ldrex	r3, [r3]
 800dbc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dbc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dbc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	330c      	adds	r3, #12
 800dbd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dbda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dbde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dbe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dbf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1d9      	bne.n	800dbae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	3314      	adds	r3, #20
 800dc00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc04:	e853 3f00 	ldrex	r3, [r3]
 800dc08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dc0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dc0c:	f023 0301 	bic.w	r3, r3, #1
 800dc10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	3314      	adds	r3, #20
 800dc1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dc1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dc22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dc26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dc2a:	e841 2300 	strex	r3, r2, [r1]
 800dc2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dc30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1e1      	bne.n	800dbfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	3314      	adds	r3, #20
 800dc3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc40:	e853 3f00 	ldrex	r3, [r3]
 800dc44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dc46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3314      	adds	r3, #20
 800dc56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dc5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dc5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dc60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dc62:	e841 2300 	strex	r3, r2, [r1]
 800dc66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dc68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1e3      	bne.n	800dc36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2220      	movs	r2, #32
 800dc72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	330c      	adds	r3, #12
 800dc82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc86:	e853 3f00 	ldrex	r3, [r3]
 800dc8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dc8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc8e:	f023 0310 	bic.w	r3, r3, #16
 800dc92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dca0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dca2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dca6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dca8:	e841 2300 	strex	r3, r2, [r1]
 800dcac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dcae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d1e3      	bne.n	800dc7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f9 fc25 	bl	8007508 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 f8c0 	bl	800de54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dcd4:	e099      	b.n	800de0a <HAL_UART_IRQHandler+0x50e>
 800dcd6:	bf00      	nop
 800dcd8:	0800e00f 	.word	0x0800e00f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f000 808b 	beq.w	800de0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800dcf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 8086 	beq.w	800de0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	330c      	adds	r3, #12
 800dd08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0c:	e853 3f00 	ldrex	r3, [r3]
 800dd10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	330c      	adds	r3, #12
 800dd22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800dd26:	647a      	str	r2, [r7, #68]	@ 0x44
 800dd28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd2e:	e841 2300 	strex	r3, r2, [r1]
 800dd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e3      	bne.n	800dd02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	3314      	adds	r3, #20
 800dd40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd44:	e853 3f00 	ldrex	r3, [r3]
 800dd48:	623b      	str	r3, [r7, #32]
   return(result);
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	f023 0301 	bic.w	r3, r3, #1
 800dd50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3314      	adds	r3, #20
 800dd5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dd5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800dd60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd66:	e841 2300 	strex	r3, r2, [r1]
 800dd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e3      	bne.n	800dd3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	330c      	adds	r3, #12
 800dd86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	e853 3f00 	ldrex	r3, [r3]
 800dd8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f023 0310 	bic.w	r3, r3, #16
 800dd96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	330c      	adds	r3, #12
 800dda0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800dda4:	61fa      	str	r2, [r7, #28]
 800dda6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda8:	69b9      	ldr	r1, [r7, #24]
 800ddaa:	69fa      	ldr	r2, [r7, #28]
 800ddac:	e841 2300 	strex	r3, r2, [r1]
 800ddb0:	617b      	str	r3, [r7, #20]
   return(result);
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1e3      	bne.n	800dd80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f848 	bl	800de54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ddc4:	e023      	b.n	800de0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ddc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d009      	beq.n	800dde6 <HAL_UART_IRQHandler+0x4ea>
 800ddd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ddd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f929 	bl	800e036 <UART_Transmit_IT>
    return;
 800dde4:	e014      	b.n	800de10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00e      	beq.n	800de10 <HAL_UART_IRQHandler+0x514>
 800ddf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ddf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d008      	beq.n	800de10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f969 	bl	800e0d6 <UART_EndTransmit_IT>
    return;
 800de04:	e004      	b.n	800de10 <HAL_UART_IRQHandler+0x514>
    return;
 800de06:	bf00      	nop
 800de08:	e002      	b.n	800de10 <HAL_UART_IRQHandler+0x514>
      return;
 800de0a:	bf00      	nop
 800de0c:	e000      	b.n	800de10 <HAL_UART_IRQHandler+0x514>
      return;
 800de0e:	bf00      	nop
  }
}
 800de10:	37e8      	adds	r7, #232	@ 0xe8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop

0800de18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b090      	sub	sp, #64	@ 0x40
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	603b      	str	r3, [r7, #0]
 800de78:	4613      	mov	r3, r2
 800de7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de7c:	e050      	b.n	800df20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de84:	d04c      	beq.n	800df20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800de86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d007      	beq.n	800de9c <UART_WaitOnFlagUntilTimeout+0x30>
 800de8c:	f7f8 fba2 	bl	80065d4 <HAL_GetTick>
 800de90:	4602      	mov	r2, r0
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	1ad3      	subs	r3, r2, r3
 800de96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de98:	429a      	cmp	r2, r3
 800de9a:	d241      	bcs.n	800df20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	330c      	adds	r3, #12
 800dea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea6:	e853 3f00 	ldrex	r3, [r3]
 800deaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800deac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deae:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800deb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	330c      	adds	r3, #12
 800deba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800debc:	637a      	str	r2, [r7, #52]	@ 0x34
 800debe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dec4:	e841 2300 	strex	r3, r2, [r1]
 800dec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800deca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1e5      	bne.n	800de9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3314      	adds	r3, #20
 800ded6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	e853 3f00 	ldrex	r3, [r3]
 800dede:	613b      	str	r3, [r7, #16]
   return(result);
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3314      	adds	r3, #20
 800deee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800def0:	623a      	str	r2, [r7, #32]
 800def2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def4:	69f9      	ldr	r1, [r7, #28]
 800def6:	6a3a      	ldr	r2, [r7, #32]
 800def8:	e841 2300 	strex	r3, r2, [r1]
 800defc:	61bb      	str	r3, [r7, #24]
   return(result);
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1e5      	bne.n	800ded0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2220      	movs	r2, #32
 800df08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2220      	movs	r2, #32
 800df10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e00f      	b.n	800df40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	4013      	ands	r3, r2
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	bf0c      	ite	eq
 800df30:	2301      	moveq	r3, #1
 800df32:	2300      	movne	r3, #0
 800df34:	b2db      	uxtb	r3, r3
 800df36:	461a      	mov	r2, r3
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d09f      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3740      	adds	r7, #64	@ 0x40
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df48:	b480      	push	{r7}
 800df4a:	b095      	sub	sp, #84	@ 0x54
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	330c      	adds	r3, #12
 800df56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	330c      	adds	r3, #12
 800df6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df70:	643a      	str	r2, [r7, #64]	@ 0x40
 800df72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e5      	bne.n	800df50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3314      	adds	r3, #20
 800df8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	e853 3f00 	ldrex	r3, [r3]
 800df92:	61fb      	str	r3, [r7, #28]
   return(result);
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	f023 0301 	bic.w	r3, r3, #1
 800df9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3314      	adds	r3, #20
 800dfa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfac:	e841 2300 	strex	r3, r2, [r1]
 800dfb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e5      	bne.n	800df84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d119      	bne.n	800dff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	e853 3f00 	ldrex	r3, [r3]
 800dfce:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	f023 0310 	bic.w	r3, r3, #16
 800dfd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	330c      	adds	r3, #12
 800dfde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfe0:	61ba      	str	r2, [r7, #24]
 800dfe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe4:	6979      	ldr	r1, [r7, #20]
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	e841 2300 	strex	r3, r2, [r1]
 800dfec:	613b      	str	r3, [r7, #16]
   return(result);
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1e5      	bne.n	800dfc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2220      	movs	r2, #32
 800dff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e002:	bf00      	nop
 800e004:	3754      	adds	r7, #84	@ 0x54
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e01a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2200      	movs	r2, #0
 800e020:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f7ff ff09 	bl	800de40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e02e:	bf00      	nop
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e036:	b480      	push	{r7}
 800e038:	b085      	sub	sp, #20
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b21      	cmp	r3, #33	@ 0x21
 800e048:	d13e      	bne.n	800e0c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e052:	d114      	bne.n	800e07e <UART_Transmit_IT+0x48>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d110      	bne.n	800e07e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a1b      	ldr	r3, [r3, #32]
 800e060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	881b      	ldrh	r3, [r3, #0]
 800e066:	461a      	mov	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	1c9a      	adds	r2, r3, #2
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	621a      	str	r2, [r3, #32]
 800e07c:	e008      	b.n	800e090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	1c59      	adds	r1, r3, #1
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	6211      	str	r1, [r2, #32]
 800e088:	781a      	ldrb	r2, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e094:	b29b      	uxth	r3, r3
 800e096:	3b01      	subs	r3, #1
 800e098:	b29b      	uxth	r3, r3
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	4619      	mov	r1, r3
 800e09e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10f      	bne.n	800e0c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68da      	ldr	r2, [r3, #12]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e0b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68da      	ldr	r2, [r3, #12]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	e000      	b.n	800e0ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e0c8:	2302      	movs	r3, #2
  }
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68da      	ldr	r2, [r3, #12]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e0ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2220      	movs	r2, #32
 800e0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7ff fe8e 	bl	800de18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b08c      	sub	sp, #48	@ 0x30
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b22      	cmp	r3, #34	@ 0x22
 800e118:	f040 80ab 	bne.w	800e272 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e124:	d117      	bne.n	800e156 <UART_Receive_IT+0x50>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d113      	bne.n	800e156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e136:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e144:	b29a      	uxth	r2, r3
 800e146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14e:	1c9a      	adds	r2, r3, #2
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	629a      	str	r2, [r3, #40]	@ 0x28
 800e154:	e026      	b.n	800e1a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e15c:	2300      	movs	r3, #0
 800e15e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e168:	d007      	beq.n	800e17a <UART_Receive_IT+0x74>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d10a      	bne.n	800e188 <UART_Receive_IT+0x82>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	b2da      	uxtb	r2, r3
 800e182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e184:	701a      	strb	r2, [r3, #0]
 800e186:	e008      	b.n	800e19a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e194:	b2da      	uxtb	r2, r3
 800e196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d15a      	bne.n	800e26e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	68da      	ldr	r2, [r3, #12]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f022 0220 	bic.w	r2, r2, #32
 800e1c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68da      	ldr	r2, [r3, #12]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e1d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	695a      	ldr	r2, [r3, #20]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f022 0201 	bic.w	r2, r2, #1
 800e1e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2220      	movs	r2, #32
 800e1ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d135      	bne.n	800e264 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	330c      	adds	r3, #12
 800e204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	e853 3f00 	ldrex	r3, [r3]
 800e20c:	613b      	str	r3, [r7, #16]
   return(result);
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f023 0310 	bic.w	r3, r3, #16
 800e214:	627b      	str	r3, [r7, #36]	@ 0x24
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	330c      	adds	r3, #12
 800e21c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e21e:	623a      	str	r2, [r7, #32]
 800e220:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e222:	69f9      	ldr	r1, [r7, #28]
 800e224:	6a3a      	ldr	r2, [r7, #32]
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1e5      	bne.n	800e1fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 0310 	and.w	r3, r3, #16
 800e23c:	2b10      	cmp	r3, #16
 800e23e:	d10a      	bne.n	800e256 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e240:	2300      	movs	r3, #0
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e25a:	4619      	mov	r1, r3
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff fdf9 	bl	800de54 <HAL_UARTEx_RxEventCallback>
 800e262:	e002      	b.n	800e26a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7ff fde1 	bl	800de2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e26a:	2300      	movs	r3, #0
 800e26c:	e002      	b.n	800e274 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	e000      	b.n	800e274 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e272:	2302      	movs	r3, #2
  }
}
 800e274:	4618      	mov	r0, r3
 800e276:	3730      	adds	r7, #48	@ 0x30
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e27c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e280:	b0c0      	sub	sp, #256	@ 0x100
 800e282:	af00      	add	r7, sp, #0
 800e284:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e298:	68d9      	ldr	r1, [r3, #12]
 800e29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	ea40 0301 	orr.w	r3, r0, r1
 800e2a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2aa:	689a      	ldr	r2, [r3, #8]
 800e2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2b8:	695b      	ldr	r3, [r3, #20]
 800e2ba:	431a      	orrs	r2, r3
 800e2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e2d4:	f021 010c 	bic.w	r1, r1, #12
 800e2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e2e2:	430b      	orrs	r3, r1
 800e2e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2f6:	6999      	ldr	r1, [r3, #24]
 800e2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	ea40 0301 	orr.w	r3, r0, r1
 800e302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	4b8f      	ldr	r3, [pc, #572]	@ (800e548 <UART_SetConfig+0x2cc>)
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d005      	beq.n	800e31c <UART_SetConfig+0xa0>
 800e310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	4b8d      	ldr	r3, [pc, #564]	@ (800e54c <UART_SetConfig+0x2d0>)
 800e318:	429a      	cmp	r2, r3
 800e31a:	d104      	bne.n	800e326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e31c:	f7fb fed8 	bl	800a0d0 <HAL_RCC_GetPCLK2Freq>
 800e320:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e324:	e003      	b.n	800e32e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e326:	f7fb febf 	bl	800a0a8 <HAL_RCC_GetPCLK1Freq>
 800e32a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e32e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e332:	69db      	ldr	r3, [r3, #28]
 800e334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e338:	f040 810c 	bne.w	800e554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e33c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e340:	2200      	movs	r2, #0
 800e342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e346:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e34a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e34e:	4622      	mov	r2, r4
 800e350:	462b      	mov	r3, r5
 800e352:	1891      	adds	r1, r2, r2
 800e354:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e356:	415b      	adcs	r3, r3
 800e358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e35a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e35e:	4621      	mov	r1, r4
 800e360:	eb12 0801 	adds.w	r8, r2, r1
 800e364:	4629      	mov	r1, r5
 800e366:	eb43 0901 	adc.w	r9, r3, r1
 800e36a:	f04f 0200 	mov.w	r2, #0
 800e36e:	f04f 0300 	mov.w	r3, #0
 800e372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e37a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e37e:	4690      	mov	r8, r2
 800e380:	4699      	mov	r9, r3
 800e382:	4623      	mov	r3, r4
 800e384:	eb18 0303 	adds.w	r3, r8, r3
 800e388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e38c:	462b      	mov	r3, r5
 800e38e:	eb49 0303 	adc.w	r3, r9, r3
 800e392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e3a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e3a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	18db      	adds	r3, r3, r3
 800e3ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	eb42 0303 	adc.w	r3, r2, r3
 800e3b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e3bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e3c0:	f7f2 fc82 	bl	8000cc8 <__aeabi_uldivmod>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	4b61      	ldr	r3, [pc, #388]	@ (800e550 <UART_SetConfig+0x2d4>)
 800e3ca:	fba3 2302 	umull	r2, r3, r3, r2
 800e3ce:	095b      	lsrs	r3, r3, #5
 800e3d0:	011c      	lsls	r4, r3, #4
 800e3d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e3dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e3e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e3e4:	4642      	mov	r2, r8
 800e3e6:	464b      	mov	r3, r9
 800e3e8:	1891      	adds	r1, r2, r2
 800e3ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e3ec:	415b      	adcs	r3, r3
 800e3ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e3f4:	4641      	mov	r1, r8
 800e3f6:	eb12 0a01 	adds.w	sl, r2, r1
 800e3fa:	4649      	mov	r1, r9
 800e3fc:	eb43 0b01 	adc.w	fp, r3, r1
 800e400:	f04f 0200 	mov.w	r2, #0
 800e404:	f04f 0300 	mov.w	r3, #0
 800e408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e40c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e414:	4692      	mov	sl, r2
 800e416:	469b      	mov	fp, r3
 800e418:	4643      	mov	r3, r8
 800e41a:	eb1a 0303 	adds.w	r3, sl, r3
 800e41e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e422:	464b      	mov	r3, r9
 800e424:	eb4b 0303 	adc.w	r3, fp, r3
 800e428:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e438:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e43c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e440:	460b      	mov	r3, r1
 800e442:	18db      	adds	r3, r3, r3
 800e444:	643b      	str	r3, [r7, #64]	@ 0x40
 800e446:	4613      	mov	r3, r2
 800e448:	eb42 0303 	adc.w	r3, r2, r3
 800e44c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e44e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e456:	f7f2 fc37 	bl	8000cc8 <__aeabi_uldivmod>
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	4611      	mov	r1, r2
 800e460:	4b3b      	ldr	r3, [pc, #236]	@ (800e550 <UART_SetConfig+0x2d4>)
 800e462:	fba3 2301 	umull	r2, r3, r3, r1
 800e466:	095b      	lsrs	r3, r3, #5
 800e468:	2264      	movs	r2, #100	@ 0x64
 800e46a:	fb02 f303 	mul.w	r3, r2, r3
 800e46e:	1acb      	subs	r3, r1, r3
 800e470:	00db      	lsls	r3, r3, #3
 800e472:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e476:	4b36      	ldr	r3, [pc, #216]	@ (800e550 <UART_SetConfig+0x2d4>)
 800e478:	fba3 2302 	umull	r2, r3, r3, r2
 800e47c:	095b      	lsrs	r3, r3, #5
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e484:	441c      	add	r4, r3
 800e486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e48a:	2200      	movs	r2, #0
 800e48c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e490:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e498:	4642      	mov	r2, r8
 800e49a:	464b      	mov	r3, r9
 800e49c:	1891      	adds	r1, r2, r2
 800e49e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e4a0:	415b      	adcs	r3, r3
 800e4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e4a8:	4641      	mov	r1, r8
 800e4aa:	1851      	adds	r1, r2, r1
 800e4ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	414b      	adcs	r3, r1
 800e4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4b4:	f04f 0200 	mov.w	r2, #0
 800e4b8:	f04f 0300 	mov.w	r3, #0
 800e4bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e4c0:	4659      	mov	r1, fp
 800e4c2:	00cb      	lsls	r3, r1, #3
 800e4c4:	4651      	mov	r1, sl
 800e4c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e4ca:	4651      	mov	r1, sl
 800e4cc:	00ca      	lsls	r2, r1, #3
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	4642      	mov	r2, r8
 800e4d6:	189b      	adds	r3, r3, r2
 800e4d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e4dc:	464b      	mov	r3, r9
 800e4de:	460a      	mov	r2, r1
 800e4e0:	eb42 0303 	adc.w	r3, r2, r3
 800e4e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e4f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e4f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	18db      	adds	r3, r3, r3
 800e500:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e502:	4613      	mov	r3, r2
 800e504:	eb42 0303 	adc.w	r3, r2, r3
 800e508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e50a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e50e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e512:	f7f2 fbd9 	bl	8000cc8 <__aeabi_uldivmod>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4b0d      	ldr	r3, [pc, #52]	@ (800e550 <UART_SetConfig+0x2d4>)
 800e51c:	fba3 1302 	umull	r1, r3, r3, r2
 800e520:	095b      	lsrs	r3, r3, #5
 800e522:	2164      	movs	r1, #100	@ 0x64
 800e524:	fb01 f303 	mul.w	r3, r1, r3
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	3332      	adds	r3, #50	@ 0x32
 800e52e:	4a08      	ldr	r2, [pc, #32]	@ (800e550 <UART_SetConfig+0x2d4>)
 800e530:	fba2 2303 	umull	r2, r3, r2, r3
 800e534:	095b      	lsrs	r3, r3, #5
 800e536:	f003 0207 	and.w	r2, r3, #7
 800e53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4422      	add	r2, r4
 800e542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e544:	e106      	b.n	800e754 <UART_SetConfig+0x4d8>
 800e546:	bf00      	nop
 800e548:	40011000 	.word	0x40011000
 800e54c:	40011400 	.word	0x40011400
 800e550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e558:	2200      	movs	r2, #0
 800e55a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e55e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e566:	4642      	mov	r2, r8
 800e568:	464b      	mov	r3, r9
 800e56a:	1891      	adds	r1, r2, r2
 800e56c:	6239      	str	r1, [r7, #32]
 800e56e:	415b      	adcs	r3, r3
 800e570:	627b      	str	r3, [r7, #36]	@ 0x24
 800e572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e576:	4641      	mov	r1, r8
 800e578:	1854      	adds	r4, r2, r1
 800e57a:	4649      	mov	r1, r9
 800e57c:	eb43 0501 	adc.w	r5, r3, r1
 800e580:	f04f 0200 	mov.w	r2, #0
 800e584:	f04f 0300 	mov.w	r3, #0
 800e588:	00eb      	lsls	r3, r5, #3
 800e58a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e58e:	00e2      	lsls	r2, r4, #3
 800e590:	4614      	mov	r4, r2
 800e592:	461d      	mov	r5, r3
 800e594:	4643      	mov	r3, r8
 800e596:	18e3      	adds	r3, r4, r3
 800e598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e59c:	464b      	mov	r3, r9
 800e59e:	eb45 0303 	adc.w	r3, r5, r3
 800e5a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e5b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e5b6:	f04f 0200 	mov.w	r2, #0
 800e5ba:	f04f 0300 	mov.w	r3, #0
 800e5be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	008b      	lsls	r3, r1, #2
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	008a      	lsls	r2, r1, #2
 800e5d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e5d4:	f7f2 fb78 	bl	8000cc8 <__aeabi_uldivmod>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4b60      	ldr	r3, [pc, #384]	@ (800e760 <UART_SetConfig+0x4e4>)
 800e5de:	fba3 2302 	umull	r2, r3, r3, r2
 800e5e2:	095b      	lsrs	r3, r3, #5
 800e5e4:	011c      	lsls	r4, r3, #4
 800e5e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e5f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e5f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e5f8:	4642      	mov	r2, r8
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	1891      	adds	r1, r2, r2
 800e5fe:	61b9      	str	r1, [r7, #24]
 800e600:	415b      	adcs	r3, r3
 800e602:	61fb      	str	r3, [r7, #28]
 800e604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e608:	4641      	mov	r1, r8
 800e60a:	1851      	adds	r1, r2, r1
 800e60c:	6139      	str	r1, [r7, #16]
 800e60e:	4649      	mov	r1, r9
 800e610:	414b      	adcs	r3, r1
 800e612:	617b      	str	r3, [r7, #20]
 800e614:	f04f 0200 	mov.w	r2, #0
 800e618:	f04f 0300 	mov.w	r3, #0
 800e61c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e620:	4659      	mov	r1, fp
 800e622:	00cb      	lsls	r3, r1, #3
 800e624:	4651      	mov	r1, sl
 800e626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e62a:	4651      	mov	r1, sl
 800e62c:	00ca      	lsls	r2, r1, #3
 800e62e:	4610      	mov	r0, r2
 800e630:	4619      	mov	r1, r3
 800e632:	4603      	mov	r3, r0
 800e634:	4642      	mov	r2, r8
 800e636:	189b      	adds	r3, r3, r2
 800e638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e63c:	464b      	mov	r3, r9
 800e63e:	460a      	mov	r2, r1
 800e640:	eb42 0303 	adc.w	r3, r2, r3
 800e644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e652:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e654:	f04f 0200 	mov.w	r2, #0
 800e658:	f04f 0300 	mov.w	r3, #0
 800e65c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e660:	4649      	mov	r1, r9
 800e662:	008b      	lsls	r3, r1, #2
 800e664:	4641      	mov	r1, r8
 800e666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e66a:	4641      	mov	r1, r8
 800e66c:	008a      	lsls	r2, r1, #2
 800e66e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e672:	f7f2 fb29 	bl	8000cc8 <__aeabi_uldivmod>
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	4611      	mov	r1, r2
 800e67c:	4b38      	ldr	r3, [pc, #224]	@ (800e760 <UART_SetConfig+0x4e4>)
 800e67e:	fba3 2301 	umull	r2, r3, r3, r1
 800e682:	095b      	lsrs	r3, r3, #5
 800e684:	2264      	movs	r2, #100	@ 0x64
 800e686:	fb02 f303 	mul.w	r3, r2, r3
 800e68a:	1acb      	subs	r3, r1, r3
 800e68c:	011b      	lsls	r3, r3, #4
 800e68e:	3332      	adds	r3, #50	@ 0x32
 800e690:	4a33      	ldr	r2, [pc, #204]	@ (800e760 <UART_SetConfig+0x4e4>)
 800e692:	fba2 2303 	umull	r2, r3, r2, r3
 800e696:	095b      	lsrs	r3, r3, #5
 800e698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e69c:	441c      	add	r4, r3
 800e69e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800e6a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800e6a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e6ac:	4642      	mov	r2, r8
 800e6ae:	464b      	mov	r3, r9
 800e6b0:	1891      	adds	r1, r2, r2
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	415b      	adcs	r3, r3
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e6bc:	4641      	mov	r1, r8
 800e6be:	1851      	adds	r1, r2, r1
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	414b      	adcs	r3, r1
 800e6c6:	607b      	str	r3, [r7, #4]
 800e6c8:	f04f 0200 	mov.w	r2, #0
 800e6cc:	f04f 0300 	mov.w	r3, #0
 800e6d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e6d4:	4659      	mov	r1, fp
 800e6d6:	00cb      	lsls	r3, r1, #3
 800e6d8:	4651      	mov	r1, sl
 800e6da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e6de:	4651      	mov	r1, sl
 800e6e0:	00ca      	lsls	r2, r1, #3
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	4642      	mov	r2, r8
 800e6ea:	189b      	adds	r3, r3, r2
 800e6ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e6ee:	464b      	mov	r3, r9
 800e6f0:	460a      	mov	r2, r1
 800e6f2:	eb42 0303 	adc.w	r3, r2, r3
 800e6f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	663b      	str	r3, [r7, #96]	@ 0x60
 800e702:	667a      	str	r2, [r7, #100]	@ 0x64
 800e704:	f04f 0200 	mov.w	r2, #0
 800e708:	f04f 0300 	mov.w	r3, #0
 800e70c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e710:	4649      	mov	r1, r9
 800e712:	008b      	lsls	r3, r1, #2
 800e714:	4641      	mov	r1, r8
 800e716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e71a:	4641      	mov	r1, r8
 800e71c:	008a      	lsls	r2, r1, #2
 800e71e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e722:	f7f2 fad1 	bl	8000cc8 <__aeabi_uldivmod>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	4b0d      	ldr	r3, [pc, #52]	@ (800e760 <UART_SetConfig+0x4e4>)
 800e72c:	fba3 1302 	umull	r1, r3, r3, r2
 800e730:	095b      	lsrs	r3, r3, #5
 800e732:	2164      	movs	r1, #100	@ 0x64
 800e734:	fb01 f303 	mul.w	r3, r1, r3
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	011b      	lsls	r3, r3, #4
 800e73c:	3332      	adds	r3, #50	@ 0x32
 800e73e:	4a08      	ldr	r2, [pc, #32]	@ (800e760 <UART_SetConfig+0x4e4>)
 800e740:	fba2 2303 	umull	r2, r3, r2, r3
 800e744:	095b      	lsrs	r3, r3, #5
 800e746:	f003 020f 	and.w	r2, r3, #15
 800e74a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4422      	add	r2, r4
 800e752:	609a      	str	r2, [r3, #8]
}
 800e754:	bf00      	nop
 800e756:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e75a:	46bd      	mov	sp, r7
 800e75c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e760:	51eb851f 	.word	0x51eb851f

0800e764 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e764:	b084      	sub	sp, #16
 800e766:	b480      	push	{r7}
 800e768:	b085      	sub	sp, #20
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	f107 001c 	add.w	r0, r7, #28
 800e772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e776:	2300      	movs	r3, #0
 800e778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e77a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e77c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e77e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800e782:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800e786:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800e78a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800e78e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	4313      	orrs	r3, r2
 800e794:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800e79e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	b004      	add	sp, #16
 800e7b8:	4770      	bx	lr

0800e7ba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2203      	movs	r2, #3
 800e802:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr

0800e812 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e812:	b480      	push	{r7}
 800e814:	b083      	sub	sp, #12
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f003 0303 	and.w	r3, r3, #3
}
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr

0800e82e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e82e:	b480      	push	{r7}
 800e830:	b085      	sub	sp, #20
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e838:	2300      	movs	r3, #0
 800e83a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e84c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e852:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e858:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800e868:	f023 030f 	bic.w	r3, r3, #15
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	431a      	orrs	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e874:	2300      	movs	r3, #0
}
 800e876:	4618      	mov	r0, r3
 800e878:	3714      	adds	r7, #20
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr

0800e882 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e882:	b480      	push	{r7}
 800e884:	b083      	sub	sp, #12
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	691b      	ldr	r3, [r3, #16]
 800e88e:	b2db      	uxtb	r3, r3
}
 800e890:	4618      	mov	r0, r3
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b085      	sub	sp, #20
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	3314      	adds	r3, #20
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
}  
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e8c2:	b480      	push	{r7}
 800e8c4:	b085      	sub	sp, #20
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
 800e8ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e8e8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e8ee:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e8f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e900:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	431a      	orrs	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e90c:	2300      	movs	r3, #0

}
 800e90e:	4618      	mov	r0, r3
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b088      	sub	sp, #32
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e928:	2310      	movs	r3, #16
 800e92a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e92c:	2340      	movs	r3, #64	@ 0x40
 800e92e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e930:	2300      	movs	r3, #0
 800e932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e93a:	f107 0308 	add.w	r3, r7, #8
 800e93e:	4619      	mov	r1, r3
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f7ff ff74 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e94a:	2110      	movs	r1, #16
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 f9d7 	bl	800ed00 <SDMMC_GetCmdResp1>
 800e952:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e954:	69fb      	ldr	r3, [r7, #28]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3720      	adds	r7, #32
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	b088      	sub	sp, #32
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e96c:	2311      	movs	r3, #17
 800e96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e970:	2340      	movs	r3, #64	@ 0x40
 800e972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e974:	2300      	movs	r3, #0
 800e976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e97c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e97e:	f107 0308 	add.w	r3, r7, #8
 800e982:	4619      	mov	r1, r3
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff ff52 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e98a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e98e:	2111      	movs	r1, #17
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 f9b5 	bl	800ed00 <SDMMC_GetCmdResp1>
 800e996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e998:	69fb      	ldr	r3, [r7, #28]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3720      	adds	r7, #32
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b088      	sub	sp, #32
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e9b0:	2312      	movs	r3, #18
 800e9b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9b4:	2340      	movs	r3, #64	@ 0x40
 800e9b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9c2:	f107 0308 	add.w	r3, r7, #8
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7ff ff30 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e9ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9d2:	2112      	movs	r1, #18
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f993 	bl	800ed00 <SDMMC_GetCmdResp1>
 800e9da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3720      	adds	r7, #32
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b088      	sub	sp, #32
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
 800e9ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e9f4:	2318      	movs	r3, #24
 800e9f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9f8:	2340      	movs	r3, #64	@ 0x40
 800e9fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea06:	f107 0308 	add.w	r3, r7, #8
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff ff0e 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ea12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea16:	2118      	movs	r1, #24
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f971 	bl	800ed00 <SDMMC_GetCmdResp1>
 800ea1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea20:	69fb      	ldr	r3, [r7, #28]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3720      	adds	r7, #32
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b088      	sub	sp, #32
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ea38:	2319      	movs	r3, #25
 800ea3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea3c:	2340      	movs	r3, #64	@ 0x40
 800ea3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea40:	2300      	movs	r3, #0
 800ea42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea4a:	f107 0308 	add.w	r3, r7, #8
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7ff feec 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ea56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea5a:	2119      	movs	r1, #25
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f94f 	bl	800ed00 <SDMMC_GetCmdResp1>
 800ea62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea64:	69fb      	ldr	r3, [r7, #28]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3720      	adds	r7, #32
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
	...

0800ea70 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b088      	sub	sp, #32
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ea7c:	230c      	movs	r3, #12
 800ea7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea80:	2340      	movs	r3, #64	@ 0x40
 800ea82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea84:	2300      	movs	r3, #0
 800ea86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea8e:	f107 0308 	add.w	r3, r7, #8
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff feca 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ea9a:	4a05      	ldr	r2, [pc, #20]	@ (800eab0 <SDMMC_CmdStopTransfer+0x40>)
 800ea9c:	210c      	movs	r1, #12
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 f92e 	bl	800ed00 <SDMMC_GetCmdResp1>
 800eaa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaa6:	69fb      	ldr	r3, [r7, #28]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3720      	adds	r7, #32
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	05f5e100 	.word	0x05f5e100

0800eab4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08a      	sub	sp, #40	@ 0x28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800eac4:	2307      	movs	r3, #7
 800eac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eac8:	2340      	movs	r3, #64	@ 0x40
 800eaca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eacc:	2300      	movs	r3, #0
 800eace:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ead0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ead4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ead6:	f107 0310 	add.w	r3, r7, #16
 800eada:	4619      	mov	r1, r3
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7ff fea6 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800eae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eae6:	2107      	movs	r1, #7
 800eae8:	68f8      	ldr	r0, [r7, #12]
 800eaea:	f000 f909 	bl	800ed00 <SDMMC_GetCmdResp1>
 800eaee:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3728      	adds	r7, #40	@ 0x28
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b088      	sub	sp, #32
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800eb02:	2300      	movs	r3, #0
 800eb04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eb06:	2300      	movs	r3, #0
 800eb08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb18:	f107 0308 	add.w	r3, r7, #8
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff fe85 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fb23 	bl	800f170 <SDMMC_GetCmdError>
 800eb2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3720      	adds	r7, #32
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b088      	sub	sp, #32
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800eb3e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800eb42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800eb44:	2308      	movs	r3, #8
 800eb46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb48:	2340      	movs	r3, #64	@ 0x40
 800eb4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb56:	f107 0308 	add.w	r3, r7, #8
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff fe66 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 fab6 	bl	800f0d4 <SDMMC_GetCmdResp7>
 800eb68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb6a:	69fb      	ldr	r3, [r7, #28]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b088      	sub	sp, #32
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800eb82:	2337      	movs	r3, #55	@ 0x37
 800eb84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb86:	2340      	movs	r3, #64	@ 0x40
 800eb88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb94:	f107 0308 	add.w	r3, r7, #8
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff fe47 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eba4:	2137      	movs	r1, #55	@ 0x37
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f8aa 	bl	800ed00 <SDMMC_GetCmdResp1>
 800ebac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebae:	69fb      	ldr	r3, [r7, #28]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3720      	adds	r7, #32
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ebc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ebcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ebce:	2329      	movs	r3, #41	@ 0x29
 800ebd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebd2:	2340      	movs	r3, #64	@ 0x40
 800ebd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebe0:	f107 0308 	add.w	r3, r7, #8
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fe21 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 f9bd 	bl	800ef6c <SDMMC_GetCmdResp3>
 800ebf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebf4:	69fb      	ldr	r3, [r7, #28]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3720      	adds	r7, #32
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b088      	sub	sp, #32
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ec06:	2300      	movs	r3, #0
 800ec08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ec0a:	2302      	movs	r3, #2
 800ec0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ec0e:	23c0      	movs	r3, #192	@ 0xc0
 800ec10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec12:	2300      	movs	r3, #0
 800ec14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec1c:	f107 0308 	add.w	r3, r7, #8
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff fe03 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 f957 	bl	800eedc <SDMMC_GetCmdResp2>
 800ec2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec30:	69fb      	ldr	r3, [r7, #28]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3720      	adds	r7, #32
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b088      	sub	sp, #32
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ec48:	2309      	movs	r3, #9
 800ec4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ec4c:	23c0      	movs	r3, #192	@ 0xc0
 800ec4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec50:	2300      	movs	r3, #0
 800ec52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec5a:	f107 0308 	add.w	r3, r7, #8
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff fde4 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f938 	bl	800eedc <SDMMC_GetCmdResp2>
 800ec6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec6e:	69fb      	ldr	r3, [r7, #28]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3720      	adds	r7, #32
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b088      	sub	sp, #32
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ec86:	2303      	movs	r3, #3
 800ec88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec8a:	2340      	movs	r3, #64	@ 0x40
 800ec8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec98:	f107 0308 	add.w	r3, r7, #8
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7ff fdc5 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	2103      	movs	r1, #3
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f000 f99d 	bl	800efe8 <SDMMC_GetCmdResp6>
 800ecae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecb0:	69fb      	ldr	r3, [r7, #28]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3720      	adds	r7, #32
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b088      	sub	sp, #32
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ecc8:	230d      	movs	r3, #13
 800ecca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eccc:	2340      	movs	r3, #64	@ 0x40
 800ecce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecda:	f107 0308 	add.w	r3, r7, #8
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7ff fda4 	bl	800e82e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ece6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecea:	210d      	movs	r1, #13
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f807 	bl	800ed00 <SDMMC_GetCmdResp1>
 800ecf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecf4:	69fb      	ldr	r3, [r7, #28]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3720      	adds	r7, #32
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
	...

0800ed00 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b088      	sub	sp, #32
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	607a      	str	r2, [r7, #4]
 800ed0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ed0e:	4b70      	ldr	r3, [pc, #448]	@ (800eed0 <SDMMC_GetCmdResp1+0x1d0>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4a70      	ldr	r2, [pc, #448]	@ (800eed4 <SDMMC_GetCmdResp1+0x1d4>)
 800ed14:	fba2 2303 	umull	r2, r3, r2, r3
 800ed18:	0a5a      	lsrs	r2, r3, #9
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	fb02 f303 	mul.w	r3, r2, r3
 800ed20:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	1e5a      	subs	r2, r3, #1
 800ed26:	61fa      	str	r2, [r7, #28]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d102      	bne.n	800ed32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed30:	e0c9      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0ef      	beq.n	800ed22 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1ea      	bne.n	800ed22 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed50:	f003 0304 	and.w	r3, r3, #4
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d004      	beq.n	800ed62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2204      	movs	r2, #4
 800ed5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed5e:	2304      	movs	r3, #4
 800ed60:	e0b1      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed66:	f003 0301 	and.w	r3, r3, #1
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d004      	beq.n	800ed78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2201      	movs	r2, #1
 800ed72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed74:	2301      	movs	r3, #1
 800ed76:	e0a6      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	22c5      	movs	r2, #197	@ 0xc5
 800ed7c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f7ff fd7f 	bl	800e882 <SDIO_GetCommandResponse>
 800ed84:	4603      	mov	r3, r0
 800ed86:	461a      	mov	r2, r3
 800ed88:	7afb      	ldrb	r3, [r7, #11]
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d001      	beq.n	800ed92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e099      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ed92:	2100      	movs	r1, #0
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f7ff fd81 	bl	800e89c <SDIO_GetResponse>
 800ed9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	4b4e      	ldr	r3, [pc, #312]	@ (800eed8 <SDMMC_GetCmdResp1+0x1d8>)
 800eda0:	4013      	ands	r3, r2
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d101      	bne.n	800edaa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800eda6:	2300      	movs	r3, #0
 800eda8:	e08d      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	da02      	bge.n	800edb6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800edb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800edb4:	e087      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800edc0:	2340      	movs	r3, #64	@ 0x40
 800edc2:	e080      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d001      	beq.n	800edd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800edce:	2380      	movs	r3, #128	@ 0x80
 800edd0:	e079      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ede0:	e071      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800edec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edf0:	e069      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d002      	beq.n	800ee02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800edfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee00:	e061      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ee0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee10:	e059      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ee1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ee20:	e051      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ee2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ee30:	e049      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ee3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ee40:	e041      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ee4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee50:	e039      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ee5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ee60:	e031      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ee6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ee70:	e029      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ee7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ee80:	e021      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ee8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ee90:	e019      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ee9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800eea0:	e011      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eeac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800eeb0:	e009      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	f003 0308 	and.w	r3, r3, #8
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eebc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eec0:	e001      	b.n	800eec6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3720      	adds	r7, #32
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	20000004 	.word	0x20000004
 800eed4:	10624dd3 	.word	0x10624dd3
 800eed8:	fdffe008 	.word	0xfdffe008

0800eedc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eee4:	4b1f      	ldr	r3, [pc, #124]	@ (800ef64 <SDMMC_GetCmdResp2+0x88>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a1f      	ldr	r2, [pc, #124]	@ (800ef68 <SDMMC_GetCmdResp2+0x8c>)
 800eeea:	fba2 2303 	umull	r2, r3, r2, r3
 800eeee:	0a5b      	lsrs	r3, r3, #9
 800eef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eef4:	fb02 f303 	mul.w	r3, r2, r3
 800eef8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	1e5a      	subs	r2, r3, #1
 800eefe:	60fa      	str	r2, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d102      	bne.n	800ef0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef08:	e026      	b.n	800ef58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d0ef      	beq.n	800eefa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1ea      	bne.n	800eefa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef28:	f003 0304 	and.w	r3, r3, #4
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d004      	beq.n	800ef3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2204      	movs	r2, #4
 800ef34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef36:	2304      	movs	r3, #4
 800ef38:	e00e      	b.n	800ef58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef3e:	f003 0301 	and.w	r3, r3, #1
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d004      	beq.n	800ef50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e003      	b.n	800ef58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	22c5      	movs	r2, #197	@ 0xc5
 800ef54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	20000004 	.word	0x20000004
 800ef68:	10624dd3 	.word	0x10624dd3

0800ef6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef74:	4b1a      	ldr	r3, [pc, #104]	@ (800efe0 <SDMMC_GetCmdResp3+0x74>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a1a      	ldr	r2, [pc, #104]	@ (800efe4 <SDMMC_GetCmdResp3+0x78>)
 800ef7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef7e:	0a5b      	lsrs	r3, r3, #9
 800ef80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef84:	fb02 f303 	mul.w	r3, r2, r3
 800ef88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	1e5a      	subs	r2, r3, #1
 800ef8e:	60fa      	str	r2, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef98:	e01b      	b.n	800efd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0ef      	beq.n	800ef8a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1ea      	bne.n	800ef8a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efb8:	f003 0304 	and.w	r3, r3, #4
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d004      	beq.n	800efca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2204      	movs	r2, #4
 800efc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efc6:	2304      	movs	r3, #4
 800efc8:	e003      	b.n	800efd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	22c5      	movs	r2, #197	@ 0xc5
 800efce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3714      	adds	r7, #20
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	20000004 	.word	0x20000004
 800efe4:	10624dd3 	.word	0x10624dd3

0800efe8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b088      	sub	sp, #32
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	460b      	mov	r3, r1
 800eff2:	607a      	str	r2, [r7, #4]
 800eff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eff6:	4b35      	ldr	r3, [pc, #212]	@ (800f0cc <SDMMC_GetCmdResp6+0xe4>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a35      	ldr	r2, [pc, #212]	@ (800f0d0 <SDMMC_GetCmdResp6+0xe8>)
 800effc:	fba2 2303 	umull	r2, r3, r2, r3
 800f000:	0a5b      	lsrs	r3, r3, #9
 800f002:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f006:	fb02 f303 	mul.w	r3, r2, r3
 800f00a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	1e5a      	subs	r2, r3, #1
 800f010:	61fa      	str	r2, [r7, #28]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d102      	bne.n	800f01c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f016:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f01a:	e052      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f020:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0ef      	beq.n	800f00c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1ea      	bne.n	800f00c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f03a:	f003 0304 	and.w	r3, r3, #4
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d004      	beq.n	800f04c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2204      	movs	r2, #4
 800f046:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f048:	2304      	movs	r3, #4
 800f04a:	e03a      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f050:	f003 0301 	and.w	r3, r3, #1
 800f054:	2b00      	cmp	r3, #0
 800f056:	d004      	beq.n	800f062 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2201      	movs	r2, #1
 800f05c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f05e:	2301      	movs	r3, #1
 800f060:	e02f      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	f7ff fc0d 	bl	800e882 <SDIO_GetCommandResponse>
 800f068:	4603      	mov	r3, r0
 800f06a:	461a      	mov	r2, r3
 800f06c:	7afb      	ldrb	r3, [r7, #11]
 800f06e:	4293      	cmp	r3, r2
 800f070:	d001      	beq.n	800f076 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f072:	2301      	movs	r3, #1
 800f074:	e025      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	22c5      	movs	r2, #197	@ 0xc5
 800f07a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f07c:	2100      	movs	r1, #0
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f7ff fc0c 	bl	800e89c <SDIO_GetResponse>
 800f084:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d106      	bne.n	800f09e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	0c1b      	lsrs	r3, r3, #16
 800f094:	b29a      	uxth	r2, r3
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f09a:	2300      	movs	r3, #0
 800f09c:	e011      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f0a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f0ac:	e009      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f0b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0bc:	e001      	b.n	800f0c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f0be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3720      	adds	r7, #32
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	20000004 	.word	0x20000004
 800f0d0:	10624dd3 	.word	0x10624dd3

0800f0d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0dc:	4b22      	ldr	r3, [pc, #136]	@ (800f168 <SDMMC_GetCmdResp7+0x94>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a22      	ldr	r2, [pc, #136]	@ (800f16c <SDMMC_GetCmdResp7+0x98>)
 800f0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0e6:	0a5b      	lsrs	r3, r3, #9
 800f0e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0ec:	fb02 f303 	mul.w	r3, r2, r3
 800f0f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	1e5a      	subs	r2, r3, #1
 800f0f6:	60fa      	str	r2, [r7, #12]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d102      	bne.n	800f102 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f100:	e02c      	b.n	800f15c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f106:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d0ef      	beq.n	800f0f2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1ea      	bne.n	800f0f2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f120:	f003 0304 	and.w	r3, r3, #4
 800f124:	2b00      	cmp	r3, #0
 800f126:	d004      	beq.n	800f132 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2204      	movs	r2, #4
 800f12c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f12e:	2304      	movs	r3, #4
 800f130:	e014      	b.n	800f15c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d004      	beq.n	800f148 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2201      	movs	r2, #1
 800f142:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f144:	2301      	movs	r3, #1
 800f146:	e009      	b.n	800f15c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2240      	movs	r2, #64	@ 0x40
 800f158:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f15a:	2300      	movs	r3, #0
  
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	20000004 	.word	0x20000004
 800f16c:	10624dd3 	.word	0x10624dd3

0800f170 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f178:	4b11      	ldr	r3, [pc, #68]	@ (800f1c0 <SDMMC_GetCmdError+0x50>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a11      	ldr	r2, [pc, #68]	@ (800f1c4 <SDMMC_GetCmdError+0x54>)
 800f17e:	fba2 2303 	umull	r2, r3, r2, r3
 800f182:	0a5b      	lsrs	r3, r3, #9
 800f184:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f188:	fb02 f303 	mul.w	r3, r2, r3
 800f18c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	1e5a      	subs	r2, r3, #1
 800f192:	60fa      	str	r2, [r7, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d102      	bne.n	800f19e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f198:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f19c:	e009      	b.n	800f1b2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d0f1      	beq.n	800f18e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	22c5      	movs	r2, #197	@ 0xc5
 800f1ae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	20000004 	.word	0x20000004
 800f1c4:	10624dd3 	.word	0x10624dd3

0800f1c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f1cc:	4904      	ldr	r1, [pc, #16]	@ (800f1e0 <MX_FATFS_Init+0x18>)
 800f1ce:	4805      	ldr	r0, [pc, #20]	@ (800f1e4 <MX_FATFS_Init+0x1c>)
 800f1d0:	f000 f9d6 	bl	800f580 <FATFS_LinkDriver>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	4b03      	ldr	r3, [pc, #12]	@ (800f1e8 <MX_FATFS_Init+0x20>)
 800f1da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f1dc:	bf00      	nop
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	200015c4 	.word	0x200015c4
 800f1e4:	08012180 	.word	0x08012180
 800f1e8:	200015c0 	.word	0x200015c0

0800f1ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f1f6:	f000 f86b 	bl	800f2d0 <BSP_SD_IsDetected>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d001      	beq.n	800f204 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f200:	2301      	movs	r3, #1
 800f202:	e005      	b.n	800f210 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f204:	4804      	ldr	r0, [pc, #16]	@ (800f218 <BSP_SD_Init+0x2c>)
 800f206:	f7fc f8fc 	bl	800b402 <HAL_SD_Init>
 800f20a:	4603      	mov	r3, r0
 800f20c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f20e:	79fb      	ldrb	r3, [r7, #7]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	200012e8 	.word	0x200012e8

0800f21c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b088      	sub	sp, #32
 800f220:	af02      	add	r7, sp, #8
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f22a:	2300      	movs	r3, #0
 800f22c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	68f9      	ldr	r1, [r7, #12]
 800f238:	4806      	ldr	r0, [pc, #24]	@ (800f254 <BSP_SD_ReadBlocks+0x38>)
 800f23a:	f7fc f993 	bl	800b564 <HAL_SD_ReadBlocks>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f244:	2301      	movs	r3, #1
 800f246:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f248:	7dfb      	ldrb	r3, [r7, #23]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	200012e8 	.word	0x200012e8

0800f258 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b088      	sub	sp, #32
 800f25c:	af02      	add	r7, sp, #8
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
 800f264:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f266:	2300      	movs	r3, #0
 800f268:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	68ba      	ldr	r2, [r7, #8]
 800f272:	68f9      	ldr	r1, [r7, #12]
 800f274:	4806      	ldr	r0, [pc, #24]	@ (800f290 <BSP_SD_WriteBlocks+0x38>)
 800f276:	f7fc fb53 	bl	800b920 <HAL_SD_WriteBlocks>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f284:	7dfb      	ldrb	r3, [r7, #23]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3718      	adds	r7, #24
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	200012e8 	.word	0x200012e8

0800f294 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f298:	4805      	ldr	r0, [pc, #20]	@ (800f2b0 <BSP_SD_GetCardState+0x1c>)
 800f29a:	f7fc fe97 	bl	800bfcc <HAL_SD_GetCardState>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b04      	cmp	r3, #4
 800f2a2:	bf14      	ite	ne
 800f2a4:	2301      	movne	r3, #1
 800f2a6:	2300      	moveq	r3, #0
 800f2a8:	b2db      	uxtb	r3, r3
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	200012e8 	.word	0x200012e8

0800f2b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f2bc:	6879      	ldr	r1, [r7, #4]
 800f2be:	4803      	ldr	r0, [pc, #12]	@ (800f2cc <BSP_SD_GetCardInfo+0x18>)
 800f2c0:	f7fc fe58 	bl	800bf74 <HAL_SD_GetCardInfo>
}
 800f2c4:	bf00      	nop
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	200012e8 	.word	0x200012e8

0800f2d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f2da:	f000 f80b 	bl	800f2f4 <BSP_PlatformIsDetected>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	b2db      	uxtb	r3, r3
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f2fe:	2102      	movs	r1, #2
 800f300:	4806      	ldr	r0, [pc, #24]	@ (800f31c <BSP_PlatformIsDetected+0x28>)
 800f302:	f7f9 fe9f 	bl	8009044 <HAL_GPIO_ReadPin>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d001      	beq.n	800f310 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f30c:	2300      	movs	r3, #0
 800f30e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f310:	79fb      	ldrb	r3, [r7, #7]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	40020c00 	.word	0x40020c00

0800f320 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	4603      	mov	r3, r0
 800f328:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f32a:	4b0b      	ldr	r3, [pc, #44]	@ (800f358 <SD_CheckStatus+0x38>)
 800f32c:	2201      	movs	r2, #1
 800f32e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f330:	f7ff ffb0 	bl	800f294 <BSP_SD_GetCardState>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d107      	bne.n	800f34a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f33a:	4b07      	ldr	r3, [pc, #28]	@ (800f358 <SD_CheckStatus+0x38>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	f023 0301 	bic.w	r3, r3, #1
 800f344:	b2da      	uxtb	r2, r3
 800f346:	4b04      	ldr	r3, [pc, #16]	@ (800f358 <SD_CheckStatus+0x38>)
 800f348:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f34a:	4b03      	ldr	r3, [pc, #12]	@ (800f358 <SD_CheckStatus+0x38>)
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	b2db      	uxtb	r3, r3
}
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	2000000d 	.word	0x2000000d

0800f35c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	4603      	mov	r3, r0
 800f364:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f366:	4b0b      	ldr	r3, [pc, #44]	@ (800f394 <SD_initialize+0x38>)
 800f368:	2201      	movs	r2, #1
 800f36a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f36c:	f7ff ff3e 	bl	800f1ec <BSP_SD_Init>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d107      	bne.n	800f386 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	4618      	mov	r0, r3
 800f37a:	f7ff ffd1 	bl	800f320 <SD_CheckStatus>
 800f37e:	4603      	mov	r3, r0
 800f380:	461a      	mov	r2, r3
 800f382:	4b04      	ldr	r3, [pc, #16]	@ (800f394 <SD_initialize+0x38>)
 800f384:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f386:	4b03      	ldr	r3, [pc, #12]	@ (800f394 <SD_initialize+0x38>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	b2db      	uxtb	r3, r3
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	2000000d 	.word	0x2000000d

0800f398 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f3a2:	79fb      	ldrb	r3, [r7, #7]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7ff ffbb 	bl	800f320 <SD_CheckStatus>
 800f3aa:	4603      	mov	r3, r0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b086      	sub	sp, #24
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	607a      	str	r2, [r7, #4]
 800f3be:	603b      	str	r3, [r7, #0]
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	68b8      	ldr	r0, [r7, #8]
 800f3d2:	f7ff ff23 	bl	800f21c <BSP_SD_ReadBlocks>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d107      	bne.n	800f3ec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f3dc:	bf00      	nop
 800f3de:	f7ff ff59 	bl	800f294 <BSP_SD_GetCardState>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1fa      	bne.n	800f3de <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b086      	sub	sp, #24
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	607a      	str	r2, [r7, #4]
 800f400:	603b      	str	r3, [r7, #0]
 800f402:	4603      	mov	r3, r0
 800f404:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f406:	2301      	movs	r3, #1
 800f408:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f40a:	f04f 33ff 	mov.w	r3, #4294967295
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	68b8      	ldr	r0, [r7, #8]
 800f414:	f7ff ff20 	bl	800f258 <BSP_SD_WriteBlocks>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d107      	bne.n	800f42e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f41e:	bf00      	nop
 800f420:	f7ff ff38 	bl	800f294 <BSP_SD_GetCardState>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1fa      	bne.n	800f420 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b08c      	sub	sp, #48	@ 0x30
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	4603      	mov	r3, r0
 800f440:	603a      	str	r2, [r7, #0]
 800f442:	71fb      	strb	r3, [r7, #7]
 800f444:	460b      	mov	r3, r1
 800f446:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f448:	2301      	movs	r3, #1
 800f44a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f44e:	4b25      	ldr	r3, [pc, #148]	@ (800f4e4 <SD_ioctl+0xac>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	b2db      	uxtb	r3, r3
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <SD_ioctl+0x28>
 800f45c:	2303      	movs	r3, #3
 800f45e:	e03c      	b.n	800f4da <SD_ioctl+0xa2>

  switch (cmd)
 800f460:	79bb      	ldrb	r3, [r7, #6]
 800f462:	2b03      	cmp	r3, #3
 800f464:	d834      	bhi.n	800f4d0 <SD_ioctl+0x98>
 800f466:	a201      	add	r2, pc, #4	@ (adr r2, 800f46c <SD_ioctl+0x34>)
 800f468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f46c:	0800f47d 	.word	0x0800f47d
 800f470:	0800f485 	.word	0x0800f485
 800f474:	0800f49d 	.word	0x0800f49d
 800f478:	0800f4b7 	.word	0x0800f4b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f482:	e028      	b.n	800f4d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f484:	f107 030c 	add.w	r3, r7, #12
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff ff13 	bl	800f2b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f48e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f49a:	e01c      	b.n	800f4d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f49c:	f107 030c 	add.w	r3, r7, #12
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff ff07 	bl	800f2b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f4b4:	e00f      	b.n	800f4d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f4b6:	f107 030c 	add.w	r3, r7, #12
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff fefa 	bl	800f2b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c2:	0a5a      	lsrs	r2, r3, #9
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f4ce:	e002      	b.n	800f4d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3730      	adds	r7, #48	@ 0x30
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	2000000d 	.word	0x2000000d

0800f4e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b087      	sub	sp, #28
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f4fe:	4b1f      	ldr	r3, [pc, #124]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f500:	7a5b      	ldrb	r3, [r3, #9]
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b00      	cmp	r3, #0
 800f506:	d131      	bne.n	800f56c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f508:	4b1c      	ldr	r3, [pc, #112]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f50a:	7a5b      	ldrb	r3, [r3, #9]
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	461a      	mov	r2, r3
 800f510:	4b1a      	ldr	r3, [pc, #104]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f512:	2100      	movs	r1, #0
 800f514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f516:	4b19      	ldr	r3, [pc, #100]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f518:	7a5b      	ldrb	r3, [r3, #9]
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	4a17      	ldr	r2, [pc, #92]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	4413      	add	r3, r2
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f526:	4b15      	ldr	r3, [pc, #84]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f528:	7a5b      	ldrb	r3, [r3, #9]
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	461a      	mov	r2, r3
 800f52e:	4b13      	ldr	r3, [pc, #76]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f530:	4413      	add	r3, r2
 800f532:	79fa      	ldrb	r2, [r7, #7]
 800f534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f536:	4b11      	ldr	r3, [pc, #68]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f538:	7a5b      	ldrb	r3, [r3, #9]
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	b2d1      	uxtb	r1, r2
 800f540:	4a0e      	ldr	r2, [pc, #56]	@ (800f57c <FATFS_LinkDriverEx+0x94>)
 800f542:	7251      	strb	r1, [r2, #9]
 800f544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f546:	7dbb      	ldrb	r3, [r7, #22]
 800f548:	3330      	adds	r3, #48	@ 0x30
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	3301      	adds	r3, #1
 800f554:	223a      	movs	r2, #58	@ 0x3a
 800f556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	3302      	adds	r3, #2
 800f55c:	222f      	movs	r2, #47	@ 0x2f
 800f55e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	3303      	adds	r3, #3
 800f564:	2200      	movs	r2, #0
 800f566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	371c      	adds	r7, #28
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	200015c8 	.word	0x200015c8

0800f580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f58a:	2200      	movs	r2, #0
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff ffaa 	bl	800f4e8 <FATFS_LinkDriverEx>
 800f594:	4603      	mov	r3, r0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <_ZdlPvj>:
 800f59e:	f000 b806 	b.w	800f5ae <_ZdlPv>

0800f5a2 <_ZdaPv>:
 800f5a2:	f000 b804 	b.w	800f5ae <_ZdlPv>

0800f5a6 <_ZdaPvj>:
 800f5a6:	f7ff bffc 	b.w	800f5a2 <_ZdaPv>

0800f5aa <_Znaj>:
 800f5aa:	f000 b802 	b.w	800f5b2 <_Znwj>

0800f5ae <_ZdlPv>:
 800f5ae:	f001 bfb3 	b.w	8011518 <free>

0800f5b2 <_Znwj>:
 800f5b2:	2801      	cmp	r0, #1
 800f5b4:	bf38      	it	cc
 800f5b6:	2001      	movcc	r0, #1
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f001 ffa3 	bl	8011508 <malloc>
 800f5c2:	b100      	cbz	r0, 800f5c6 <_Znwj+0x14>
 800f5c4:	bd10      	pop	{r4, pc}
 800f5c6:	f000 f805 	bl	800f5d4 <_ZSt15get_new_handlerv>
 800f5ca:	b908      	cbnz	r0, 800f5d0 <_Znwj+0x1e>
 800f5cc:	f001 ff94 	bl	80114f8 <abort>
 800f5d0:	4780      	blx	r0
 800f5d2:	e7f3      	b.n	800f5bc <_Znwj+0xa>

0800f5d4 <_ZSt15get_new_handlerv>:
 800f5d4:	4b02      	ldr	r3, [pc, #8]	@ (800f5e0 <_ZSt15get_new_handlerv+0xc>)
 800f5d6:	6818      	ldr	r0, [r3, #0]
 800f5d8:	f3bf 8f5b 	dmb	ish
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	200015d4 	.word	0x200015d4

0800f5e4 <pow>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	ed2d 8b02 	vpush	{d8}
 800f5ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f5ee:	eef0 8a60 	vmov.f32	s17, s1
 800f5f2:	ec55 4b11 	vmov	r4, r5, d1
 800f5f6:	f000 fba7 	bl	800fd48 <__ieee754_pow>
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	462b      	mov	r3, r5
 800f5fe:	4620      	mov	r0, r4
 800f600:	4629      	mov	r1, r5
 800f602:	ec57 6b10 	vmov	r6, r7, d0
 800f606:	f7f1 fab1 	bl	8000b6c <__aeabi_dcmpun>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d13b      	bne.n	800f686 <pow+0xa2>
 800f60e:	ec51 0b18 	vmov	r0, r1, d8
 800f612:	2200      	movs	r2, #0
 800f614:	2300      	movs	r3, #0
 800f616:	f7f1 fa77 	bl	8000b08 <__aeabi_dcmpeq>
 800f61a:	b1b8      	cbz	r0, 800f64c <pow+0x68>
 800f61c:	2200      	movs	r2, #0
 800f61e:	2300      	movs	r3, #0
 800f620:	4620      	mov	r0, r4
 800f622:	4629      	mov	r1, r5
 800f624:	f7f1 fa70 	bl	8000b08 <__aeabi_dcmpeq>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d146      	bne.n	800f6ba <pow+0xd6>
 800f62c:	ec45 4b10 	vmov	d0, r4, r5
 800f630:	f000 f91e 	bl	800f870 <finite>
 800f634:	b338      	cbz	r0, 800f686 <pow+0xa2>
 800f636:	2200      	movs	r2, #0
 800f638:	2300      	movs	r3, #0
 800f63a:	4620      	mov	r0, r4
 800f63c:	4629      	mov	r1, r5
 800f63e:	f7f1 fa6d 	bl	8000b1c <__aeabi_dcmplt>
 800f642:	b300      	cbz	r0, 800f686 <pow+0xa2>
 800f644:	f002 f8ae 	bl	80117a4 <__errno>
 800f648:	2322      	movs	r3, #34	@ 0x22
 800f64a:	e01b      	b.n	800f684 <pow+0xa0>
 800f64c:	ec47 6b10 	vmov	d0, r6, r7
 800f650:	f000 f90e 	bl	800f870 <finite>
 800f654:	b9e0      	cbnz	r0, 800f690 <pow+0xac>
 800f656:	eeb0 0a48 	vmov.f32	s0, s16
 800f65a:	eef0 0a68 	vmov.f32	s1, s17
 800f65e:	f000 f907 	bl	800f870 <finite>
 800f662:	b1a8      	cbz	r0, 800f690 <pow+0xac>
 800f664:	ec45 4b10 	vmov	d0, r4, r5
 800f668:	f000 f902 	bl	800f870 <finite>
 800f66c:	b180      	cbz	r0, 800f690 <pow+0xac>
 800f66e:	4632      	mov	r2, r6
 800f670:	463b      	mov	r3, r7
 800f672:	4630      	mov	r0, r6
 800f674:	4639      	mov	r1, r7
 800f676:	f7f1 fa79 	bl	8000b6c <__aeabi_dcmpun>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d0e2      	beq.n	800f644 <pow+0x60>
 800f67e:	f002 f891 	bl	80117a4 <__errno>
 800f682:	2321      	movs	r3, #33	@ 0x21
 800f684:	6003      	str	r3, [r0, #0]
 800f686:	ecbd 8b02 	vpop	{d8}
 800f68a:	ec47 6b10 	vmov	d0, r6, r7
 800f68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f690:	2200      	movs	r2, #0
 800f692:	2300      	movs	r3, #0
 800f694:	4630      	mov	r0, r6
 800f696:	4639      	mov	r1, r7
 800f698:	f7f1 fa36 	bl	8000b08 <__aeabi_dcmpeq>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	d0f2      	beq.n	800f686 <pow+0xa2>
 800f6a0:	eeb0 0a48 	vmov.f32	s0, s16
 800f6a4:	eef0 0a68 	vmov.f32	s1, s17
 800f6a8:	f000 f8e2 	bl	800f870 <finite>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d0ea      	beq.n	800f686 <pow+0xa2>
 800f6b0:	ec45 4b10 	vmov	d0, r4, r5
 800f6b4:	f000 f8dc 	bl	800f870 <finite>
 800f6b8:	e7c3      	b.n	800f642 <pow+0x5e>
 800f6ba:	4f01      	ldr	r7, [pc, #4]	@ (800f6c0 <pow+0xdc>)
 800f6bc:	2600      	movs	r6, #0
 800f6be:	e7e2      	b.n	800f686 <pow+0xa2>
 800f6c0:	3ff00000 	.word	0x3ff00000

0800f6c4 <sqrt>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	ed2d 8b02 	vpush	{d8}
 800f6ca:	ec55 4b10 	vmov	r4, r5, d0
 800f6ce:	f000 f8db 	bl	800f888 <__ieee754_sqrt>
 800f6d2:	4622      	mov	r2, r4
 800f6d4:	462b      	mov	r3, r5
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	4629      	mov	r1, r5
 800f6da:	eeb0 8a40 	vmov.f32	s16, s0
 800f6de:	eef0 8a60 	vmov.f32	s17, s1
 800f6e2:	f7f1 fa43 	bl	8000b6c <__aeabi_dcmpun>
 800f6e6:	b990      	cbnz	r0, 800f70e <sqrt+0x4a>
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	f7f1 fa14 	bl	8000b1c <__aeabi_dcmplt>
 800f6f4:	b158      	cbz	r0, 800f70e <sqrt+0x4a>
 800f6f6:	f002 f855 	bl	80117a4 <__errno>
 800f6fa:	2321      	movs	r3, #33	@ 0x21
 800f6fc:	6003      	str	r3, [r0, #0]
 800f6fe:	2200      	movs	r2, #0
 800f700:	2300      	movs	r3, #0
 800f702:	4610      	mov	r0, r2
 800f704:	4619      	mov	r1, r3
 800f706:	f7f1 f8c1 	bl	800088c <__aeabi_ddiv>
 800f70a:	ec41 0b18 	vmov	d8, r0, r1
 800f70e:	eeb0 0a48 	vmov.f32	s0, s16
 800f712:	eef0 0a68 	vmov.f32	s1, s17
 800f716:	ecbd 8b02 	vpop	{d8}
 800f71a:	bd38      	pop	{r3, r4, r5, pc}
 800f71c:	0000      	movs	r0, r0
	...

0800f720 <cos>:
 800f720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f722:	ec53 2b10 	vmov	r2, r3, d0
 800f726:	4826      	ldr	r0, [pc, #152]	@ (800f7c0 <cos+0xa0>)
 800f728:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f72c:	4281      	cmp	r1, r0
 800f72e:	d806      	bhi.n	800f73e <cos+0x1e>
 800f730:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f7b8 <cos+0x98>
 800f734:	b005      	add	sp, #20
 800f736:	f85d eb04 	ldr.w	lr, [sp], #4
 800f73a:	f000 b981 	b.w	800fa40 <__kernel_cos>
 800f73e:	4821      	ldr	r0, [pc, #132]	@ (800f7c4 <cos+0xa4>)
 800f740:	4281      	cmp	r1, r0
 800f742:	d908      	bls.n	800f756 <cos+0x36>
 800f744:	4610      	mov	r0, r2
 800f746:	4619      	mov	r1, r3
 800f748:	f7f0 fdbe 	bl	80002c8 <__aeabi_dsub>
 800f74c:	ec41 0b10 	vmov	d0, r0, r1
 800f750:	b005      	add	sp, #20
 800f752:	f85d fb04 	ldr.w	pc, [sp], #4
 800f756:	4668      	mov	r0, sp
 800f758:	f001 f83a 	bl	80107d0 <__ieee754_rem_pio2>
 800f75c:	f000 0003 	and.w	r0, r0, #3
 800f760:	2801      	cmp	r0, #1
 800f762:	d00b      	beq.n	800f77c <cos+0x5c>
 800f764:	2802      	cmp	r0, #2
 800f766:	d015      	beq.n	800f794 <cos+0x74>
 800f768:	b9d8      	cbnz	r0, 800f7a2 <cos+0x82>
 800f76a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f76e:	ed9d 0b00 	vldr	d0, [sp]
 800f772:	f000 f965 	bl	800fa40 <__kernel_cos>
 800f776:	ec51 0b10 	vmov	r0, r1, d0
 800f77a:	e7e7      	b.n	800f74c <cos+0x2c>
 800f77c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f780:	ed9d 0b00 	vldr	d0, [sp]
 800f784:	f000 fa24 	bl	800fbd0 <__kernel_sin>
 800f788:	ec53 2b10 	vmov	r2, r3, d0
 800f78c:	4610      	mov	r0, r2
 800f78e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f792:	e7db      	b.n	800f74c <cos+0x2c>
 800f794:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f798:	ed9d 0b00 	vldr	d0, [sp]
 800f79c:	f000 f950 	bl	800fa40 <__kernel_cos>
 800f7a0:	e7f2      	b.n	800f788 <cos+0x68>
 800f7a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f7a6:	ed9d 0b00 	vldr	d0, [sp]
 800f7aa:	2001      	movs	r0, #1
 800f7ac:	f000 fa10 	bl	800fbd0 <__kernel_sin>
 800f7b0:	e7e1      	b.n	800f776 <cos+0x56>
 800f7b2:	bf00      	nop
 800f7b4:	f3af 8000 	nop.w
	...
 800f7c0:	3fe921fb 	.word	0x3fe921fb
 800f7c4:	7fefffff 	.word	0x7fefffff

0800f7c8 <sin>:
 800f7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7ca:	ec53 2b10 	vmov	r2, r3, d0
 800f7ce:	4826      	ldr	r0, [pc, #152]	@ (800f868 <sin+0xa0>)
 800f7d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f7d4:	4281      	cmp	r1, r0
 800f7d6:	d807      	bhi.n	800f7e8 <sin+0x20>
 800f7d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f860 <sin+0x98>
 800f7dc:	2000      	movs	r0, #0
 800f7de:	b005      	add	sp, #20
 800f7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7e4:	f000 b9f4 	b.w	800fbd0 <__kernel_sin>
 800f7e8:	4820      	ldr	r0, [pc, #128]	@ (800f86c <sin+0xa4>)
 800f7ea:	4281      	cmp	r1, r0
 800f7ec:	d908      	bls.n	800f800 <sin+0x38>
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	f7f0 fd69 	bl	80002c8 <__aeabi_dsub>
 800f7f6:	ec41 0b10 	vmov	d0, r0, r1
 800f7fa:	b005      	add	sp, #20
 800f7fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f800:	4668      	mov	r0, sp
 800f802:	f000 ffe5 	bl	80107d0 <__ieee754_rem_pio2>
 800f806:	f000 0003 	and.w	r0, r0, #3
 800f80a:	2801      	cmp	r0, #1
 800f80c:	d00c      	beq.n	800f828 <sin+0x60>
 800f80e:	2802      	cmp	r0, #2
 800f810:	d011      	beq.n	800f836 <sin+0x6e>
 800f812:	b9e8      	cbnz	r0, 800f850 <sin+0x88>
 800f814:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f818:	ed9d 0b00 	vldr	d0, [sp]
 800f81c:	2001      	movs	r0, #1
 800f81e:	f000 f9d7 	bl	800fbd0 <__kernel_sin>
 800f822:	ec51 0b10 	vmov	r0, r1, d0
 800f826:	e7e6      	b.n	800f7f6 <sin+0x2e>
 800f828:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f82c:	ed9d 0b00 	vldr	d0, [sp]
 800f830:	f000 f906 	bl	800fa40 <__kernel_cos>
 800f834:	e7f5      	b.n	800f822 <sin+0x5a>
 800f836:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f83a:	ed9d 0b00 	vldr	d0, [sp]
 800f83e:	2001      	movs	r0, #1
 800f840:	f000 f9c6 	bl	800fbd0 <__kernel_sin>
 800f844:	ec53 2b10 	vmov	r2, r3, d0
 800f848:	4610      	mov	r0, r2
 800f84a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f84e:	e7d2      	b.n	800f7f6 <sin+0x2e>
 800f850:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f854:	ed9d 0b00 	vldr	d0, [sp]
 800f858:	f000 f8f2 	bl	800fa40 <__kernel_cos>
 800f85c:	e7f2      	b.n	800f844 <sin+0x7c>
 800f85e:	bf00      	nop
	...
 800f868:	3fe921fb 	.word	0x3fe921fb
 800f86c:	7fefffff 	.word	0x7fefffff

0800f870 <finite>:
 800f870:	b082      	sub	sp, #8
 800f872:	ed8d 0b00 	vstr	d0, [sp]
 800f876:	9801      	ldr	r0, [sp, #4]
 800f878:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f87c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f880:	0fc0      	lsrs	r0, r0, #31
 800f882:	b002      	add	sp, #8
 800f884:	4770      	bx	lr
	...

0800f888 <__ieee754_sqrt>:
 800f888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	4a68      	ldr	r2, [pc, #416]	@ (800fa30 <__ieee754_sqrt+0x1a8>)
 800f88e:	ec55 4b10 	vmov	r4, r5, d0
 800f892:	43aa      	bics	r2, r5
 800f894:	462b      	mov	r3, r5
 800f896:	4621      	mov	r1, r4
 800f898:	d110      	bne.n	800f8bc <__ieee754_sqrt+0x34>
 800f89a:	4622      	mov	r2, r4
 800f89c:	4620      	mov	r0, r4
 800f89e:	4629      	mov	r1, r5
 800f8a0:	f7f0 feca 	bl	8000638 <__aeabi_dmul>
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	f7f0 fd0e 	bl	80002cc <__adddf3>
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	ec45 4b10 	vmov	d0, r4, r5
 800f8b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8bc:	2d00      	cmp	r5, #0
 800f8be:	dc0e      	bgt.n	800f8de <__ieee754_sqrt+0x56>
 800f8c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f8c4:	4322      	orrs	r2, r4
 800f8c6:	d0f5      	beq.n	800f8b4 <__ieee754_sqrt+0x2c>
 800f8c8:	b19d      	cbz	r5, 800f8f2 <__ieee754_sqrt+0x6a>
 800f8ca:	4622      	mov	r2, r4
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	f7f0 fcfa 	bl	80002c8 <__aeabi_dsub>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	f7f0 ffd8 	bl	800088c <__aeabi_ddiv>
 800f8dc:	e7e8      	b.n	800f8b0 <__ieee754_sqrt+0x28>
 800f8de:	152a      	asrs	r2, r5, #20
 800f8e0:	d115      	bne.n	800f90e <__ieee754_sqrt+0x86>
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	e009      	b.n	800f8fa <__ieee754_sqrt+0x72>
 800f8e6:	0acb      	lsrs	r3, r1, #11
 800f8e8:	3a15      	subs	r2, #21
 800f8ea:	0549      	lsls	r1, r1, #21
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d0fa      	beq.n	800f8e6 <__ieee754_sqrt+0x5e>
 800f8f0:	e7f7      	b.n	800f8e2 <__ieee754_sqrt+0x5a>
 800f8f2:	462a      	mov	r2, r5
 800f8f4:	e7fa      	b.n	800f8ec <__ieee754_sqrt+0x64>
 800f8f6:	005b      	lsls	r3, r3, #1
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	02dc      	lsls	r4, r3, #11
 800f8fc:	d5fb      	bpl.n	800f8f6 <__ieee754_sqrt+0x6e>
 800f8fe:	1e44      	subs	r4, r0, #1
 800f900:	1b12      	subs	r2, r2, r4
 800f902:	f1c0 0420 	rsb	r4, r0, #32
 800f906:	fa21 f404 	lsr.w	r4, r1, r4
 800f90a:	4323      	orrs	r3, r4
 800f90c:	4081      	lsls	r1, r0
 800f90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f912:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f91a:	07d2      	lsls	r2, r2, #31
 800f91c:	bf5c      	itt	pl
 800f91e:	005b      	lslpl	r3, r3, #1
 800f920:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f924:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f928:	bf58      	it	pl
 800f92a:	0049      	lslpl	r1, r1, #1
 800f92c:	2600      	movs	r6, #0
 800f92e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f932:	106d      	asrs	r5, r5, #1
 800f934:	0049      	lsls	r1, r1, #1
 800f936:	2016      	movs	r0, #22
 800f938:	4632      	mov	r2, r6
 800f93a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f93e:	1917      	adds	r7, r2, r4
 800f940:	429f      	cmp	r7, r3
 800f942:	bfde      	ittt	le
 800f944:	193a      	addle	r2, r7, r4
 800f946:	1bdb      	suble	r3, r3, r7
 800f948:	1936      	addle	r6, r6, r4
 800f94a:	0fcf      	lsrs	r7, r1, #31
 800f94c:	3801      	subs	r0, #1
 800f94e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f952:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f956:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f95a:	d1f0      	bne.n	800f93e <__ieee754_sqrt+0xb6>
 800f95c:	4604      	mov	r4, r0
 800f95e:	2720      	movs	r7, #32
 800f960:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f964:	429a      	cmp	r2, r3
 800f966:	eb00 0e0c 	add.w	lr, r0, ip
 800f96a:	db02      	blt.n	800f972 <__ieee754_sqrt+0xea>
 800f96c:	d113      	bne.n	800f996 <__ieee754_sqrt+0x10e>
 800f96e:	458e      	cmp	lr, r1
 800f970:	d811      	bhi.n	800f996 <__ieee754_sqrt+0x10e>
 800f972:	f1be 0f00 	cmp.w	lr, #0
 800f976:	eb0e 000c 	add.w	r0, lr, ip
 800f97a:	da42      	bge.n	800fa02 <__ieee754_sqrt+0x17a>
 800f97c:	2800      	cmp	r0, #0
 800f97e:	db40      	blt.n	800fa02 <__ieee754_sqrt+0x17a>
 800f980:	f102 0801 	add.w	r8, r2, #1
 800f984:	1a9b      	subs	r3, r3, r2
 800f986:	458e      	cmp	lr, r1
 800f988:	bf88      	it	hi
 800f98a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f98e:	eba1 010e 	sub.w	r1, r1, lr
 800f992:	4464      	add	r4, ip
 800f994:	4642      	mov	r2, r8
 800f996:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f99a:	3f01      	subs	r7, #1
 800f99c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f9a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f9a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f9a8:	d1dc      	bne.n	800f964 <__ieee754_sqrt+0xdc>
 800f9aa:	4319      	orrs	r1, r3
 800f9ac:	d01b      	beq.n	800f9e6 <__ieee754_sqrt+0x15e>
 800f9ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fa34 <__ieee754_sqrt+0x1ac>
 800f9b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fa38 <__ieee754_sqrt+0x1b0>
 800f9b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800f9ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800f9be:	f7f0 fc83 	bl	80002c8 <__aeabi_dsub>
 800f9c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	4649      	mov	r1, r9
 800f9ce:	f7f1 f8af 	bl	8000b30 <__aeabi_dcmple>
 800f9d2:	b140      	cbz	r0, 800f9e6 <__ieee754_sqrt+0x15e>
 800f9d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f9d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800f9dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800f9e0:	d111      	bne.n	800fa06 <__ieee754_sqrt+0x17e>
 800f9e2:	3601      	adds	r6, #1
 800f9e4:	463c      	mov	r4, r7
 800f9e6:	1072      	asrs	r2, r6, #1
 800f9e8:	0863      	lsrs	r3, r4, #1
 800f9ea:	07f1      	lsls	r1, r6, #31
 800f9ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f9f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f9f4:	bf48      	it	mi
 800f9f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f9fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f9fe:	4618      	mov	r0, r3
 800fa00:	e756      	b.n	800f8b0 <__ieee754_sqrt+0x28>
 800fa02:	4690      	mov	r8, r2
 800fa04:	e7be      	b.n	800f984 <__ieee754_sqrt+0xfc>
 800fa06:	f7f0 fc61 	bl	80002cc <__adddf3>
 800fa0a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	4640      	mov	r0, r8
 800fa14:	4649      	mov	r1, r9
 800fa16:	f7f1 f881 	bl	8000b1c <__aeabi_dcmplt>
 800fa1a:	b120      	cbz	r0, 800fa26 <__ieee754_sqrt+0x19e>
 800fa1c:	1ca0      	adds	r0, r4, #2
 800fa1e:	bf08      	it	eq
 800fa20:	3601      	addeq	r6, #1
 800fa22:	3402      	adds	r4, #2
 800fa24:	e7df      	b.n	800f9e6 <__ieee754_sqrt+0x15e>
 800fa26:	1c63      	adds	r3, r4, #1
 800fa28:	f023 0401 	bic.w	r4, r3, #1
 800fa2c:	e7db      	b.n	800f9e6 <__ieee754_sqrt+0x15e>
 800fa2e:	bf00      	nop
 800fa30:	7ff00000 	.word	0x7ff00000
 800fa34:	20000018 	.word	0x20000018
 800fa38:	20000010 	.word	0x20000010
 800fa3c:	00000000 	.word	0x00000000

0800fa40 <__kernel_cos>:
 800fa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa44:	ec57 6b10 	vmov	r6, r7, d0
 800fa48:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fa4c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800fa50:	ed8d 1b00 	vstr	d1, [sp]
 800fa54:	d206      	bcs.n	800fa64 <__kernel_cos+0x24>
 800fa56:	4630      	mov	r0, r6
 800fa58:	4639      	mov	r1, r7
 800fa5a:	f7f1 f89d 	bl	8000b98 <__aeabi_d2iz>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f000 8088 	beq.w	800fb74 <__kernel_cos+0x134>
 800fa64:	4632      	mov	r2, r6
 800fa66:	463b      	mov	r3, r7
 800fa68:	4630      	mov	r0, r6
 800fa6a:	4639      	mov	r1, r7
 800fa6c:	f7f0 fde4 	bl	8000638 <__aeabi_dmul>
 800fa70:	4b51      	ldr	r3, [pc, #324]	@ (800fbb8 <__kernel_cos+0x178>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	4604      	mov	r4, r0
 800fa76:	460d      	mov	r5, r1
 800fa78:	f7f0 fdde 	bl	8000638 <__aeabi_dmul>
 800fa7c:	a340      	add	r3, pc, #256	@ (adr r3, 800fb80 <__kernel_cos+0x140>)
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	4682      	mov	sl, r0
 800fa84:	468b      	mov	fp, r1
 800fa86:	4620      	mov	r0, r4
 800fa88:	4629      	mov	r1, r5
 800fa8a:	f7f0 fdd5 	bl	8000638 <__aeabi_dmul>
 800fa8e:	a33e      	add	r3, pc, #248	@ (adr r3, 800fb88 <__kernel_cos+0x148>)
 800fa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa94:	f7f0 fc1a 	bl	80002cc <__adddf3>
 800fa98:	4622      	mov	r2, r4
 800fa9a:	462b      	mov	r3, r5
 800fa9c:	f7f0 fdcc 	bl	8000638 <__aeabi_dmul>
 800faa0:	a33b      	add	r3, pc, #236	@ (adr r3, 800fb90 <__kernel_cos+0x150>)
 800faa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa6:	f7f0 fc0f 	bl	80002c8 <__aeabi_dsub>
 800faaa:	4622      	mov	r2, r4
 800faac:	462b      	mov	r3, r5
 800faae:	f7f0 fdc3 	bl	8000638 <__aeabi_dmul>
 800fab2:	a339      	add	r3, pc, #228	@ (adr r3, 800fb98 <__kernel_cos+0x158>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f7f0 fc08 	bl	80002cc <__adddf3>
 800fabc:	4622      	mov	r2, r4
 800fabe:	462b      	mov	r3, r5
 800fac0:	f7f0 fdba 	bl	8000638 <__aeabi_dmul>
 800fac4:	a336      	add	r3, pc, #216	@ (adr r3, 800fba0 <__kernel_cos+0x160>)
 800fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faca:	f7f0 fbfd 	bl	80002c8 <__aeabi_dsub>
 800face:	4622      	mov	r2, r4
 800fad0:	462b      	mov	r3, r5
 800fad2:	f7f0 fdb1 	bl	8000638 <__aeabi_dmul>
 800fad6:	a334      	add	r3, pc, #208	@ (adr r3, 800fba8 <__kernel_cos+0x168>)
 800fad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fadc:	f7f0 fbf6 	bl	80002cc <__adddf3>
 800fae0:	4622      	mov	r2, r4
 800fae2:	462b      	mov	r3, r5
 800fae4:	f7f0 fda8 	bl	8000638 <__aeabi_dmul>
 800fae8:	4622      	mov	r2, r4
 800faea:	462b      	mov	r3, r5
 800faec:	f7f0 fda4 	bl	8000638 <__aeabi_dmul>
 800faf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faf4:	4604      	mov	r4, r0
 800faf6:	460d      	mov	r5, r1
 800faf8:	4630      	mov	r0, r6
 800fafa:	4639      	mov	r1, r7
 800fafc:	f7f0 fd9c 	bl	8000638 <__aeabi_dmul>
 800fb00:	460b      	mov	r3, r1
 800fb02:	4602      	mov	r2, r0
 800fb04:	4629      	mov	r1, r5
 800fb06:	4620      	mov	r0, r4
 800fb08:	f7f0 fbde 	bl	80002c8 <__aeabi_dsub>
 800fb0c:	4b2b      	ldr	r3, [pc, #172]	@ (800fbbc <__kernel_cos+0x17c>)
 800fb0e:	4598      	cmp	r8, r3
 800fb10:	4606      	mov	r6, r0
 800fb12:	460f      	mov	r7, r1
 800fb14:	d810      	bhi.n	800fb38 <__kernel_cos+0xf8>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4650      	mov	r0, sl
 800fb1c:	4659      	mov	r1, fp
 800fb1e:	f7f0 fbd3 	bl	80002c8 <__aeabi_dsub>
 800fb22:	460b      	mov	r3, r1
 800fb24:	4926      	ldr	r1, [pc, #152]	@ (800fbc0 <__kernel_cos+0x180>)
 800fb26:	4602      	mov	r2, r0
 800fb28:	2000      	movs	r0, #0
 800fb2a:	f7f0 fbcd 	bl	80002c8 <__aeabi_dsub>
 800fb2e:	ec41 0b10 	vmov	d0, r0, r1
 800fb32:	b003      	add	sp, #12
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	4b22      	ldr	r3, [pc, #136]	@ (800fbc4 <__kernel_cos+0x184>)
 800fb3a:	4921      	ldr	r1, [pc, #132]	@ (800fbc0 <__kernel_cos+0x180>)
 800fb3c:	4598      	cmp	r8, r3
 800fb3e:	bf8c      	ite	hi
 800fb40:	4d21      	ldrhi	r5, [pc, #132]	@ (800fbc8 <__kernel_cos+0x188>)
 800fb42:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800fb46:	2400      	movs	r4, #0
 800fb48:	4622      	mov	r2, r4
 800fb4a:	462b      	mov	r3, r5
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	f7f0 fbbb 	bl	80002c8 <__aeabi_dsub>
 800fb52:	4622      	mov	r2, r4
 800fb54:	4680      	mov	r8, r0
 800fb56:	4689      	mov	r9, r1
 800fb58:	462b      	mov	r3, r5
 800fb5a:	4650      	mov	r0, sl
 800fb5c:	4659      	mov	r1, fp
 800fb5e:	f7f0 fbb3 	bl	80002c8 <__aeabi_dsub>
 800fb62:	4632      	mov	r2, r6
 800fb64:	463b      	mov	r3, r7
 800fb66:	f7f0 fbaf 	bl	80002c8 <__aeabi_dsub>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	4640      	mov	r0, r8
 800fb70:	4649      	mov	r1, r9
 800fb72:	e7da      	b.n	800fb2a <__kernel_cos+0xea>
 800fb74:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800fbb0 <__kernel_cos+0x170>
 800fb78:	e7db      	b.n	800fb32 <__kernel_cos+0xf2>
 800fb7a:	bf00      	nop
 800fb7c:	f3af 8000 	nop.w
 800fb80:	be8838d4 	.word	0xbe8838d4
 800fb84:	bda8fae9 	.word	0xbda8fae9
 800fb88:	bdb4b1c4 	.word	0xbdb4b1c4
 800fb8c:	3e21ee9e 	.word	0x3e21ee9e
 800fb90:	809c52ad 	.word	0x809c52ad
 800fb94:	3e927e4f 	.word	0x3e927e4f
 800fb98:	19cb1590 	.word	0x19cb1590
 800fb9c:	3efa01a0 	.word	0x3efa01a0
 800fba0:	16c15177 	.word	0x16c15177
 800fba4:	3f56c16c 	.word	0x3f56c16c
 800fba8:	5555554c 	.word	0x5555554c
 800fbac:	3fa55555 	.word	0x3fa55555
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	3ff00000 	.word	0x3ff00000
 800fbb8:	3fe00000 	.word	0x3fe00000
 800fbbc:	3fd33332 	.word	0x3fd33332
 800fbc0:	3ff00000 	.word	0x3ff00000
 800fbc4:	3fe90000 	.word	0x3fe90000
 800fbc8:	3fd20000 	.word	0x3fd20000
 800fbcc:	00000000 	.word	0x00000000

0800fbd0 <__kernel_sin>:
 800fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	ec55 4b10 	vmov	r4, r5, d0
 800fbd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fbdc:	b085      	sub	sp, #20
 800fbde:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fbe2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800fbe6:	4680      	mov	r8, r0
 800fbe8:	d205      	bcs.n	800fbf6 <__kernel_sin+0x26>
 800fbea:	4620      	mov	r0, r4
 800fbec:	4629      	mov	r1, r5
 800fbee:	f7f0 ffd3 	bl	8000b98 <__aeabi_d2iz>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d052      	beq.n	800fc9c <__kernel_sin+0xcc>
 800fbf6:	4622      	mov	r2, r4
 800fbf8:	462b      	mov	r3, r5
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	4629      	mov	r1, r5
 800fbfe:	f7f0 fd1b 	bl	8000638 <__aeabi_dmul>
 800fc02:	4682      	mov	sl, r0
 800fc04:	468b      	mov	fp, r1
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	f7f0 fd13 	bl	8000638 <__aeabi_dmul>
 800fc12:	a342      	add	r3, pc, #264	@ (adr r3, 800fd1c <__kernel_sin+0x14c>)
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	e9cd 0100 	strd	r0, r1, [sp]
 800fc1c:	4650      	mov	r0, sl
 800fc1e:	4659      	mov	r1, fp
 800fc20:	f7f0 fd0a 	bl	8000638 <__aeabi_dmul>
 800fc24:	a33f      	add	r3, pc, #252	@ (adr r3, 800fd24 <__kernel_sin+0x154>)
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	f7f0 fb4d 	bl	80002c8 <__aeabi_dsub>
 800fc2e:	4652      	mov	r2, sl
 800fc30:	465b      	mov	r3, fp
 800fc32:	f7f0 fd01 	bl	8000638 <__aeabi_dmul>
 800fc36:	a33d      	add	r3, pc, #244	@ (adr r3, 800fd2c <__kernel_sin+0x15c>)
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	f7f0 fb46 	bl	80002cc <__adddf3>
 800fc40:	4652      	mov	r2, sl
 800fc42:	465b      	mov	r3, fp
 800fc44:	f7f0 fcf8 	bl	8000638 <__aeabi_dmul>
 800fc48:	a33a      	add	r3, pc, #232	@ (adr r3, 800fd34 <__kernel_sin+0x164>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f7f0 fb3b 	bl	80002c8 <__aeabi_dsub>
 800fc52:	4652      	mov	r2, sl
 800fc54:	465b      	mov	r3, fp
 800fc56:	f7f0 fcef 	bl	8000638 <__aeabi_dmul>
 800fc5a:	a338      	add	r3, pc, #224	@ (adr r3, 800fd3c <__kernel_sin+0x16c>)
 800fc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc60:	f7f0 fb34 	bl	80002cc <__adddf3>
 800fc64:	4606      	mov	r6, r0
 800fc66:	460f      	mov	r7, r1
 800fc68:	f1b8 0f00 	cmp.w	r8, #0
 800fc6c:	d11b      	bne.n	800fca6 <__kernel_sin+0xd6>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	460b      	mov	r3, r1
 800fc72:	4650      	mov	r0, sl
 800fc74:	4659      	mov	r1, fp
 800fc76:	f7f0 fcdf 	bl	8000638 <__aeabi_dmul>
 800fc7a:	a325      	add	r3, pc, #148	@ (adr r3, 800fd10 <__kernel_sin+0x140>)
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	f7f0 fb22 	bl	80002c8 <__aeabi_dsub>
 800fc84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc88:	f7f0 fcd6 	bl	8000638 <__aeabi_dmul>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	460b      	mov	r3, r1
 800fc90:	4620      	mov	r0, r4
 800fc92:	4629      	mov	r1, r5
 800fc94:	f7f0 fb1a 	bl	80002cc <__adddf3>
 800fc98:	4604      	mov	r4, r0
 800fc9a:	460d      	mov	r5, r1
 800fc9c:	ec45 4b10 	vmov	d0, r4, r5
 800fca0:	b005      	add	sp, #20
 800fca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcaa:	4b1b      	ldr	r3, [pc, #108]	@ (800fd18 <__kernel_sin+0x148>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	f7f0 fcc3 	bl	8000638 <__aeabi_dmul>
 800fcb2:	4632      	mov	r2, r6
 800fcb4:	4680      	mov	r8, r0
 800fcb6:	4689      	mov	r9, r1
 800fcb8:	463b      	mov	r3, r7
 800fcba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcbe:	f7f0 fcbb 	bl	8000638 <__aeabi_dmul>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	4649      	mov	r1, r9
 800fcca:	f7f0 fafd 	bl	80002c8 <__aeabi_dsub>
 800fcce:	4652      	mov	r2, sl
 800fcd0:	465b      	mov	r3, fp
 800fcd2:	f7f0 fcb1 	bl	8000638 <__aeabi_dmul>
 800fcd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcda:	f7f0 faf5 	bl	80002c8 <__aeabi_dsub>
 800fcde:	a30c      	add	r3, pc, #48	@ (adr r3, 800fd10 <__kernel_sin+0x140>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	4606      	mov	r6, r0
 800fce6:	460f      	mov	r7, r1
 800fce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcec:	f7f0 fca4 	bl	8000638 <__aeabi_dmul>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4630      	mov	r0, r6
 800fcf6:	4639      	mov	r1, r7
 800fcf8:	f7f0 fae8 	bl	80002cc <__adddf3>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4620      	mov	r0, r4
 800fd02:	4629      	mov	r1, r5
 800fd04:	f7f0 fae0 	bl	80002c8 <__aeabi_dsub>
 800fd08:	e7c6      	b.n	800fc98 <__kernel_sin+0xc8>
 800fd0a:	bf00      	nop
 800fd0c:	f3af 8000 	nop.w
 800fd10:	55555549 	.word	0x55555549
 800fd14:	3fc55555 	.word	0x3fc55555
 800fd18:	3fe00000 	.word	0x3fe00000
 800fd1c:	5acfd57c 	.word	0x5acfd57c
 800fd20:	3de5d93a 	.word	0x3de5d93a
 800fd24:	8a2b9ceb 	.word	0x8a2b9ceb
 800fd28:	3e5ae5e6 	.word	0x3e5ae5e6
 800fd2c:	57b1fe7d 	.word	0x57b1fe7d
 800fd30:	3ec71de3 	.word	0x3ec71de3
 800fd34:	19c161d5 	.word	0x19c161d5
 800fd38:	3f2a01a0 	.word	0x3f2a01a0
 800fd3c:	1110f8a6 	.word	0x1110f8a6
 800fd40:	3f811111 	.word	0x3f811111
 800fd44:	00000000 	.word	0x00000000

0800fd48 <__ieee754_pow>:
 800fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4c:	b091      	sub	sp, #68	@ 0x44
 800fd4e:	ed8d 1b00 	vstr	d1, [sp]
 800fd52:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fd56:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fd5a:	ea5a 0001 	orrs.w	r0, sl, r1
 800fd5e:	ec57 6b10 	vmov	r6, r7, d0
 800fd62:	d113      	bne.n	800fd8c <__ieee754_pow+0x44>
 800fd64:	19b3      	adds	r3, r6, r6
 800fd66:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fd6a:	4152      	adcs	r2, r2
 800fd6c:	4298      	cmp	r0, r3
 800fd6e:	4b98      	ldr	r3, [pc, #608]	@ (800ffd0 <__ieee754_pow+0x288>)
 800fd70:	4193      	sbcs	r3, r2
 800fd72:	f080 84ea 	bcs.w	801074a <__ieee754_pow+0xa02>
 800fd76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	f7f0 faa5 	bl	80002cc <__adddf3>
 800fd82:	ec41 0b10 	vmov	d0, r0, r1
 800fd86:	b011      	add	sp, #68	@ 0x44
 800fd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8c:	4a91      	ldr	r2, [pc, #580]	@ (800ffd4 <__ieee754_pow+0x28c>)
 800fd8e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fd92:	4590      	cmp	r8, r2
 800fd94:	463d      	mov	r5, r7
 800fd96:	4633      	mov	r3, r6
 800fd98:	d806      	bhi.n	800fda8 <__ieee754_pow+0x60>
 800fd9a:	d101      	bne.n	800fda0 <__ieee754_pow+0x58>
 800fd9c:	2e00      	cmp	r6, #0
 800fd9e:	d1ea      	bne.n	800fd76 <__ieee754_pow+0x2e>
 800fda0:	4592      	cmp	sl, r2
 800fda2:	d801      	bhi.n	800fda8 <__ieee754_pow+0x60>
 800fda4:	d10e      	bne.n	800fdc4 <__ieee754_pow+0x7c>
 800fda6:	b169      	cbz	r1, 800fdc4 <__ieee754_pow+0x7c>
 800fda8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fdac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fdb0:	431d      	orrs	r5, r3
 800fdb2:	d1e0      	bne.n	800fd76 <__ieee754_pow+0x2e>
 800fdb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fdb8:	18db      	adds	r3, r3, r3
 800fdba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fdbe:	4152      	adcs	r2, r2
 800fdc0:	429d      	cmp	r5, r3
 800fdc2:	e7d4      	b.n	800fd6e <__ieee754_pow+0x26>
 800fdc4:	2d00      	cmp	r5, #0
 800fdc6:	46c3      	mov	fp, r8
 800fdc8:	da3a      	bge.n	800fe40 <__ieee754_pow+0xf8>
 800fdca:	4a83      	ldr	r2, [pc, #524]	@ (800ffd8 <__ieee754_pow+0x290>)
 800fdcc:	4592      	cmp	sl, r2
 800fdce:	d84d      	bhi.n	800fe6c <__ieee754_pow+0x124>
 800fdd0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fdd4:	4592      	cmp	sl, r2
 800fdd6:	f240 84c7 	bls.w	8010768 <__ieee754_pow+0xa20>
 800fdda:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fdde:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fde2:	2a14      	cmp	r2, #20
 800fde4:	dd0f      	ble.n	800fe06 <__ieee754_pow+0xbe>
 800fde6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fdea:	fa21 f402 	lsr.w	r4, r1, r2
 800fdee:	fa04 f202 	lsl.w	r2, r4, r2
 800fdf2:	428a      	cmp	r2, r1
 800fdf4:	f040 84b8 	bne.w	8010768 <__ieee754_pow+0xa20>
 800fdf8:	f004 0401 	and.w	r4, r4, #1
 800fdfc:	f1c4 0402 	rsb	r4, r4, #2
 800fe00:	2900      	cmp	r1, #0
 800fe02:	d158      	bne.n	800feb6 <__ieee754_pow+0x16e>
 800fe04:	e00e      	b.n	800fe24 <__ieee754_pow+0xdc>
 800fe06:	2900      	cmp	r1, #0
 800fe08:	d154      	bne.n	800feb4 <__ieee754_pow+0x16c>
 800fe0a:	f1c2 0214 	rsb	r2, r2, #20
 800fe0e:	fa4a f402 	asr.w	r4, sl, r2
 800fe12:	fa04 f202 	lsl.w	r2, r4, r2
 800fe16:	4552      	cmp	r2, sl
 800fe18:	f040 84a3 	bne.w	8010762 <__ieee754_pow+0xa1a>
 800fe1c:	f004 0401 	and.w	r4, r4, #1
 800fe20:	f1c4 0402 	rsb	r4, r4, #2
 800fe24:	4a6d      	ldr	r2, [pc, #436]	@ (800ffdc <__ieee754_pow+0x294>)
 800fe26:	4592      	cmp	sl, r2
 800fe28:	d12e      	bne.n	800fe88 <__ieee754_pow+0x140>
 800fe2a:	f1b9 0f00 	cmp.w	r9, #0
 800fe2e:	f280 8494 	bge.w	801075a <__ieee754_pow+0xa12>
 800fe32:	496a      	ldr	r1, [pc, #424]	@ (800ffdc <__ieee754_pow+0x294>)
 800fe34:	4632      	mov	r2, r6
 800fe36:	463b      	mov	r3, r7
 800fe38:	2000      	movs	r0, #0
 800fe3a:	f7f0 fd27 	bl	800088c <__aeabi_ddiv>
 800fe3e:	e7a0      	b.n	800fd82 <__ieee754_pow+0x3a>
 800fe40:	2400      	movs	r4, #0
 800fe42:	bbc1      	cbnz	r1, 800feb6 <__ieee754_pow+0x16e>
 800fe44:	4a63      	ldr	r2, [pc, #396]	@ (800ffd4 <__ieee754_pow+0x28c>)
 800fe46:	4592      	cmp	sl, r2
 800fe48:	d1ec      	bne.n	800fe24 <__ieee754_pow+0xdc>
 800fe4a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800fe4e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fe52:	431a      	orrs	r2, r3
 800fe54:	f000 8479 	beq.w	801074a <__ieee754_pow+0xa02>
 800fe58:	4b61      	ldr	r3, [pc, #388]	@ (800ffe0 <__ieee754_pow+0x298>)
 800fe5a:	4598      	cmp	r8, r3
 800fe5c:	d908      	bls.n	800fe70 <__ieee754_pow+0x128>
 800fe5e:	f1b9 0f00 	cmp.w	r9, #0
 800fe62:	f2c0 8476 	blt.w	8010752 <__ieee754_pow+0xa0a>
 800fe66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe6a:	e78a      	b.n	800fd82 <__ieee754_pow+0x3a>
 800fe6c:	2402      	movs	r4, #2
 800fe6e:	e7e8      	b.n	800fe42 <__ieee754_pow+0xfa>
 800fe70:	f1b9 0f00 	cmp.w	r9, #0
 800fe74:	f04f 0000 	mov.w	r0, #0
 800fe78:	f04f 0100 	mov.w	r1, #0
 800fe7c:	da81      	bge.n	800fd82 <__ieee754_pow+0x3a>
 800fe7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fe82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fe86:	e77c      	b.n	800fd82 <__ieee754_pow+0x3a>
 800fe88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fe8c:	d106      	bne.n	800fe9c <__ieee754_pow+0x154>
 800fe8e:	4632      	mov	r2, r6
 800fe90:	463b      	mov	r3, r7
 800fe92:	4630      	mov	r0, r6
 800fe94:	4639      	mov	r1, r7
 800fe96:	f7f0 fbcf 	bl	8000638 <__aeabi_dmul>
 800fe9a:	e772      	b.n	800fd82 <__ieee754_pow+0x3a>
 800fe9c:	4a51      	ldr	r2, [pc, #324]	@ (800ffe4 <__ieee754_pow+0x29c>)
 800fe9e:	4591      	cmp	r9, r2
 800fea0:	d109      	bne.n	800feb6 <__ieee754_pow+0x16e>
 800fea2:	2d00      	cmp	r5, #0
 800fea4:	db07      	blt.n	800feb6 <__ieee754_pow+0x16e>
 800fea6:	ec47 6b10 	vmov	d0, r6, r7
 800feaa:	b011      	add	sp, #68	@ 0x44
 800feac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb0:	f7ff bcea 	b.w	800f888 <__ieee754_sqrt>
 800feb4:	2400      	movs	r4, #0
 800feb6:	ec47 6b10 	vmov	d0, r6, r7
 800feba:	9302      	str	r3, [sp, #8]
 800febc:	f000 fe84 	bl	8010bc8 <fabs>
 800fec0:	9b02      	ldr	r3, [sp, #8]
 800fec2:	ec51 0b10 	vmov	r0, r1, d0
 800fec6:	bb53      	cbnz	r3, 800ff1e <__ieee754_pow+0x1d6>
 800fec8:	4b44      	ldr	r3, [pc, #272]	@ (800ffdc <__ieee754_pow+0x294>)
 800feca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800fece:	429a      	cmp	r2, r3
 800fed0:	d002      	beq.n	800fed8 <__ieee754_pow+0x190>
 800fed2:	f1b8 0f00 	cmp.w	r8, #0
 800fed6:	d122      	bne.n	800ff1e <__ieee754_pow+0x1d6>
 800fed8:	f1b9 0f00 	cmp.w	r9, #0
 800fedc:	da05      	bge.n	800feea <__ieee754_pow+0x1a2>
 800fede:	4602      	mov	r2, r0
 800fee0:	460b      	mov	r3, r1
 800fee2:	2000      	movs	r0, #0
 800fee4:	493d      	ldr	r1, [pc, #244]	@ (800ffdc <__ieee754_pow+0x294>)
 800fee6:	f7f0 fcd1 	bl	800088c <__aeabi_ddiv>
 800feea:	2d00      	cmp	r5, #0
 800feec:	f6bf af49 	bge.w	800fd82 <__ieee754_pow+0x3a>
 800fef0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fef4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fef8:	ea58 0804 	orrs.w	r8, r8, r4
 800fefc:	d108      	bne.n	800ff10 <__ieee754_pow+0x1c8>
 800fefe:	4602      	mov	r2, r0
 800ff00:	460b      	mov	r3, r1
 800ff02:	4610      	mov	r0, r2
 800ff04:	4619      	mov	r1, r3
 800ff06:	f7f0 f9df 	bl	80002c8 <__aeabi_dsub>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	e794      	b.n	800fe3a <__ieee754_pow+0xf2>
 800ff10:	2c01      	cmp	r4, #1
 800ff12:	f47f af36 	bne.w	800fd82 <__ieee754_pow+0x3a>
 800ff16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	e731      	b.n	800fd82 <__ieee754_pow+0x3a>
 800ff1e:	0feb      	lsrs	r3, r5, #31
 800ff20:	3b01      	subs	r3, #1
 800ff22:	ea53 0204 	orrs.w	r2, r3, r4
 800ff26:	d102      	bne.n	800ff2e <__ieee754_pow+0x1e6>
 800ff28:	4632      	mov	r2, r6
 800ff2a:	463b      	mov	r3, r7
 800ff2c:	e7e9      	b.n	800ff02 <__ieee754_pow+0x1ba>
 800ff2e:	3c01      	subs	r4, #1
 800ff30:	431c      	orrs	r4, r3
 800ff32:	d016      	beq.n	800ff62 <__ieee754_pow+0x21a>
 800ff34:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ffc0 <__ieee754_pow+0x278>
 800ff38:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ff3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff40:	f240 8112 	bls.w	8010168 <__ieee754_pow+0x420>
 800ff44:	4b28      	ldr	r3, [pc, #160]	@ (800ffe8 <__ieee754_pow+0x2a0>)
 800ff46:	459a      	cmp	sl, r3
 800ff48:	4b25      	ldr	r3, [pc, #148]	@ (800ffe0 <__ieee754_pow+0x298>)
 800ff4a:	d916      	bls.n	800ff7a <__ieee754_pow+0x232>
 800ff4c:	4598      	cmp	r8, r3
 800ff4e:	d80b      	bhi.n	800ff68 <__ieee754_pow+0x220>
 800ff50:	f1b9 0f00 	cmp.w	r9, #0
 800ff54:	da0b      	bge.n	800ff6e <__ieee754_pow+0x226>
 800ff56:	2000      	movs	r0, #0
 800ff58:	b011      	add	sp, #68	@ 0x44
 800ff5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5e:	f000 beef 	b.w	8010d40 <__math_oflow>
 800ff62:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ffc8 <__ieee754_pow+0x280>
 800ff66:	e7e7      	b.n	800ff38 <__ieee754_pow+0x1f0>
 800ff68:	f1b9 0f00 	cmp.w	r9, #0
 800ff6c:	dcf3      	bgt.n	800ff56 <__ieee754_pow+0x20e>
 800ff6e:	2000      	movs	r0, #0
 800ff70:	b011      	add	sp, #68	@ 0x44
 800ff72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff76:	f000 bedb 	b.w	8010d30 <__math_uflow>
 800ff7a:	4598      	cmp	r8, r3
 800ff7c:	d20c      	bcs.n	800ff98 <__ieee754_pow+0x250>
 800ff7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff82:	2200      	movs	r2, #0
 800ff84:	2300      	movs	r3, #0
 800ff86:	f7f0 fdc9 	bl	8000b1c <__aeabi_dcmplt>
 800ff8a:	3800      	subs	r0, #0
 800ff8c:	bf18      	it	ne
 800ff8e:	2001      	movne	r0, #1
 800ff90:	f1b9 0f00 	cmp.w	r9, #0
 800ff94:	daec      	bge.n	800ff70 <__ieee754_pow+0x228>
 800ff96:	e7df      	b.n	800ff58 <__ieee754_pow+0x210>
 800ff98:	4b10      	ldr	r3, [pc, #64]	@ (800ffdc <__ieee754_pow+0x294>)
 800ff9a:	4598      	cmp	r8, r3
 800ff9c:	f04f 0200 	mov.w	r2, #0
 800ffa0:	d924      	bls.n	800ffec <__ieee754_pow+0x2a4>
 800ffa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	f7f0 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 800ffac:	3800      	subs	r0, #0
 800ffae:	bf18      	it	ne
 800ffb0:	2001      	movne	r0, #1
 800ffb2:	f1b9 0f00 	cmp.w	r9, #0
 800ffb6:	dccf      	bgt.n	800ff58 <__ieee754_pow+0x210>
 800ffb8:	e7da      	b.n	800ff70 <__ieee754_pow+0x228>
 800ffba:	bf00      	nop
 800ffbc:	f3af 8000 	nop.w
 800ffc0:	00000000 	.word	0x00000000
 800ffc4:	3ff00000 	.word	0x3ff00000
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	bff00000 	.word	0xbff00000
 800ffd0:	fff00000 	.word	0xfff00000
 800ffd4:	7ff00000 	.word	0x7ff00000
 800ffd8:	433fffff 	.word	0x433fffff
 800ffdc:	3ff00000 	.word	0x3ff00000
 800ffe0:	3fefffff 	.word	0x3fefffff
 800ffe4:	3fe00000 	.word	0x3fe00000
 800ffe8:	43f00000 	.word	0x43f00000
 800ffec:	4b5a      	ldr	r3, [pc, #360]	@ (8010158 <__ieee754_pow+0x410>)
 800ffee:	f7f0 f96b 	bl	80002c8 <__aeabi_dsub>
 800fff2:	a351      	add	r3, pc, #324	@ (adr r3, 8010138 <__ieee754_pow+0x3f0>)
 800fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff8:	4604      	mov	r4, r0
 800fffa:	460d      	mov	r5, r1
 800fffc:	f7f0 fb1c 	bl	8000638 <__aeabi_dmul>
 8010000:	a34f      	add	r3, pc, #316	@ (adr r3, 8010140 <__ieee754_pow+0x3f8>)
 8010002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010006:	4606      	mov	r6, r0
 8010008:	460f      	mov	r7, r1
 801000a:	4620      	mov	r0, r4
 801000c:	4629      	mov	r1, r5
 801000e:	f7f0 fb13 	bl	8000638 <__aeabi_dmul>
 8010012:	4b52      	ldr	r3, [pc, #328]	@ (801015c <__ieee754_pow+0x414>)
 8010014:	4682      	mov	sl, r0
 8010016:	468b      	mov	fp, r1
 8010018:	2200      	movs	r2, #0
 801001a:	4620      	mov	r0, r4
 801001c:	4629      	mov	r1, r5
 801001e:	f7f0 fb0b 	bl	8000638 <__aeabi_dmul>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	a148      	add	r1, pc, #288	@ (adr r1, 8010148 <__ieee754_pow+0x400>)
 8010028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801002c:	f7f0 f94c 	bl	80002c8 <__aeabi_dsub>
 8010030:	4622      	mov	r2, r4
 8010032:	462b      	mov	r3, r5
 8010034:	f7f0 fb00 	bl	8000638 <__aeabi_dmul>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	2000      	movs	r0, #0
 801003e:	4948      	ldr	r1, [pc, #288]	@ (8010160 <__ieee754_pow+0x418>)
 8010040:	f7f0 f942 	bl	80002c8 <__aeabi_dsub>
 8010044:	4622      	mov	r2, r4
 8010046:	4680      	mov	r8, r0
 8010048:	4689      	mov	r9, r1
 801004a:	462b      	mov	r3, r5
 801004c:	4620      	mov	r0, r4
 801004e:	4629      	mov	r1, r5
 8010050:	f7f0 faf2 	bl	8000638 <__aeabi_dmul>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4640      	mov	r0, r8
 801005a:	4649      	mov	r1, r9
 801005c:	f7f0 faec 	bl	8000638 <__aeabi_dmul>
 8010060:	a33b      	add	r3, pc, #236	@ (adr r3, 8010150 <__ieee754_pow+0x408>)
 8010062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010066:	f7f0 fae7 	bl	8000638 <__aeabi_dmul>
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	4650      	mov	r0, sl
 8010070:	4659      	mov	r1, fp
 8010072:	f7f0 f929 	bl	80002c8 <__aeabi_dsub>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4680      	mov	r8, r0
 801007c:	4689      	mov	r9, r1
 801007e:	4630      	mov	r0, r6
 8010080:	4639      	mov	r1, r7
 8010082:	f7f0 f923 	bl	80002cc <__adddf3>
 8010086:	2400      	movs	r4, #0
 8010088:	4632      	mov	r2, r6
 801008a:	463b      	mov	r3, r7
 801008c:	4620      	mov	r0, r4
 801008e:	460d      	mov	r5, r1
 8010090:	f7f0 f91a 	bl	80002c8 <__aeabi_dsub>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4640      	mov	r0, r8
 801009a:	4649      	mov	r1, r9
 801009c:	f7f0 f914 	bl	80002c8 <__aeabi_dsub>
 80100a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80100a8:	2300      	movs	r3, #0
 80100aa:	9304      	str	r3, [sp, #16]
 80100ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80100b0:	4606      	mov	r6, r0
 80100b2:	460f      	mov	r7, r1
 80100b4:	4652      	mov	r2, sl
 80100b6:	465b      	mov	r3, fp
 80100b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100bc:	f7f0 f904 	bl	80002c8 <__aeabi_dsub>
 80100c0:	4622      	mov	r2, r4
 80100c2:	462b      	mov	r3, r5
 80100c4:	f7f0 fab8 	bl	8000638 <__aeabi_dmul>
 80100c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100cc:	4680      	mov	r8, r0
 80100ce:	4689      	mov	r9, r1
 80100d0:	4630      	mov	r0, r6
 80100d2:	4639      	mov	r1, r7
 80100d4:	f7f0 fab0 	bl	8000638 <__aeabi_dmul>
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	4640      	mov	r0, r8
 80100de:	4649      	mov	r1, r9
 80100e0:	f7f0 f8f4 	bl	80002cc <__adddf3>
 80100e4:	4652      	mov	r2, sl
 80100e6:	465b      	mov	r3, fp
 80100e8:	4606      	mov	r6, r0
 80100ea:	460f      	mov	r7, r1
 80100ec:	4620      	mov	r0, r4
 80100ee:	4629      	mov	r1, r5
 80100f0:	f7f0 faa2 	bl	8000638 <__aeabi_dmul>
 80100f4:	460b      	mov	r3, r1
 80100f6:	4602      	mov	r2, r0
 80100f8:	4680      	mov	r8, r0
 80100fa:	4689      	mov	r9, r1
 80100fc:	4630      	mov	r0, r6
 80100fe:	4639      	mov	r1, r7
 8010100:	f7f0 f8e4 	bl	80002cc <__adddf3>
 8010104:	4b17      	ldr	r3, [pc, #92]	@ (8010164 <__ieee754_pow+0x41c>)
 8010106:	4299      	cmp	r1, r3
 8010108:	4604      	mov	r4, r0
 801010a:	460d      	mov	r5, r1
 801010c:	468a      	mov	sl, r1
 801010e:	468b      	mov	fp, r1
 8010110:	f340 82ef 	ble.w	80106f2 <__ieee754_pow+0x9aa>
 8010114:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010118:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801011c:	4303      	orrs	r3, r0
 801011e:	f000 81e8 	beq.w	80104f2 <__ieee754_pow+0x7aa>
 8010122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010126:	2200      	movs	r2, #0
 8010128:	2300      	movs	r3, #0
 801012a:	f7f0 fcf7 	bl	8000b1c <__aeabi_dcmplt>
 801012e:	3800      	subs	r0, #0
 8010130:	bf18      	it	ne
 8010132:	2001      	movne	r0, #1
 8010134:	e710      	b.n	800ff58 <__ieee754_pow+0x210>
 8010136:	bf00      	nop
 8010138:	60000000 	.word	0x60000000
 801013c:	3ff71547 	.word	0x3ff71547
 8010140:	f85ddf44 	.word	0xf85ddf44
 8010144:	3e54ae0b 	.word	0x3e54ae0b
 8010148:	55555555 	.word	0x55555555
 801014c:	3fd55555 	.word	0x3fd55555
 8010150:	652b82fe 	.word	0x652b82fe
 8010154:	3ff71547 	.word	0x3ff71547
 8010158:	3ff00000 	.word	0x3ff00000
 801015c:	3fd00000 	.word	0x3fd00000
 8010160:	3fe00000 	.word	0x3fe00000
 8010164:	408fffff 	.word	0x408fffff
 8010168:	4bd5      	ldr	r3, [pc, #852]	@ (80104c0 <__ieee754_pow+0x778>)
 801016a:	402b      	ands	r3, r5
 801016c:	2200      	movs	r2, #0
 801016e:	b92b      	cbnz	r3, 801017c <__ieee754_pow+0x434>
 8010170:	4bd4      	ldr	r3, [pc, #848]	@ (80104c4 <__ieee754_pow+0x77c>)
 8010172:	f7f0 fa61 	bl	8000638 <__aeabi_dmul>
 8010176:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801017a:	468b      	mov	fp, r1
 801017c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010180:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010184:	4413      	add	r3, r2
 8010186:	930a      	str	r3, [sp, #40]	@ 0x28
 8010188:	4bcf      	ldr	r3, [pc, #828]	@ (80104c8 <__ieee754_pow+0x780>)
 801018a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801018e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010192:	459b      	cmp	fp, r3
 8010194:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010198:	dd08      	ble.n	80101ac <__ieee754_pow+0x464>
 801019a:	4bcc      	ldr	r3, [pc, #816]	@ (80104cc <__ieee754_pow+0x784>)
 801019c:	459b      	cmp	fp, r3
 801019e:	f340 81a5 	ble.w	80104ec <__ieee754_pow+0x7a4>
 80101a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101a4:	3301      	adds	r3, #1
 80101a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80101a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80101ac:	f04f 0a00 	mov.w	sl, #0
 80101b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80101b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101b6:	4bc6      	ldr	r3, [pc, #792]	@ (80104d0 <__ieee754_pow+0x788>)
 80101b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101bc:	ed93 7b00 	vldr	d7, [r3]
 80101c0:	4629      	mov	r1, r5
 80101c2:	ec53 2b17 	vmov	r2, r3, d7
 80101c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101ce:	f7f0 f87b 	bl	80002c8 <__aeabi_dsub>
 80101d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101d6:	4606      	mov	r6, r0
 80101d8:	460f      	mov	r7, r1
 80101da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101de:	f7f0 f875 	bl	80002cc <__adddf3>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	2000      	movs	r0, #0
 80101e8:	49ba      	ldr	r1, [pc, #744]	@ (80104d4 <__ieee754_pow+0x78c>)
 80101ea:	f7f0 fb4f 	bl	800088c <__aeabi_ddiv>
 80101ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80101f2:	4602      	mov	r2, r0
 80101f4:	460b      	mov	r3, r1
 80101f6:	4630      	mov	r0, r6
 80101f8:	4639      	mov	r1, r7
 80101fa:	f7f0 fa1d 	bl	8000638 <__aeabi_dmul>
 80101fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010202:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010206:	106d      	asrs	r5, r5, #1
 8010208:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801020c:	f04f 0b00 	mov.w	fp, #0
 8010210:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010214:	4661      	mov	r1, ip
 8010216:	2200      	movs	r2, #0
 8010218:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801021c:	4658      	mov	r0, fp
 801021e:	46e1      	mov	r9, ip
 8010220:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010224:	4614      	mov	r4, r2
 8010226:	461d      	mov	r5, r3
 8010228:	f7f0 fa06 	bl	8000638 <__aeabi_dmul>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4630      	mov	r0, r6
 8010232:	4639      	mov	r1, r7
 8010234:	f7f0 f848 	bl	80002c8 <__aeabi_dsub>
 8010238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801023c:	4606      	mov	r6, r0
 801023e:	460f      	mov	r7, r1
 8010240:	4620      	mov	r0, r4
 8010242:	4629      	mov	r1, r5
 8010244:	f7f0 f840 	bl	80002c8 <__aeabi_dsub>
 8010248:	4602      	mov	r2, r0
 801024a:	460b      	mov	r3, r1
 801024c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010250:	f7f0 f83a 	bl	80002c8 <__aeabi_dsub>
 8010254:	465a      	mov	r2, fp
 8010256:	464b      	mov	r3, r9
 8010258:	f7f0 f9ee 	bl	8000638 <__aeabi_dmul>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	4630      	mov	r0, r6
 8010262:	4639      	mov	r1, r7
 8010264:	f7f0 f830 	bl	80002c8 <__aeabi_dsub>
 8010268:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801026c:	f7f0 f9e4 	bl	8000638 <__aeabi_dmul>
 8010270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010274:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010278:	4610      	mov	r0, r2
 801027a:	4619      	mov	r1, r3
 801027c:	f7f0 f9dc 	bl	8000638 <__aeabi_dmul>
 8010280:	a37d      	add	r3, pc, #500	@ (adr r3, 8010478 <__ieee754_pow+0x730>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	4604      	mov	r4, r0
 8010288:	460d      	mov	r5, r1
 801028a:	f7f0 f9d5 	bl	8000638 <__aeabi_dmul>
 801028e:	a37c      	add	r3, pc, #496	@ (adr r3, 8010480 <__ieee754_pow+0x738>)
 8010290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010294:	f7f0 f81a 	bl	80002cc <__adddf3>
 8010298:	4622      	mov	r2, r4
 801029a:	462b      	mov	r3, r5
 801029c:	f7f0 f9cc 	bl	8000638 <__aeabi_dmul>
 80102a0:	a379      	add	r3, pc, #484	@ (adr r3, 8010488 <__ieee754_pow+0x740>)
 80102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a6:	f7f0 f811 	bl	80002cc <__adddf3>
 80102aa:	4622      	mov	r2, r4
 80102ac:	462b      	mov	r3, r5
 80102ae:	f7f0 f9c3 	bl	8000638 <__aeabi_dmul>
 80102b2:	a377      	add	r3, pc, #476	@ (adr r3, 8010490 <__ieee754_pow+0x748>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	f7f0 f808 	bl	80002cc <__adddf3>
 80102bc:	4622      	mov	r2, r4
 80102be:	462b      	mov	r3, r5
 80102c0:	f7f0 f9ba 	bl	8000638 <__aeabi_dmul>
 80102c4:	a374      	add	r3, pc, #464	@ (adr r3, 8010498 <__ieee754_pow+0x750>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	f7ef ffff 	bl	80002cc <__adddf3>
 80102ce:	4622      	mov	r2, r4
 80102d0:	462b      	mov	r3, r5
 80102d2:	f7f0 f9b1 	bl	8000638 <__aeabi_dmul>
 80102d6:	a372      	add	r3, pc, #456	@ (adr r3, 80104a0 <__ieee754_pow+0x758>)
 80102d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102dc:	f7ef fff6 	bl	80002cc <__adddf3>
 80102e0:	4622      	mov	r2, r4
 80102e2:	4606      	mov	r6, r0
 80102e4:	460f      	mov	r7, r1
 80102e6:	462b      	mov	r3, r5
 80102e8:	4620      	mov	r0, r4
 80102ea:	4629      	mov	r1, r5
 80102ec:	f7f0 f9a4 	bl	8000638 <__aeabi_dmul>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	4630      	mov	r0, r6
 80102f6:	4639      	mov	r1, r7
 80102f8:	f7f0 f99e 	bl	8000638 <__aeabi_dmul>
 80102fc:	465a      	mov	r2, fp
 80102fe:	4604      	mov	r4, r0
 8010300:	460d      	mov	r5, r1
 8010302:	464b      	mov	r3, r9
 8010304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010308:	f7ef ffe0 	bl	80002cc <__adddf3>
 801030c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010310:	f7f0 f992 	bl	8000638 <__aeabi_dmul>
 8010314:	4622      	mov	r2, r4
 8010316:	462b      	mov	r3, r5
 8010318:	f7ef ffd8 	bl	80002cc <__adddf3>
 801031c:	465a      	mov	r2, fp
 801031e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010322:	464b      	mov	r3, r9
 8010324:	4658      	mov	r0, fp
 8010326:	4649      	mov	r1, r9
 8010328:	f7f0 f986 	bl	8000638 <__aeabi_dmul>
 801032c:	4b6a      	ldr	r3, [pc, #424]	@ (80104d8 <__ieee754_pow+0x790>)
 801032e:	2200      	movs	r2, #0
 8010330:	4606      	mov	r6, r0
 8010332:	460f      	mov	r7, r1
 8010334:	f7ef ffca 	bl	80002cc <__adddf3>
 8010338:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801033c:	f7ef ffc6 	bl	80002cc <__adddf3>
 8010340:	46d8      	mov	r8, fp
 8010342:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010346:	460d      	mov	r5, r1
 8010348:	465a      	mov	r2, fp
 801034a:	460b      	mov	r3, r1
 801034c:	4640      	mov	r0, r8
 801034e:	4649      	mov	r1, r9
 8010350:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010354:	f7f0 f970 	bl	8000638 <__aeabi_dmul>
 8010358:	465c      	mov	r4, fp
 801035a:	4680      	mov	r8, r0
 801035c:	4689      	mov	r9, r1
 801035e:	4b5e      	ldr	r3, [pc, #376]	@ (80104d8 <__ieee754_pow+0x790>)
 8010360:	2200      	movs	r2, #0
 8010362:	4620      	mov	r0, r4
 8010364:	4629      	mov	r1, r5
 8010366:	f7ef ffaf 	bl	80002c8 <__aeabi_dsub>
 801036a:	4632      	mov	r2, r6
 801036c:	463b      	mov	r3, r7
 801036e:	f7ef ffab 	bl	80002c8 <__aeabi_dsub>
 8010372:	4602      	mov	r2, r0
 8010374:	460b      	mov	r3, r1
 8010376:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801037a:	f7ef ffa5 	bl	80002c8 <__aeabi_dsub>
 801037e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010382:	f7f0 f959 	bl	8000638 <__aeabi_dmul>
 8010386:	4622      	mov	r2, r4
 8010388:	4606      	mov	r6, r0
 801038a:	460f      	mov	r7, r1
 801038c:	462b      	mov	r3, r5
 801038e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010392:	f7f0 f951 	bl	8000638 <__aeabi_dmul>
 8010396:	4602      	mov	r2, r0
 8010398:	460b      	mov	r3, r1
 801039a:	4630      	mov	r0, r6
 801039c:	4639      	mov	r1, r7
 801039e:	f7ef ff95 	bl	80002cc <__adddf3>
 80103a2:	4606      	mov	r6, r0
 80103a4:	460f      	mov	r7, r1
 80103a6:	4602      	mov	r2, r0
 80103a8:	460b      	mov	r3, r1
 80103aa:	4640      	mov	r0, r8
 80103ac:	4649      	mov	r1, r9
 80103ae:	f7ef ff8d 	bl	80002cc <__adddf3>
 80103b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80103b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80104a8 <__ieee754_pow+0x760>)
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	4658      	mov	r0, fp
 80103be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80103c2:	460d      	mov	r5, r1
 80103c4:	f7f0 f938 	bl	8000638 <__aeabi_dmul>
 80103c8:	465c      	mov	r4, fp
 80103ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103ce:	4642      	mov	r2, r8
 80103d0:	464b      	mov	r3, r9
 80103d2:	4620      	mov	r0, r4
 80103d4:	4629      	mov	r1, r5
 80103d6:	f7ef ff77 	bl	80002c8 <__aeabi_dsub>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	4630      	mov	r0, r6
 80103e0:	4639      	mov	r1, r7
 80103e2:	f7ef ff71 	bl	80002c8 <__aeabi_dsub>
 80103e6:	a332      	add	r3, pc, #200	@ (adr r3, 80104b0 <__ieee754_pow+0x768>)
 80103e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ec:	f7f0 f924 	bl	8000638 <__aeabi_dmul>
 80103f0:	a331      	add	r3, pc, #196	@ (adr r3, 80104b8 <__ieee754_pow+0x770>)
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	4606      	mov	r6, r0
 80103f8:	460f      	mov	r7, r1
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7f0 f91b 	bl	8000638 <__aeabi_dmul>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	4630      	mov	r0, r6
 8010408:	4639      	mov	r1, r7
 801040a:	f7ef ff5f 	bl	80002cc <__adddf3>
 801040e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010410:	4b32      	ldr	r3, [pc, #200]	@ (80104dc <__ieee754_pow+0x794>)
 8010412:	4413      	add	r3, r2
 8010414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010418:	f7ef ff58 	bl	80002cc <__adddf3>
 801041c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010420:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010422:	f7f0 f89f 	bl	8000564 <__aeabi_i2d>
 8010426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010428:	4b2d      	ldr	r3, [pc, #180]	@ (80104e0 <__ieee754_pow+0x798>)
 801042a:	4413      	add	r3, r2
 801042c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010430:	4606      	mov	r6, r0
 8010432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010436:	460f      	mov	r7, r1
 8010438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801043c:	f7ef ff46 	bl	80002cc <__adddf3>
 8010440:	4642      	mov	r2, r8
 8010442:	464b      	mov	r3, r9
 8010444:	f7ef ff42 	bl	80002cc <__adddf3>
 8010448:	4632      	mov	r2, r6
 801044a:	463b      	mov	r3, r7
 801044c:	f7ef ff3e 	bl	80002cc <__adddf3>
 8010450:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010454:	4632      	mov	r2, r6
 8010456:	463b      	mov	r3, r7
 8010458:	4658      	mov	r0, fp
 801045a:	460d      	mov	r5, r1
 801045c:	f7ef ff34 	bl	80002c8 <__aeabi_dsub>
 8010460:	4642      	mov	r2, r8
 8010462:	464b      	mov	r3, r9
 8010464:	f7ef ff30 	bl	80002c8 <__aeabi_dsub>
 8010468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801046c:	f7ef ff2c 	bl	80002c8 <__aeabi_dsub>
 8010470:	465c      	mov	r4, fp
 8010472:	4602      	mov	r2, r0
 8010474:	e036      	b.n	80104e4 <__ieee754_pow+0x79c>
 8010476:	bf00      	nop
 8010478:	4a454eef 	.word	0x4a454eef
 801047c:	3fca7e28 	.word	0x3fca7e28
 8010480:	93c9db65 	.word	0x93c9db65
 8010484:	3fcd864a 	.word	0x3fcd864a
 8010488:	a91d4101 	.word	0xa91d4101
 801048c:	3fd17460 	.word	0x3fd17460
 8010490:	518f264d 	.word	0x518f264d
 8010494:	3fd55555 	.word	0x3fd55555
 8010498:	db6fabff 	.word	0xdb6fabff
 801049c:	3fdb6db6 	.word	0x3fdb6db6
 80104a0:	33333303 	.word	0x33333303
 80104a4:	3fe33333 	.word	0x3fe33333
 80104a8:	e0000000 	.word	0xe0000000
 80104ac:	3feec709 	.word	0x3feec709
 80104b0:	dc3a03fd 	.word	0xdc3a03fd
 80104b4:	3feec709 	.word	0x3feec709
 80104b8:	145b01f5 	.word	0x145b01f5
 80104bc:	be3e2fe0 	.word	0xbe3e2fe0
 80104c0:	7ff00000 	.word	0x7ff00000
 80104c4:	43400000 	.word	0x43400000
 80104c8:	0003988e 	.word	0x0003988e
 80104cc:	000bb679 	.word	0x000bb679
 80104d0:	080121b8 	.word	0x080121b8
 80104d4:	3ff00000 	.word	0x3ff00000
 80104d8:	40080000 	.word	0x40080000
 80104dc:	08012198 	.word	0x08012198
 80104e0:	080121a8 	.word	0x080121a8
 80104e4:	460b      	mov	r3, r1
 80104e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104ea:	e5d7      	b.n	801009c <__ieee754_pow+0x354>
 80104ec:	f04f 0a01 	mov.w	sl, #1
 80104f0:	e65e      	b.n	80101b0 <__ieee754_pow+0x468>
 80104f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80107c4 <__ieee754_pow+0xa7c>)
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	4630      	mov	r0, r6
 80104fa:	4639      	mov	r1, r7
 80104fc:	f7ef fee6 	bl	80002cc <__adddf3>
 8010500:	4642      	mov	r2, r8
 8010502:	e9cd 0100 	strd	r0, r1, [sp]
 8010506:	464b      	mov	r3, r9
 8010508:	4620      	mov	r0, r4
 801050a:	4629      	mov	r1, r5
 801050c:	f7ef fedc 	bl	80002c8 <__aeabi_dsub>
 8010510:	4602      	mov	r2, r0
 8010512:	460b      	mov	r3, r1
 8010514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010518:	f7f0 fb1e 	bl	8000b58 <__aeabi_dcmpgt>
 801051c:	2800      	cmp	r0, #0
 801051e:	f47f ae00 	bne.w	8010122 <__ieee754_pow+0x3da>
 8010522:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8010526:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801052a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801052e:	fa43 fa0a 	asr.w	sl, r3, sl
 8010532:	44da      	add	sl, fp
 8010534:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010538:	489d      	ldr	r0, [pc, #628]	@ (80107b0 <__ieee754_pow+0xa68>)
 801053a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801053e:	4108      	asrs	r0, r1
 8010540:	ea00 030a 	and.w	r3, r0, sl
 8010544:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010548:	f1c1 0114 	rsb	r1, r1, #20
 801054c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010550:	fa4a fa01 	asr.w	sl, sl, r1
 8010554:	f1bb 0f00 	cmp.w	fp, #0
 8010558:	4640      	mov	r0, r8
 801055a:	4649      	mov	r1, r9
 801055c:	f04f 0200 	mov.w	r2, #0
 8010560:	bfb8      	it	lt
 8010562:	f1ca 0a00 	rsblt	sl, sl, #0
 8010566:	f7ef feaf 	bl	80002c8 <__aeabi_dsub>
 801056a:	4680      	mov	r8, r0
 801056c:	4689      	mov	r9, r1
 801056e:	4632      	mov	r2, r6
 8010570:	463b      	mov	r3, r7
 8010572:	4640      	mov	r0, r8
 8010574:	4649      	mov	r1, r9
 8010576:	f7ef fea9 	bl	80002cc <__adddf3>
 801057a:	2400      	movs	r4, #0
 801057c:	a37c      	add	r3, pc, #496	@ (adr r3, 8010770 <__ieee754_pow+0xa28>)
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	4620      	mov	r0, r4
 8010584:	460d      	mov	r5, r1
 8010586:	f7f0 f857 	bl	8000638 <__aeabi_dmul>
 801058a:	4642      	mov	r2, r8
 801058c:	e9cd 0100 	strd	r0, r1, [sp]
 8010590:	464b      	mov	r3, r9
 8010592:	4620      	mov	r0, r4
 8010594:	4629      	mov	r1, r5
 8010596:	f7ef fe97 	bl	80002c8 <__aeabi_dsub>
 801059a:	4602      	mov	r2, r0
 801059c:	460b      	mov	r3, r1
 801059e:	4630      	mov	r0, r6
 80105a0:	4639      	mov	r1, r7
 80105a2:	f7ef fe91 	bl	80002c8 <__aeabi_dsub>
 80105a6:	a374      	add	r3, pc, #464	@ (adr r3, 8010778 <__ieee754_pow+0xa30>)
 80105a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ac:	f7f0 f844 	bl	8000638 <__aeabi_dmul>
 80105b0:	a373      	add	r3, pc, #460	@ (adr r3, 8010780 <__ieee754_pow+0xa38>)
 80105b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b6:	4680      	mov	r8, r0
 80105b8:	4689      	mov	r9, r1
 80105ba:	4620      	mov	r0, r4
 80105bc:	4629      	mov	r1, r5
 80105be:	f7f0 f83b 	bl	8000638 <__aeabi_dmul>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4640      	mov	r0, r8
 80105c8:	4649      	mov	r1, r9
 80105ca:	f7ef fe7f 	bl	80002cc <__adddf3>
 80105ce:	4604      	mov	r4, r0
 80105d0:	460d      	mov	r5, r1
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105da:	f7ef fe77 	bl	80002cc <__adddf3>
 80105de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105e2:	4680      	mov	r8, r0
 80105e4:	4689      	mov	r9, r1
 80105e6:	f7ef fe6f 	bl	80002c8 <__aeabi_dsub>
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7ef fe69 	bl	80002c8 <__aeabi_dsub>
 80105f6:	4642      	mov	r2, r8
 80105f8:	4606      	mov	r6, r0
 80105fa:	460f      	mov	r7, r1
 80105fc:	464b      	mov	r3, r9
 80105fe:	4640      	mov	r0, r8
 8010600:	4649      	mov	r1, r9
 8010602:	f7f0 f819 	bl	8000638 <__aeabi_dmul>
 8010606:	a360      	add	r3, pc, #384	@ (adr r3, 8010788 <__ieee754_pow+0xa40>)
 8010608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060c:	4604      	mov	r4, r0
 801060e:	460d      	mov	r5, r1
 8010610:	f7f0 f812 	bl	8000638 <__aeabi_dmul>
 8010614:	a35e      	add	r3, pc, #376	@ (adr r3, 8010790 <__ieee754_pow+0xa48>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	f7ef fe55 	bl	80002c8 <__aeabi_dsub>
 801061e:	4622      	mov	r2, r4
 8010620:	462b      	mov	r3, r5
 8010622:	f7f0 f809 	bl	8000638 <__aeabi_dmul>
 8010626:	a35c      	add	r3, pc, #368	@ (adr r3, 8010798 <__ieee754_pow+0xa50>)
 8010628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062c:	f7ef fe4e 	bl	80002cc <__adddf3>
 8010630:	4622      	mov	r2, r4
 8010632:	462b      	mov	r3, r5
 8010634:	f7f0 f800 	bl	8000638 <__aeabi_dmul>
 8010638:	a359      	add	r3, pc, #356	@ (adr r3, 80107a0 <__ieee754_pow+0xa58>)
 801063a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063e:	f7ef fe43 	bl	80002c8 <__aeabi_dsub>
 8010642:	4622      	mov	r2, r4
 8010644:	462b      	mov	r3, r5
 8010646:	f7ef fff7 	bl	8000638 <__aeabi_dmul>
 801064a:	a357      	add	r3, pc, #348	@ (adr r3, 80107a8 <__ieee754_pow+0xa60>)
 801064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010650:	f7ef fe3c 	bl	80002cc <__adddf3>
 8010654:	4622      	mov	r2, r4
 8010656:	462b      	mov	r3, r5
 8010658:	f7ef ffee 	bl	8000638 <__aeabi_dmul>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	4640      	mov	r0, r8
 8010662:	4649      	mov	r1, r9
 8010664:	f7ef fe30 	bl	80002c8 <__aeabi_dsub>
 8010668:	4604      	mov	r4, r0
 801066a:	460d      	mov	r5, r1
 801066c:	4602      	mov	r2, r0
 801066e:	460b      	mov	r3, r1
 8010670:	4640      	mov	r0, r8
 8010672:	4649      	mov	r1, r9
 8010674:	f7ef ffe0 	bl	8000638 <__aeabi_dmul>
 8010678:	2200      	movs	r2, #0
 801067a:	e9cd 0100 	strd	r0, r1, [sp]
 801067e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010682:	4620      	mov	r0, r4
 8010684:	4629      	mov	r1, r5
 8010686:	f7ef fe1f 	bl	80002c8 <__aeabi_dsub>
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010692:	f7f0 f8fb 	bl	800088c <__aeabi_ddiv>
 8010696:	4632      	mov	r2, r6
 8010698:	4604      	mov	r4, r0
 801069a:	460d      	mov	r5, r1
 801069c:	463b      	mov	r3, r7
 801069e:	4640      	mov	r0, r8
 80106a0:	4649      	mov	r1, r9
 80106a2:	f7ef ffc9 	bl	8000638 <__aeabi_dmul>
 80106a6:	4632      	mov	r2, r6
 80106a8:	463b      	mov	r3, r7
 80106aa:	f7ef fe0f 	bl	80002cc <__adddf3>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4620      	mov	r0, r4
 80106b4:	4629      	mov	r1, r5
 80106b6:	f7ef fe07 	bl	80002c8 <__aeabi_dsub>
 80106ba:	4642      	mov	r2, r8
 80106bc:	464b      	mov	r3, r9
 80106be:	f7ef fe03 	bl	80002c8 <__aeabi_dsub>
 80106c2:	460b      	mov	r3, r1
 80106c4:	4602      	mov	r2, r0
 80106c6:	493b      	ldr	r1, [pc, #236]	@ (80107b4 <__ieee754_pow+0xa6c>)
 80106c8:	2000      	movs	r0, #0
 80106ca:	f7ef fdfd 	bl	80002c8 <__aeabi_dsub>
 80106ce:	ec41 0b10 	vmov	d0, r0, r1
 80106d2:	ee10 3a90 	vmov	r3, s1
 80106d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80106da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80106de:	da30      	bge.n	8010742 <__ieee754_pow+0x9fa>
 80106e0:	4650      	mov	r0, sl
 80106e2:	f000 fa79 	bl	8010bd8 <scalbn>
 80106e6:	ec51 0b10 	vmov	r0, r1, d0
 80106ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106ee:	f7ff bbd2 	b.w	800fe96 <__ieee754_pow+0x14e>
 80106f2:	4c31      	ldr	r4, [pc, #196]	@ (80107b8 <__ieee754_pow+0xa70>)
 80106f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80106f8:	42a3      	cmp	r3, r4
 80106fa:	d91a      	bls.n	8010732 <__ieee754_pow+0x9ea>
 80106fc:	4b2f      	ldr	r3, [pc, #188]	@ (80107bc <__ieee754_pow+0xa74>)
 80106fe:	440b      	add	r3, r1
 8010700:	4303      	orrs	r3, r0
 8010702:	d009      	beq.n	8010718 <__ieee754_pow+0x9d0>
 8010704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010708:	2200      	movs	r2, #0
 801070a:	2300      	movs	r3, #0
 801070c:	f7f0 fa06 	bl	8000b1c <__aeabi_dcmplt>
 8010710:	3800      	subs	r0, #0
 8010712:	bf18      	it	ne
 8010714:	2001      	movne	r0, #1
 8010716:	e42b      	b.n	800ff70 <__ieee754_pow+0x228>
 8010718:	4642      	mov	r2, r8
 801071a:	464b      	mov	r3, r9
 801071c:	f7ef fdd4 	bl	80002c8 <__aeabi_dsub>
 8010720:	4632      	mov	r2, r6
 8010722:	463b      	mov	r3, r7
 8010724:	f7f0 fa0e 	bl	8000b44 <__aeabi_dcmpge>
 8010728:	2800      	cmp	r0, #0
 801072a:	d1eb      	bne.n	8010704 <__ieee754_pow+0x9bc>
 801072c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80107cc <__ieee754_pow+0xa84>
 8010730:	e6f7      	b.n	8010522 <__ieee754_pow+0x7da>
 8010732:	469a      	mov	sl, r3
 8010734:	4b22      	ldr	r3, [pc, #136]	@ (80107c0 <__ieee754_pow+0xa78>)
 8010736:	459a      	cmp	sl, r3
 8010738:	f63f aef3 	bhi.w	8010522 <__ieee754_pow+0x7da>
 801073c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010740:	e715      	b.n	801056e <__ieee754_pow+0x826>
 8010742:	ec51 0b10 	vmov	r0, r1, d0
 8010746:	4619      	mov	r1, r3
 8010748:	e7cf      	b.n	80106ea <__ieee754_pow+0x9a2>
 801074a:	491a      	ldr	r1, [pc, #104]	@ (80107b4 <__ieee754_pow+0xa6c>)
 801074c:	2000      	movs	r0, #0
 801074e:	f7ff bb18 	b.w	800fd82 <__ieee754_pow+0x3a>
 8010752:	2000      	movs	r0, #0
 8010754:	2100      	movs	r1, #0
 8010756:	f7ff bb14 	b.w	800fd82 <__ieee754_pow+0x3a>
 801075a:	4630      	mov	r0, r6
 801075c:	4639      	mov	r1, r7
 801075e:	f7ff bb10 	b.w	800fd82 <__ieee754_pow+0x3a>
 8010762:	460c      	mov	r4, r1
 8010764:	f7ff bb5e 	b.w	800fe24 <__ieee754_pow+0xdc>
 8010768:	2400      	movs	r4, #0
 801076a:	f7ff bb49 	b.w	800fe00 <__ieee754_pow+0xb8>
 801076e:	bf00      	nop
 8010770:	00000000 	.word	0x00000000
 8010774:	3fe62e43 	.word	0x3fe62e43
 8010778:	fefa39ef 	.word	0xfefa39ef
 801077c:	3fe62e42 	.word	0x3fe62e42
 8010780:	0ca86c39 	.word	0x0ca86c39
 8010784:	be205c61 	.word	0xbe205c61
 8010788:	72bea4d0 	.word	0x72bea4d0
 801078c:	3e663769 	.word	0x3e663769
 8010790:	c5d26bf1 	.word	0xc5d26bf1
 8010794:	3ebbbd41 	.word	0x3ebbbd41
 8010798:	af25de2c 	.word	0xaf25de2c
 801079c:	3f11566a 	.word	0x3f11566a
 80107a0:	16bebd93 	.word	0x16bebd93
 80107a4:	3f66c16c 	.word	0x3f66c16c
 80107a8:	5555553e 	.word	0x5555553e
 80107ac:	3fc55555 	.word	0x3fc55555
 80107b0:	fff00000 	.word	0xfff00000
 80107b4:	3ff00000 	.word	0x3ff00000
 80107b8:	4090cbff 	.word	0x4090cbff
 80107bc:	3f6f3400 	.word	0x3f6f3400
 80107c0:	3fe00000 	.word	0x3fe00000
 80107c4:	652b82fe 	.word	0x652b82fe
 80107c8:	3c971547 	.word	0x3c971547
 80107cc:	4090cc00 	.word	0x4090cc00

080107d0 <__ieee754_rem_pio2>:
 80107d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d4:	ec57 6b10 	vmov	r6, r7, d0
 80107d8:	4bc5      	ldr	r3, [pc, #788]	@ (8010af0 <__ieee754_rem_pio2+0x320>)
 80107da:	b08d      	sub	sp, #52	@ 0x34
 80107dc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80107e0:	4598      	cmp	r8, r3
 80107e2:	4604      	mov	r4, r0
 80107e4:	9704      	str	r7, [sp, #16]
 80107e6:	d807      	bhi.n	80107f8 <__ieee754_rem_pio2+0x28>
 80107e8:	2200      	movs	r2, #0
 80107ea:	2300      	movs	r3, #0
 80107ec:	ed80 0b00 	vstr	d0, [r0]
 80107f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80107f4:	2500      	movs	r5, #0
 80107f6:	e028      	b.n	801084a <__ieee754_rem_pio2+0x7a>
 80107f8:	4bbe      	ldr	r3, [pc, #760]	@ (8010af4 <__ieee754_rem_pio2+0x324>)
 80107fa:	4598      	cmp	r8, r3
 80107fc:	d878      	bhi.n	80108f0 <__ieee754_rem_pio2+0x120>
 80107fe:	9b04      	ldr	r3, [sp, #16]
 8010800:	4dbd      	ldr	r5, [pc, #756]	@ (8010af8 <__ieee754_rem_pio2+0x328>)
 8010802:	2b00      	cmp	r3, #0
 8010804:	4630      	mov	r0, r6
 8010806:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010ab8 <__ieee754_rem_pio2+0x2e8>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	4639      	mov	r1, r7
 801080e:	dd38      	ble.n	8010882 <__ieee754_rem_pio2+0xb2>
 8010810:	f7ef fd5a 	bl	80002c8 <__aeabi_dsub>
 8010814:	45a8      	cmp	r8, r5
 8010816:	4606      	mov	r6, r0
 8010818:	460f      	mov	r7, r1
 801081a:	d01a      	beq.n	8010852 <__ieee754_rem_pio2+0x82>
 801081c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010ac0 <__ieee754_rem_pio2+0x2f0>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	f7ef fd51 	bl	80002c8 <__aeabi_dsub>
 8010826:	4602      	mov	r2, r0
 8010828:	460b      	mov	r3, r1
 801082a:	4680      	mov	r8, r0
 801082c:	4689      	mov	r9, r1
 801082e:	4630      	mov	r0, r6
 8010830:	4639      	mov	r1, r7
 8010832:	f7ef fd49 	bl	80002c8 <__aeabi_dsub>
 8010836:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010ac0 <__ieee754_rem_pio2+0x2f0>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	f7ef fd44 	bl	80002c8 <__aeabi_dsub>
 8010840:	e9c4 8900 	strd	r8, r9, [r4]
 8010844:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010848:	2501      	movs	r5, #1
 801084a:	4628      	mov	r0, r5
 801084c:	b00d      	add	sp, #52	@ 0x34
 801084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010852:	a39d      	add	r3, pc, #628	@ (adr r3, 8010ac8 <__ieee754_rem_pio2+0x2f8>)
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	f7ef fd36 	bl	80002c8 <__aeabi_dsub>
 801085c:	a39c      	add	r3, pc, #624	@ (adr r3, 8010ad0 <__ieee754_rem_pio2+0x300>)
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	4606      	mov	r6, r0
 8010864:	460f      	mov	r7, r1
 8010866:	f7ef fd2f 	bl	80002c8 <__aeabi_dsub>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4680      	mov	r8, r0
 8010870:	4689      	mov	r9, r1
 8010872:	4630      	mov	r0, r6
 8010874:	4639      	mov	r1, r7
 8010876:	f7ef fd27 	bl	80002c8 <__aeabi_dsub>
 801087a:	a395      	add	r3, pc, #596	@ (adr r3, 8010ad0 <__ieee754_rem_pio2+0x300>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	e7dc      	b.n	801083c <__ieee754_rem_pio2+0x6c>
 8010882:	f7ef fd23 	bl	80002cc <__adddf3>
 8010886:	45a8      	cmp	r8, r5
 8010888:	4606      	mov	r6, r0
 801088a:	460f      	mov	r7, r1
 801088c:	d018      	beq.n	80108c0 <__ieee754_rem_pio2+0xf0>
 801088e:	a38c      	add	r3, pc, #560	@ (adr r3, 8010ac0 <__ieee754_rem_pio2+0x2f0>)
 8010890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010894:	f7ef fd1a 	bl	80002cc <__adddf3>
 8010898:	4602      	mov	r2, r0
 801089a:	460b      	mov	r3, r1
 801089c:	4680      	mov	r8, r0
 801089e:	4689      	mov	r9, r1
 80108a0:	4630      	mov	r0, r6
 80108a2:	4639      	mov	r1, r7
 80108a4:	f7ef fd10 	bl	80002c8 <__aeabi_dsub>
 80108a8:	a385      	add	r3, pc, #532	@ (adr r3, 8010ac0 <__ieee754_rem_pio2+0x2f0>)
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	f7ef fd0d 	bl	80002cc <__adddf3>
 80108b2:	f04f 35ff 	mov.w	r5, #4294967295
 80108b6:	e9c4 8900 	strd	r8, r9, [r4]
 80108ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80108be:	e7c4      	b.n	801084a <__ieee754_rem_pio2+0x7a>
 80108c0:	a381      	add	r3, pc, #516	@ (adr r3, 8010ac8 <__ieee754_rem_pio2+0x2f8>)
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	f7ef fd01 	bl	80002cc <__adddf3>
 80108ca:	a381      	add	r3, pc, #516	@ (adr r3, 8010ad0 <__ieee754_rem_pio2+0x300>)
 80108cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d0:	4606      	mov	r6, r0
 80108d2:	460f      	mov	r7, r1
 80108d4:	f7ef fcfa 	bl	80002cc <__adddf3>
 80108d8:	4602      	mov	r2, r0
 80108da:	460b      	mov	r3, r1
 80108dc:	4680      	mov	r8, r0
 80108de:	4689      	mov	r9, r1
 80108e0:	4630      	mov	r0, r6
 80108e2:	4639      	mov	r1, r7
 80108e4:	f7ef fcf0 	bl	80002c8 <__aeabi_dsub>
 80108e8:	a379      	add	r3, pc, #484	@ (adr r3, 8010ad0 <__ieee754_rem_pio2+0x300>)
 80108ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ee:	e7de      	b.n	80108ae <__ieee754_rem_pio2+0xde>
 80108f0:	4b82      	ldr	r3, [pc, #520]	@ (8010afc <__ieee754_rem_pio2+0x32c>)
 80108f2:	4598      	cmp	r8, r3
 80108f4:	f200 80d1 	bhi.w	8010a9a <__ieee754_rem_pio2+0x2ca>
 80108f8:	f000 f966 	bl	8010bc8 <fabs>
 80108fc:	ec57 6b10 	vmov	r6, r7, d0
 8010900:	a375      	add	r3, pc, #468	@ (adr r3, 8010ad8 <__ieee754_rem_pio2+0x308>)
 8010902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010906:	4630      	mov	r0, r6
 8010908:	4639      	mov	r1, r7
 801090a:	f7ef fe95 	bl	8000638 <__aeabi_dmul>
 801090e:	4b7c      	ldr	r3, [pc, #496]	@ (8010b00 <__ieee754_rem_pio2+0x330>)
 8010910:	2200      	movs	r2, #0
 8010912:	f7ef fcdb 	bl	80002cc <__adddf3>
 8010916:	f7f0 f93f 	bl	8000b98 <__aeabi_d2iz>
 801091a:	4605      	mov	r5, r0
 801091c:	f7ef fe22 	bl	8000564 <__aeabi_i2d>
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010928:	a363      	add	r3, pc, #396	@ (adr r3, 8010ab8 <__ieee754_rem_pio2+0x2e8>)
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	f7ef fe83 	bl	8000638 <__aeabi_dmul>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	4630      	mov	r0, r6
 8010938:	4639      	mov	r1, r7
 801093a:	f7ef fcc5 	bl	80002c8 <__aeabi_dsub>
 801093e:	a360      	add	r3, pc, #384	@ (adr r3, 8010ac0 <__ieee754_rem_pio2+0x2f0>)
 8010940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010944:	4682      	mov	sl, r0
 8010946:	468b      	mov	fp, r1
 8010948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801094c:	f7ef fe74 	bl	8000638 <__aeabi_dmul>
 8010950:	2d1f      	cmp	r5, #31
 8010952:	4606      	mov	r6, r0
 8010954:	460f      	mov	r7, r1
 8010956:	dc0c      	bgt.n	8010972 <__ieee754_rem_pio2+0x1a2>
 8010958:	4b6a      	ldr	r3, [pc, #424]	@ (8010b04 <__ieee754_rem_pio2+0x334>)
 801095a:	1e6a      	subs	r2, r5, #1
 801095c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010960:	4543      	cmp	r3, r8
 8010962:	d006      	beq.n	8010972 <__ieee754_rem_pio2+0x1a2>
 8010964:	4632      	mov	r2, r6
 8010966:	463b      	mov	r3, r7
 8010968:	4650      	mov	r0, sl
 801096a:	4659      	mov	r1, fp
 801096c:	f7ef fcac 	bl	80002c8 <__aeabi_dsub>
 8010970:	e00e      	b.n	8010990 <__ieee754_rem_pio2+0x1c0>
 8010972:	463b      	mov	r3, r7
 8010974:	4632      	mov	r2, r6
 8010976:	4650      	mov	r0, sl
 8010978:	4659      	mov	r1, fp
 801097a:	f7ef fca5 	bl	80002c8 <__aeabi_dsub>
 801097e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010982:	9305      	str	r3, [sp, #20]
 8010984:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010988:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801098c:	2b10      	cmp	r3, #16
 801098e:	dc02      	bgt.n	8010996 <__ieee754_rem_pio2+0x1c6>
 8010990:	e9c4 0100 	strd	r0, r1, [r4]
 8010994:	e039      	b.n	8010a0a <__ieee754_rem_pio2+0x23a>
 8010996:	a34c      	add	r3, pc, #304	@ (adr r3, 8010ac8 <__ieee754_rem_pio2+0x2f8>)
 8010998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109a0:	f7ef fe4a 	bl	8000638 <__aeabi_dmul>
 80109a4:	4606      	mov	r6, r0
 80109a6:	460f      	mov	r7, r1
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	4650      	mov	r0, sl
 80109ae:	4659      	mov	r1, fp
 80109b0:	f7ef fc8a 	bl	80002c8 <__aeabi_dsub>
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	4680      	mov	r8, r0
 80109ba:	4689      	mov	r9, r1
 80109bc:	4650      	mov	r0, sl
 80109be:	4659      	mov	r1, fp
 80109c0:	f7ef fc82 	bl	80002c8 <__aeabi_dsub>
 80109c4:	4632      	mov	r2, r6
 80109c6:	463b      	mov	r3, r7
 80109c8:	f7ef fc7e 	bl	80002c8 <__aeabi_dsub>
 80109cc:	a340      	add	r3, pc, #256	@ (adr r3, 8010ad0 <__ieee754_rem_pio2+0x300>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	4606      	mov	r6, r0
 80109d4:	460f      	mov	r7, r1
 80109d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109da:	f7ef fe2d 	bl	8000638 <__aeabi_dmul>
 80109de:	4632      	mov	r2, r6
 80109e0:	463b      	mov	r3, r7
 80109e2:	f7ef fc71 	bl	80002c8 <__aeabi_dsub>
 80109e6:	4602      	mov	r2, r0
 80109e8:	460b      	mov	r3, r1
 80109ea:	4606      	mov	r6, r0
 80109ec:	460f      	mov	r7, r1
 80109ee:	4640      	mov	r0, r8
 80109f0:	4649      	mov	r1, r9
 80109f2:	f7ef fc69 	bl	80002c8 <__aeabi_dsub>
 80109f6:	9a05      	ldr	r2, [sp, #20]
 80109f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	2b31      	cmp	r3, #49	@ 0x31
 8010a00:	dc20      	bgt.n	8010a44 <__ieee754_rem_pio2+0x274>
 8010a02:	e9c4 0100 	strd	r0, r1, [r4]
 8010a06:	46c2      	mov	sl, r8
 8010a08:	46cb      	mov	fp, r9
 8010a0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010a0e:	4650      	mov	r0, sl
 8010a10:	4642      	mov	r2, r8
 8010a12:	464b      	mov	r3, r9
 8010a14:	4659      	mov	r1, fp
 8010a16:	f7ef fc57 	bl	80002c8 <__aeabi_dsub>
 8010a1a:	463b      	mov	r3, r7
 8010a1c:	4632      	mov	r2, r6
 8010a1e:	f7ef fc53 	bl	80002c8 <__aeabi_dsub>
 8010a22:	9b04      	ldr	r3, [sp, #16]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a2a:	f6bf af0e 	bge.w	801084a <__ieee754_rem_pio2+0x7a>
 8010a2e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010a32:	6063      	str	r3, [r4, #4]
 8010a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010a38:	f8c4 8000 	str.w	r8, [r4]
 8010a3c:	60a0      	str	r0, [r4, #8]
 8010a3e:	60e3      	str	r3, [r4, #12]
 8010a40:	426d      	negs	r5, r5
 8010a42:	e702      	b.n	801084a <__ieee754_rem_pio2+0x7a>
 8010a44:	a326      	add	r3, pc, #152	@ (adr r3, 8010ae0 <__ieee754_rem_pio2+0x310>)
 8010a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a4e:	f7ef fdf3 	bl	8000638 <__aeabi_dmul>
 8010a52:	4606      	mov	r6, r0
 8010a54:	460f      	mov	r7, r1
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	4649      	mov	r1, r9
 8010a5e:	f7ef fc33 	bl	80002c8 <__aeabi_dsub>
 8010a62:	4602      	mov	r2, r0
 8010a64:	460b      	mov	r3, r1
 8010a66:	4682      	mov	sl, r0
 8010a68:	468b      	mov	fp, r1
 8010a6a:	4640      	mov	r0, r8
 8010a6c:	4649      	mov	r1, r9
 8010a6e:	f7ef fc2b 	bl	80002c8 <__aeabi_dsub>
 8010a72:	4632      	mov	r2, r6
 8010a74:	463b      	mov	r3, r7
 8010a76:	f7ef fc27 	bl	80002c8 <__aeabi_dsub>
 8010a7a:	a31b      	add	r3, pc, #108	@ (adr r3, 8010ae8 <__ieee754_rem_pio2+0x318>)
 8010a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a80:	4606      	mov	r6, r0
 8010a82:	460f      	mov	r7, r1
 8010a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a88:	f7ef fdd6 	bl	8000638 <__aeabi_dmul>
 8010a8c:	4632      	mov	r2, r6
 8010a8e:	463b      	mov	r3, r7
 8010a90:	f7ef fc1a 	bl	80002c8 <__aeabi_dsub>
 8010a94:	4606      	mov	r6, r0
 8010a96:	460f      	mov	r7, r1
 8010a98:	e764      	b.n	8010964 <__ieee754_rem_pio2+0x194>
 8010a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8010b08 <__ieee754_rem_pio2+0x338>)
 8010a9c:	4598      	cmp	r8, r3
 8010a9e:	d935      	bls.n	8010b0c <__ieee754_rem_pio2+0x33c>
 8010aa0:	4632      	mov	r2, r6
 8010aa2:	463b      	mov	r3, r7
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	4639      	mov	r1, r7
 8010aa8:	f7ef fc0e 	bl	80002c8 <__aeabi_dsub>
 8010aac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ab0:	e9c4 0100 	strd	r0, r1, [r4]
 8010ab4:	e69e      	b.n	80107f4 <__ieee754_rem_pio2+0x24>
 8010ab6:	bf00      	nop
 8010ab8:	54400000 	.word	0x54400000
 8010abc:	3ff921fb 	.word	0x3ff921fb
 8010ac0:	1a626331 	.word	0x1a626331
 8010ac4:	3dd0b461 	.word	0x3dd0b461
 8010ac8:	1a600000 	.word	0x1a600000
 8010acc:	3dd0b461 	.word	0x3dd0b461
 8010ad0:	2e037073 	.word	0x2e037073
 8010ad4:	3ba3198a 	.word	0x3ba3198a
 8010ad8:	6dc9c883 	.word	0x6dc9c883
 8010adc:	3fe45f30 	.word	0x3fe45f30
 8010ae0:	2e000000 	.word	0x2e000000
 8010ae4:	3ba3198a 	.word	0x3ba3198a
 8010ae8:	252049c1 	.word	0x252049c1
 8010aec:	397b839a 	.word	0x397b839a
 8010af0:	3fe921fb 	.word	0x3fe921fb
 8010af4:	4002d97b 	.word	0x4002d97b
 8010af8:	3ff921fb 	.word	0x3ff921fb
 8010afc:	413921fb 	.word	0x413921fb
 8010b00:	3fe00000 	.word	0x3fe00000
 8010b04:	080121c8 	.word	0x080121c8
 8010b08:	7fefffff 	.word	0x7fefffff
 8010b0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010b10:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010b14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010b18:	4630      	mov	r0, r6
 8010b1a:	460f      	mov	r7, r1
 8010b1c:	f7f0 f83c 	bl	8000b98 <__aeabi_d2iz>
 8010b20:	f7ef fd20 	bl	8000564 <__aeabi_i2d>
 8010b24:	4602      	mov	r2, r0
 8010b26:	460b      	mov	r3, r1
 8010b28:	4630      	mov	r0, r6
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010b30:	f7ef fbca 	bl	80002c8 <__aeabi_dsub>
 8010b34:	4b22      	ldr	r3, [pc, #136]	@ (8010bc0 <__ieee754_rem_pio2+0x3f0>)
 8010b36:	2200      	movs	r2, #0
 8010b38:	f7ef fd7e 	bl	8000638 <__aeabi_dmul>
 8010b3c:	460f      	mov	r7, r1
 8010b3e:	4606      	mov	r6, r0
 8010b40:	f7f0 f82a 	bl	8000b98 <__aeabi_d2iz>
 8010b44:	f7ef fd0e 	bl	8000564 <__aeabi_i2d>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	4639      	mov	r1, r7
 8010b50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010b54:	f7ef fbb8 	bl	80002c8 <__aeabi_dsub>
 8010b58:	4b19      	ldr	r3, [pc, #100]	@ (8010bc0 <__ieee754_rem_pio2+0x3f0>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f7ef fd6c 	bl	8000638 <__aeabi_dmul>
 8010b60:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010b64:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010b68:	f04f 0803 	mov.w	r8, #3
 8010b6c:	2600      	movs	r6, #0
 8010b6e:	2700      	movs	r7, #0
 8010b70:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010b74:	4632      	mov	r2, r6
 8010b76:	463b      	mov	r3, r7
 8010b78:	46c2      	mov	sl, r8
 8010b7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b7e:	f7ef ffc3 	bl	8000b08 <__aeabi_dcmpeq>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d1f4      	bne.n	8010b70 <__ieee754_rem_pio2+0x3a0>
 8010b86:	4b0f      	ldr	r3, [pc, #60]	@ (8010bc4 <__ieee754_rem_pio2+0x3f4>)
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	2302      	movs	r3, #2
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	462a      	mov	r2, r5
 8010b90:	4653      	mov	r3, sl
 8010b92:	4621      	mov	r1, r4
 8010b94:	a806      	add	r0, sp, #24
 8010b96:	f000 f8db 	bl	8010d50 <__kernel_rem_pio2>
 8010b9a:	9b04      	ldr	r3, [sp, #16]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	f6bf ae53 	bge.w	801084a <__ieee754_rem_pio2+0x7a>
 8010ba4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010ba8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010bac:	e9c4 2300 	strd	r2, r3, [r4]
 8010bb0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010bb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010bb8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010bbc:	e740      	b.n	8010a40 <__ieee754_rem_pio2+0x270>
 8010bbe:	bf00      	nop
 8010bc0:	41700000 	.word	0x41700000
 8010bc4:	08012248 	.word	0x08012248

08010bc8 <fabs>:
 8010bc8:	ec51 0b10 	vmov	r0, r1, d0
 8010bcc:	4602      	mov	r2, r0
 8010bce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010bd2:	ec43 2b10 	vmov	d0, r2, r3
 8010bd6:	4770      	bx	lr

08010bd8 <scalbn>:
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	ec55 4b10 	vmov	r4, r5, d0
 8010bde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010be2:	4606      	mov	r6, r0
 8010be4:	462b      	mov	r3, r5
 8010be6:	b991      	cbnz	r1, 8010c0e <scalbn+0x36>
 8010be8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010bec:	4323      	orrs	r3, r4
 8010bee:	d03d      	beq.n	8010c6c <scalbn+0x94>
 8010bf0:	4b35      	ldr	r3, [pc, #212]	@ (8010cc8 <scalbn+0xf0>)
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f7ef fd1e 	bl	8000638 <__aeabi_dmul>
 8010bfc:	4b33      	ldr	r3, [pc, #204]	@ (8010ccc <scalbn+0xf4>)
 8010bfe:	429e      	cmp	r6, r3
 8010c00:	4604      	mov	r4, r0
 8010c02:	460d      	mov	r5, r1
 8010c04:	da0f      	bge.n	8010c26 <scalbn+0x4e>
 8010c06:	a328      	add	r3, pc, #160	@ (adr r3, 8010ca8 <scalbn+0xd0>)
 8010c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0c:	e01e      	b.n	8010c4c <scalbn+0x74>
 8010c0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010c12:	4291      	cmp	r1, r2
 8010c14:	d10b      	bne.n	8010c2e <scalbn+0x56>
 8010c16:	4622      	mov	r2, r4
 8010c18:	4620      	mov	r0, r4
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	f7ef fb56 	bl	80002cc <__adddf3>
 8010c20:	4604      	mov	r4, r0
 8010c22:	460d      	mov	r5, r1
 8010c24:	e022      	b.n	8010c6c <scalbn+0x94>
 8010c26:	460b      	mov	r3, r1
 8010c28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010c2c:	3936      	subs	r1, #54	@ 0x36
 8010c2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010c32:	4296      	cmp	r6, r2
 8010c34:	dd0d      	ble.n	8010c52 <scalbn+0x7a>
 8010c36:	2d00      	cmp	r5, #0
 8010c38:	a11d      	add	r1, pc, #116	@ (adr r1, 8010cb0 <scalbn+0xd8>)
 8010c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c3e:	da02      	bge.n	8010c46 <scalbn+0x6e>
 8010c40:	a11d      	add	r1, pc, #116	@ (adr r1, 8010cb8 <scalbn+0xe0>)
 8010c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c46:	a31a      	add	r3, pc, #104	@ (adr r3, 8010cb0 <scalbn+0xd8>)
 8010c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4c:	f7ef fcf4 	bl	8000638 <__aeabi_dmul>
 8010c50:	e7e6      	b.n	8010c20 <scalbn+0x48>
 8010c52:	1872      	adds	r2, r6, r1
 8010c54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c58:	428a      	cmp	r2, r1
 8010c5a:	dcec      	bgt.n	8010c36 <scalbn+0x5e>
 8010c5c:	2a00      	cmp	r2, #0
 8010c5e:	dd08      	ble.n	8010c72 <scalbn+0x9a>
 8010c60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c6c:	ec45 4b10 	vmov	d0, r4, r5
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
 8010c72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c76:	da08      	bge.n	8010c8a <scalbn+0xb2>
 8010c78:	2d00      	cmp	r5, #0
 8010c7a:	a10b      	add	r1, pc, #44	@ (adr r1, 8010ca8 <scalbn+0xd0>)
 8010c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c80:	dac1      	bge.n	8010c06 <scalbn+0x2e>
 8010c82:	a10f      	add	r1, pc, #60	@ (adr r1, 8010cc0 <scalbn+0xe8>)
 8010c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c88:	e7bd      	b.n	8010c06 <scalbn+0x2e>
 8010c8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c8e:	3236      	adds	r2, #54	@ 0x36
 8010c90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c98:	4620      	mov	r0, r4
 8010c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd0 <scalbn+0xf8>)
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	e7d4      	b.n	8010c4c <scalbn+0x74>
 8010ca2:	bf00      	nop
 8010ca4:	f3af 8000 	nop.w
 8010ca8:	c2f8f359 	.word	0xc2f8f359
 8010cac:	01a56e1f 	.word	0x01a56e1f
 8010cb0:	8800759c 	.word	0x8800759c
 8010cb4:	7e37e43c 	.word	0x7e37e43c
 8010cb8:	8800759c 	.word	0x8800759c
 8010cbc:	fe37e43c 	.word	0xfe37e43c
 8010cc0:	c2f8f359 	.word	0xc2f8f359
 8010cc4:	81a56e1f 	.word	0x81a56e1f
 8010cc8:	43500000 	.word	0x43500000
 8010ccc:	ffff3cb0 	.word	0xffff3cb0
 8010cd0:	3c900000 	.word	0x3c900000

08010cd4 <with_errno>:
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	ed2d 8b02 	vpush	{d8}
 8010cda:	eeb0 8a40 	vmov.f32	s16, s0
 8010cde:	eef0 8a60 	vmov.f32	s17, s1
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	f000 fd5e 	bl	80117a4 <__errno>
 8010ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8010cec:	eef0 0a68 	vmov.f32	s1, s17
 8010cf0:	ecbd 8b02 	vpop	{d8}
 8010cf4:	6004      	str	r4, [r0, #0]
 8010cf6:	bd10      	pop	{r4, pc}

08010cf8 <xflow>:
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	b507      	push	{r0, r1, r2, lr}
 8010cfc:	ec51 0b10 	vmov	r0, r1, d0
 8010d00:	b183      	cbz	r3, 8010d24 <xflow+0x2c>
 8010d02:	4602      	mov	r2, r0
 8010d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d08:	e9cd 2300 	strd	r2, r3, [sp]
 8010d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d10:	f7ef fc92 	bl	8000638 <__aeabi_dmul>
 8010d14:	ec41 0b10 	vmov	d0, r0, r1
 8010d18:	2022      	movs	r0, #34	@ 0x22
 8010d1a:	b003      	add	sp, #12
 8010d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d20:	f7ff bfd8 	b.w	8010cd4 <with_errno>
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	e7ee      	b.n	8010d08 <xflow+0x10>
 8010d2a:	0000      	movs	r0, r0
 8010d2c:	0000      	movs	r0, r0
	...

08010d30 <__math_uflow>:
 8010d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d38 <__math_uflow+0x8>
 8010d34:	f7ff bfe0 	b.w	8010cf8 <xflow>
 8010d38:	00000000 	.word	0x00000000
 8010d3c:	10000000 	.word	0x10000000

08010d40 <__math_oflow>:
 8010d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d48 <__math_oflow+0x8>
 8010d44:	f7ff bfd8 	b.w	8010cf8 <xflow>
 8010d48:	00000000 	.word	0x00000000
 8010d4c:	70000000 	.word	0x70000000

08010d50 <__kernel_rem_pio2>:
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	ed2d 8b02 	vpush	{d8}
 8010d58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010d5c:	f112 0f14 	cmn.w	r2, #20
 8010d60:	9306      	str	r3, [sp, #24]
 8010d62:	9104      	str	r1, [sp, #16]
 8010d64:	4bbe      	ldr	r3, [pc, #760]	@ (8011060 <__kernel_rem_pio2+0x310>)
 8010d66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010d68:	9008      	str	r0, [sp, #32]
 8010d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	9b06      	ldr	r3, [sp, #24]
 8010d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d76:	bfa8      	it	ge
 8010d78:	1ed4      	subge	r4, r2, #3
 8010d7a:	9305      	str	r3, [sp, #20]
 8010d7c:	bfb2      	itee	lt
 8010d7e:	2400      	movlt	r4, #0
 8010d80:	2318      	movge	r3, #24
 8010d82:	fb94 f4f3 	sdivge	r4, r4, r3
 8010d86:	f06f 0317 	mvn.w	r3, #23
 8010d8a:	fb04 3303 	mla	r3, r4, r3, r3
 8010d8e:	eb03 0b02 	add.w	fp, r3, r2
 8010d92:	9b00      	ldr	r3, [sp, #0]
 8010d94:	9a05      	ldr	r2, [sp, #20]
 8010d96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011050 <__kernel_rem_pio2+0x300>
 8010d9a:	eb03 0802 	add.w	r8, r3, r2
 8010d9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010da0:	1aa7      	subs	r7, r4, r2
 8010da2:	ae20      	add	r6, sp, #128	@ 0x80
 8010da4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010da8:	2500      	movs	r5, #0
 8010daa:	4545      	cmp	r5, r8
 8010dac:	dd13      	ble.n	8010dd6 <__kernel_rem_pio2+0x86>
 8010dae:	9b06      	ldr	r3, [sp, #24]
 8010db0:	aa20      	add	r2, sp, #128	@ 0x80
 8010db2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010db6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010dba:	f04f 0800 	mov.w	r8, #0
 8010dbe:	9b00      	ldr	r3, [sp, #0]
 8010dc0:	4598      	cmp	r8, r3
 8010dc2:	dc31      	bgt.n	8010e28 <__kernel_rem_pio2+0xd8>
 8010dc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011050 <__kernel_rem_pio2+0x300>
 8010dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010dcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010dd0:	462f      	mov	r7, r5
 8010dd2:	2600      	movs	r6, #0
 8010dd4:	e01b      	b.n	8010e0e <__kernel_rem_pio2+0xbe>
 8010dd6:	42ef      	cmn	r7, r5
 8010dd8:	d407      	bmi.n	8010dea <__kernel_rem_pio2+0x9a>
 8010dda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010dde:	f7ef fbc1 	bl	8000564 <__aeabi_i2d>
 8010de2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010de6:	3501      	adds	r5, #1
 8010de8:	e7df      	b.n	8010daa <__kernel_rem_pio2+0x5a>
 8010dea:	ec51 0b18 	vmov	r0, r1, d8
 8010dee:	e7f8      	b.n	8010de2 <__kernel_rem_pio2+0x92>
 8010df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010df4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010df8:	f7ef fc1e 	bl	8000638 <__aeabi_dmul>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e04:	f7ef fa62 	bl	80002cc <__adddf3>
 8010e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e0c:	3601      	adds	r6, #1
 8010e0e:	9b05      	ldr	r3, [sp, #20]
 8010e10:	429e      	cmp	r6, r3
 8010e12:	f1a7 0708 	sub.w	r7, r7, #8
 8010e16:	ddeb      	ble.n	8010df0 <__kernel_rem_pio2+0xa0>
 8010e18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e1c:	f108 0801 	add.w	r8, r8, #1
 8010e20:	ecaa 7b02 	vstmia	sl!, {d7}
 8010e24:	3508      	adds	r5, #8
 8010e26:	e7ca      	b.n	8010dbe <__kernel_rem_pio2+0x6e>
 8010e28:	9b00      	ldr	r3, [sp, #0]
 8010e2a:	f8dd 8000 	ldr.w	r8, [sp]
 8010e2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e34:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010e38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010e42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e44:	ab98      	add	r3, sp, #608	@ 0x260
 8010e46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010e4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010e4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e52:	ac0c      	add	r4, sp, #48	@ 0x30
 8010e54:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010e56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010e5a:	46a1      	mov	r9, r4
 8010e5c:	46c2      	mov	sl, r8
 8010e5e:	f1ba 0f00 	cmp.w	sl, #0
 8010e62:	f1a5 0508 	sub.w	r5, r5, #8
 8010e66:	dc77      	bgt.n	8010f58 <__kernel_rem_pio2+0x208>
 8010e68:	4658      	mov	r0, fp
 8010e6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010e6e:	f7ff feb3 	bl	8010bd8 <scalbn>
 8010e72:	ec57 6b10 	vmov	r6, r7, d0
 8010e76:	2200      	movs	r2, #0
 8010e78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	4639      	mov	r1, r7
 8010e80:	f7ef fbda 	bl	8000638 <__aeabi_dmul>
 8010e84:	ec41 0b10 	vmov	d0, r0, r1
 8010e88:	f000 faba 	bl	8011400 <floor>
 8010e8c:	4b75      	ldr	r3, [pc, #468]	@ (8011064 <__kernel_rem_pio2+0x314>)
 8010e8e:	ec51 0b10 	vmov	r0, r1, d0
 8010e92:	2200      	movs	r2, #0
 8010e94:	f7ef fbd0 	bl	8000638 <__aeabi_dmul>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	4639      	mov	r1, r7
 8010ea0:	f7ef fa12 	bl	80002c8 <__aeabi_dsub>
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	4606      	mov	r6, r0
 8010ea8:	f7ef fe76 	bl	8000b98 <__aeabi_d2iz>
 8010eac:	9002      	str	r0, [sp, #8]
 8010eae:	f7ef fb59 	bl	8000564 <__aeabi_i2d>
 8010eb2:	4602      	mov	r2, r0
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	4639      	mov	r1, r7
 8010eba:	f7ef fa05 	bl	80002c8 <__aeabi_dsub>
 8010ebe:	f1bb 0f00 	cmp.w	fp, #0
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	460f      	mov	r7, r1
 8010ec6:	dd6c      	ble.n	8010fa2 <__kernel_rem_pio2+0x252>
 8010ec8:	f108 31ff 	add.w	r1, r8, #4294967295
 8010ecc:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ece:	9d02      	ldr	r5, [sp, #8]
 8010ed0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ed4:	f1cb 0018 	rsb	r0, fp, #24
 8010ed8:	fa43 f200 	asr.w	r2, r3, r0
 8010edc:	4415      	add	r5, r2
 8010ede:	4082      	lsls	r2, r0
 8010ee0:	1a9b      	subs	r3, r3, r2
 8010ee2:	aa0c      	add	r2, sp, #48	@ 0x30
 8010ee4:	9502      	str	r5, [sp, #8]
 8010ee6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010eea:	f1cb 0217 	rsb	r2, fp, #23
 8010eee:	fa43 f902 	asr.w	r9, r3, r2
 8010ef2:	f1b9 0f00 	cmp.w	r9, #0
 8010ef6:	dd64      	ble.n	8010fc2 <__kernel_rem_pio2+0x272>
 8010ef8:	9b02      	ldr	r3, [sp, #8]
 8010efa:	2200      	movs	r2, #0
 8010efc:	3301      	adds	r3, #1
 8010efe:	9302      	str	r3, [sp, #8]
 8010f00:	4615      	mov	r5, r2
 8010f02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010f06:	4590      	cmp	r8, r2
 8010f08:	f300 80b8 	bgt.w	801107c <__kernel_rem_pio2+0x32c>
 8010f0c:	f1bb 0f00 	cmp.w	fp, #0
 8010f10:	dd07      	ble.n	8010f22 <__kernel_rem_pio2+0x1d2>
 8010f12:	f1bb 0f01 	cmp.w	fp, #1
 8010f16:	f000 80bf 	beq.w	8011098 <__kernel_rem_pio2+0x348>
 8010f1a:	f1bb 0f02 	cmp.w	fp, #2
 8010f1e:	f000 80c6 	beq.w	80110ae <__kernel_rem_pio2+0x35e>
 8010f22:	f1b9 0f02 	cmp.w	r9, #2
 8010f26:	d14c      	bne.n	8010fc2 <__kernel_rem_pio2+0x272>
 8010f28:	4632      	mov	r2, r6
 8010f2a:	463b      	mov	r3, r7
 8010f2c:	494e      	ldr	r1, [pc, #312]	@ (8011068 <__kernel_rem_pio2+0x318>)
 8010f2e:	2000      	movs	r0, #0
 8010f30:	f7ef f9ca 	bl	80002c8 <__aeabi_dsub>
 8010f34:	4606      	mov	r6, r0
 8010f36:	460f      	mov	r7, r1
 8010f38:	2d00      	cmp	r5, #0
 8010f3a:	d042      	beq.n	8010fc2 <__kernel_rem_pio2+0x272>
 8010f3c:	4658      	mov	r0, fp
 8010f3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011058 <__kernel_rem_pio2+0x308>
 8010f42:	f7ff fe49 	bl	8010bd8 <scalbn>
 8010f46:	4630      	mov	r0, r6
 8010f48:	4639      	mov	r1, r7
 8010f4a:	ec53 2b10 	vmov	r2, r3, d0
 8010f4e:	f7ef f9bb 	bl	80002c8 <__aeabi_dsub>
 8010f52:	4606      	mov	r6, r0
 8010f54:	460f      	mov	r7, r1
 8010f56:	e034      	b.n	8010fc2 <__kernel_rem_pio2+0x272>
 8010f58:	4b44      	ldr	r3, [pc, #272]	@ (801106c <__kernel_rem_pio2+0x31c>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f60:	f7ef fb6a 	bl	8000638 <__aeabi_dmul>
 8010f64:	f7ef fe18 	bl	8000b98 <__aeabi_d2iz>
 8010f68:	f7ef fafc 	bl	8000564 <__aeabi_i2d>
 8010f6c:	4b40      	ldr	r3, [pc, #256]	@ (8011070 <__kernel_rem_pio2+0x320>)
 8010f6e:	2200      	movs	r2, #0
 8010f70:	4606      	mov	r6, r0
 8010f72:	460f      	mov	r7, r1
 8010f74:	f7ef fb60 	bl	8000638 <__aeabi_dmul>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f80:	f7ef f9a2 	bl	80002c8 <__aeabi_dsub>
 8010f84:	f7ef fe08 	bl	8000b98 <__aeabi_d2iz>
 8010f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f8c:	f849 0b04 	str.w	r0, [r9], #4
 8010f90:	4639      	mov	r1, r7
 8010f92:	4630      	mov	r0, r6
 8010f94:	f7ef f99a 	bl	80002cc <__adddf3>
 8010f98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fa0:	e75d      	b.n	8010e5e <__kernel_rem_pio2+0x10e>
 8010fa2:	d107      	bne.n	8010fb4 <__kernel_rem_pio2+0x264>
 8010fa4:	f108 33ff 	add.w	r3, r8, #4294967295
 8010fa8:	aa0c      	add	r2, sp, #48	@ 0x30
 8010faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010fb2:	e79e      	b.n	8010ef2 <__kernel_rem_pio2+0x1a2>
 8010fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8011074 <__kernel_rem_pio2+0x324>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f7ef fdc4 	bl	8000b44 <__aeabi_dcmpge>
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	d143      	bne.n	8011048 <__kernel_rem_pio2+0x2f8>
 8010fc0:	4681      	mov	r9, r0
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	4639      	mov	r1, r7
 8010fca:	f7ef fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	f000 80bf 	beq.w	8011152 <__kernel_rem_pio2+0x402>
 8010fd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8010fd8:	2200      	movs	r2, #0
 8010fda:	9900      	ldr	r1, [sp, #0]
 8010fdc:	428b      	cmp	r3, r1
 8010fde:	da6e      	bge.n	80110be <__kernel_rem_pio2+0x36e>
 8010fe0:	2a00      	cmp	r2, #0
 8010fe2:	f000 8089 	beq.w	80110f8 <__kernel_rem_pio2+0x3a8>
 8010fe6:	f108 38ff 	add.w	r8, r8, #4294967295
 8010fea:	ab0c      	add	r3, sp, #48	@ 0x30
 8010fec:	f1ab 0b18 	sub.w	fp, fp, #24
 8010ff0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d0f6      	beq.n	8010fe6 <__kernel_rem_pio2+0x296>
 8010ff8:	4658      	mov	r0, fp
 8010ffa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011058 <__kernel_rem_pio2+0x308>
 8010ffe:	f7ff fdeb 	bl	8010bd8 <scalbn>
 8011002:	f108 0301 	add.w	r3, r8, #1
 8011006:	00da      	lsls	r2, r3, #3
 8011008:	9205      	str	r2, [sp, #20]
 801100a:	ec55 4b10 	vmov	r4, r5, d0
 801100e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011010:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801106c <__kernel_rem_pio2+0x31c>
 8011014:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011018:	4646      	mov	r6, r8
 801101a:	f04f 0a00 	mov.w	sl, #0
 801101e:	2e00      	cmp	r6, #0
 8011020:	f280 80cf 	bge.w	80111c2 <__kernel_rem_pio2+0x472>
 8011024:	4644      	mov	r4, r8
 8011026:	2c00      	cmp	r4, #0
 8011028:	f2c0 80fd 	blt.w	8011226 <__kernel_rem_pio2+0x4d6>
 801102c:	4b12      	ldr	r3, [pc, #72]	@ (8011078 <__kernel_rem_pio2+0x328>)
 801102e:	461f      	mov	r7, r3
 8011030:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011036:	9306      	str	r3, [sp, #24]
 8011038:	f04f 0a00 	mov.w	sl, #0
 801103c:	f04f 0b00 	mov.w	fp, #0
 8011040:	2600      	movs	r6, #0
 8011042:	eba8 0504 	sub.w	r5, r8, r4
 8011046:	e0e2      	b.n	801120e <__kernel_rem_pio2+0x4be>
 8011048:	f04f 0902 	mov.w	r9, #2
 801104c:	e754      	b.n	8010ef8 <__kernel_rem_pio2+0x1a8>
 801104e:	bf00      	nop
	...
 801105c:	3ff00000 	.word	0x3ff00000
 8011060:	08012390 	.word	0x08012390
 8011064:	40200000 	.word	0x40200000
 8011068:	3ff00000 	.word	0x3ff00000
 801106c:	3e700000 	.word	0x3e700000
 8011070:	41700000 	.word	0x41700000
 8011074:	3fe00000 	.word	0x3fe00000
 8011078:	08012350 	.word	0x08012350
 801107c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011080:	b945      	cbnz	r5, 8011094 <__kernel_rem_pio2+0x344>
 8011082:	b123      	cbz	r3, 801108e <__kernel_rem_pio2+0x33e>
 8011084:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011088:	f844 3c04 	str.w	r3, [r4, #-4]
 801108c:	2301      	movs	r3, #1
 801108e:	3201      	adds	r2, #1
 8011090:	461d      	mov	r5, r3
 8011092:	e738      	b.n	8010f06 <__kernel_rem_pio2+0x1b6>
 8011094:	1acb      	subs	r3, r1, r3
 8011096:	e7f7      	b.n	8011088 <__kernel_rem_pio2+0x338>
 8011098:	f108 32ff 	add.w	r2, r8, #4294967295
 801109c:	ab0c      	add	r3, sp, #48	@ 0x30
 801109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80110a6:	a90c      	add	r1, sp, #48	@ 0x30
 80110a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80110ac:	e739      	b.n	8010f22 <__kernel_rem_pio2+0x1d2>
 80110ae:	f108 32ff 	add.w	r2, r8, #4294967295
 80110b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80110b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80110bc:	e7f3      	b.n	80110a6 <__kernel_rem_pio2+0x356>
 80110be:	a90c      	add	r1, sp, #48	@ 0x30
 80110c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	430a      	orrs	r2, r1
 80110c8:	e787      	b.n	8010fda <__kernel_rem_pio2+0x28a>
 80110ca:	3401      	adds	r4, #1
 80110cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80110d0:	2a00      	cmp	r2, #0
 80110d2:	d0fa      	beq.n	80110ca <__kernel_rem_pio2+0x37a>
 80110d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80110da:	eb0d 0503 	add.w	r5, sp, r3
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	aa20      	add	r2, sp, #128	@ 0x80
 80110e2:	4443      	add	r3, r8
 80110e4:	f108 0701 	add.w	r7, r8, #1
 80110e8:	3d98      	subs	r5, #152	@ 0x98
 80110ea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80110ee:	4444      	add	r4, r8
 80110f0:	42bc      	cmp	r4, r7
 80110f2:	da04      	bge.n	80110fe <__kernel_rem_pio2+0x3ae>
 80110f4:	46a0      	mov	r8, r4
 80110f6:	e6a2      	b.n	8010e3e <__kernel_rem_pio2+0xee>
 80110f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110fa:	2401      	movs	r4, #1
 80110fc:	e7e6      	b.n	80110cc <__kernel_rem_pio2+0x37c>
 80110fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011100:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011104:	f7ef fa2e 	bl	8000564 <__aeabi_i2d>
 8011108:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80113d0 <__kernel_rem_pio2+0x680>
 801110c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011110:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011118:	46b2      	mov	sl, r6
 801111a:	f04f 0800 	mov.w	r8, #0
 801111e:	9b05      	ldr	r3, [sp, #20]
 8011120:	4598      	cmp	r8, r3
 8011122:	dd05      	ble.n	8011130 <__kernel_rem_pio2+0x3e0>
 8011124:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011128:	3701      	adds	r7, #1
 801112a:	eca5 7b02 	vstmia	r5!, {d7}
 801112e:	e7df      	b.n	80110f0 <__kernel_rem_pio2+0x3a0>
 8011130:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011134:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011138:	f7ef fa7e 	bl	8000638 <__aeabi_dmul>
 801113c:	4602      	mov	r2, r0
 801113e:	460b      	mov	r3, r1
 8011140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011144:	f7ef f8c2 	bl	80002cc <__adddf3>
 8011148:	f108 0801 	add.w	r8, r8, #1
 801114c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011150:	e7e5      	b.n	801111e <__kernel_rem_pio2+0x3ce>
 8011152:	f1cb 0000 	rsb	r0, fp, #0
 8011156:	ec47 6b10 	vmov	d0, r6, r7
 801115a:	f7ff fd3d 	bl	8010bd8 <scalbn>
 801115e:	ec55 4b10 	vmov	r4, r5, d0
 8011162:	4b9d      	ldr	r3, [pc, #628]	@ (80113d8 <__kernel_rem_pio2+0x688>)
 8011164:	2200      	movs	r2, #0
 8011166:	4620      	mov	r0, r4
 8011168:	4629      	mov	r1, r5
 801116a:	f7ef fceb 	bl	8000b44 <__aeabi_dcmpge>
 801116e:	b300      	cbz	r0, 80111b2 <__kernel_rem_pio2+0x462>
 8011170:	4b9a      	ldr	r3, [pc, #616]	@ (80113dc <__kernel_rem_pio2+0x68c>)
 8011172:	2200      	movs	r2, #0
 8011174:	4620      	mov	r0, r4
 8011176:	4629      	mov	r1, r5
 8011178:	f7ef fa5e 	bl	8000638 <__aeabi_dmul>
 801117c:	f7ef fd0c 	bl	8000b98 <__aeabi_d2iz>
 8011180:	4606      	mov	r6, r0
 8011182:	f7ef f9ef 	bl	8000564 <__aeabi_i2d>
 8011186:	4b94      	ldr	r3, [pc, #592]	@ (80113d8 <__kernel_rem_pio2+0x688>)
 8011188:	2200      	movs	r2, #0
 801118a:	f7ef fa55 	bl	8000638 <__aeabi_dmul>
 801118e:	460b      	mov	r3, r1
 8011190:	4602      	mov	r2, r0
 8011192:	4629      	mov	r1, r5
 8011194:	4620      	mov	r0, r4
 8011196:	f7ef f897 	bl	80002c8 <__aeabi_dsub>
 801119a:	f7ef fcfd 	bl	8000b98 <__aeabi_d2iz>
 801119e:	ab0c      	add	r3, sp, #48	@ 0x30
 80111a0:	f10b 0b18 	add.w	fp, fp, #24
 80111a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80111a8:	f108 0801 	add.w	r8, r8, #1
 80111ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80111b0:	e722      	b.n	8010ff8 <__kernel_rem_pio2+0x2a8>
 80111b2:	4620      	mov	r0, r4
 80111b4:	4629      	mov	r1, r5
 80111b6:	f7ef fcef 	bl	8000b98 <__aeabi_d2iz>
 80111ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80111bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80111c0:	e71a      	b.n	8010ff8 <__kernel_rem_pio2+0x2a8>
 80111c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80111c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80111c8:	f7ef f9cc 	bl	8000564 <__aeabi_i2d>
 80111cc:	4622      	mov	r2, r4
 80111ce:	462b      	mov	r3, r5
 80111d0:	f7ef fa32 	bl	8000638 <__aeabi_dmul>
 80111d4:	4652      	mov	r2, sl
 80111d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80111da:	465b      	mov	r3, fp
 80111dc:	4620      	mov	r0, r4
 80111de:	4629      	mov	r1, r5
 80111e0:	f7ef fa2a 	bl	8000638 <__aeabi_dmul>
 80111e4:	3e01      	subs	r6, #1
 80111e6:	4604      	mov	r4, r0
 80111e8:	460d      	mov	r5, r1
 80111ea:	e718      	b.n	801101e <__kernel_rem_pio2+0x2ce>
 80111ec:	9906      	ldr	r1, [sp, #24]
 80111ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80111f2:	9106      	str	r1, [sp, #24]
 80111f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80111f8:	f7ef fa1e 	bl	8000638 <__aeabi_dmul>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	4650      	mov	r0, sl
 8011202:	4659      	mov	r1, fp
 8011204:	f7ef f862 	bl	80002cc <__adddf3>
 8011208:	3601      	adds	r6, #1
 801120a:	4682      	mov	sl, r0
 801120c:	468b      	mov	fp, r1
 801120e:	9b00      	ldr	r3, [sp, #0]
 8011210:	429e      	cmp	r6, r3
 8011212:	dc01      	bgt.n	8011218 <__kernel_rem_pio2+0x4c8>
 8011214:	42b5      	cmp	r5, r6
 8011216:	dae9      	bge.n	80111ec <__kernel_rem_pio2+0x49c>
 8011218:	ab48      	add	r3, sp, #288	@ 0x120
 801121a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801121e:	e9c5 ab00 	strd	sl, fp, [r5]
 8011222:	3c01      	subs	r4, #1
 8011224:	e6ff      	b.n	8011026 <__kernel_rem_pio2+0x2d6>
 8011226:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011228:	2b02      	cmp	r3, #2
 801122a:	dc0b      	bgt.n	8011244 <__kernel_rem_pio2+0x4f4>
 801122c:	2b00      	cmp	r3, #0
 801122e:	dc39      	bgt.n	80112a4 <__kernel_rem_pio2+0x554>
 8011230:	d05d      	beq.n	80112ee <__kernel_rem_pio2+0x59e>
 8011232:	9b02      	ldr	r3, [sp, #8]
 8011234:	f003 0007 	and.w	r0, r3, #7
 8011238:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801123c:	ecbd 8b02 	vpop	{d8}
 8011240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011244:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011246:	2b03      	cmp	r3, #3
 8011248:	d1f3      	bne.n	8011232 <__kernel_rem_pio2+0x4e2>
 801124a:	9b05      	ldr	r3, [sp, #20]
 801124c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011250:	eb0d 0403 	add.w	r4, sp, r3
 8011254:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011258:	4625      	mov	r5, r4
 801125a:	46c2      	mov	sl, r8
 801125c:	f1ba 0f00 	cmp.w	sl, #0
 8011260:	f1a5 0508 	sub.w	r5, r5, #8
 8011264:	dc6b      	bgt.n	801133e <__kernel_rem_pio2+0x5ee>
 8011266:	4645      	mov	r5, r8
 8011268:	2d01      	cmp	r5, #1
 801126a:	f1a4 0408 	sub.w	r4, r4, #8
 801126e:	f300 8087 	bgt.w	8011380 <__kernel_rem_pio2+0x630>
 8011272:	9c05      	ldr	r4, [sp, #20]
 8011274:	ab48      	add	r3, sp, #288	@ 0x120
 8011276:	441c      	add	r4, r3
 8011278:	2000      	movs	r0, #0
 801127a:	2100      	movs	r1, #0
 801127c:	f1b8 0f01 	cmp.w	r8, #1
 8011280:	f300 809c 	bgt.w	80113bc <__kernel_rem_pio2+0x66c>
 8011284:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011288:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801128c:	f1b9 0f00 	cmp.w	r9, #0
 8011290:	f040 80a6 	bne.w	80113e0 <__kernel_rem_pio2+0x690>
 8011294:	9b04      	ldr	r3, [sp, #16]
 8011296:	e9c3 7800 	strd	r7, r8, [r3]
 801129a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801129e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80112a2:	e7c6      	b.n	8011232 <__kernel_rem_pio2+0x4e2>
 80112a4:	9d05      	ldr	r5, [sp, #20]
 80112a6:	ab48      	add	r3, sp, #288	@ 0x120
 80112a8:	441d      	add	r5, r3
 80112aa:	4644      	mov	r4, r8
 80112ac:	2000      	movs	r0, #0
 80112ae:	2100      	movs	r1, #0
 80112b0:	2c00      	cmp	r4, #0
 80112b2:	da35      	bge.n	8011320 <__kernel_rem_pio2+0x5d0>
 80112b4:	f1b9 0f00 	cmp.w	r9, #0
 80112b8:	d038      	beq.n	801132c <__kernel_rem_pio2+0x5dc>
 80112ba:	4602      	mov	r2, r0
 80112bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112c0:	9c04      	ldr	r4, [sp, #16]
 80112c2:	e9c4 2300 	strd	r2, r3, [r4]
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80112ce:	f7ee fffb 	bl	80002c8 <__aeabi_dsub>
 80112d2:	ad4a      	add	r5, sp, #296	@ 0x128
 80112d4:	2401      	movs	r4, #1
 80112d6:	45a0      	cmp	r8, r4
 80112d8:	da2b      	bge.n	8011332 <__kernel_rem_pio2+0x5e2>
 80112da:	f1b9 0f00 	cmp.w	r9, #0
 80112de:	d002      	beq.n	80112e6 <__kernel_rem_pio2+0x596>
 80112e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112e4:	4619      	mov	r1, r3
 80112e6:	9b04      	ldr	r3, [sp, #16]
 80112e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80112ec:	e7a1      	b.n	8011232 <__kernel_rem_pio2+0x4e2>
 80112ee:	9c05      	ldr	r4, [sp, #20]
 80112f0:	ab48      	add	r3, sp, #288	@ 0x120
 80112f2:	441c      	add	r4, r3
 80112f4:	2000      	movs	r0, #0
 80112f6:	2100      	movs	r1, #0
 80112f8:	f1b8 0f00 	cmp.w	r8, #0
 80112fc:	da09      	bge.n	8011312 <__kernel_rem_pio2+0x5c2>
 80112fe:	f1b9 0f00 	cmp.w	r9, #0
 8011302:	d002      	beq.n	801130a <__kernel_rem_pio2+0x5ba>
 8011304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011308:	4619      	mov	r1, r3
 801130a:	9b04      	ldr	r3, [sp, #16]
 801130c:	e9c3 0100 	strd	r0, r1, [r3]
 8011310:	e78f      	b.n	8011232 <__kernel_rem_pio2+0x4e2>
 8011312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011316:	f7ee ffd9 	bl	80002cc <__adddf3>
 801131a:	f108 38ff 	add.w	r8, r8, #4294967295
 801131e:	e7eb      	b.n	80112f8 <__kernel_rem_pio2+0x5a8>
 8011320:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011324:	f7ee ffd2 	bl	80002cc <__adddf3>
 8011328:	3c01      	subs	r4, #1
 801132a:	e7c1      	b.n	80112b0 <__kernel_rem_pio2+0x560>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	e7c6      	b.n	80112c0 <__kernel_rem_pio2+0x570>
 8011332:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011336:	f7ee ffc9 	bl	80002cc <__adddf3>
 801133a:	3401      	adds	r4, #1
 801133c:	e7cb      	b.n	80112d6 <__kernel_rem_pio2+0x586>
 801133e:	ed95 7b00 	vldr	d7, [r5]
 8011342:	ed8d 7b00 	vstr	d7, [sp]
 8011346:	ed95 7b02 	vldr	d7, [r5, #8]
 801134a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801134e:	ec53 2b17 	vmov	r2, r3, d7
 8011352:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011356:	f7ee ffb9 	bl	80002cc <__adddf3>
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	4606      	mov	r6, r0
 8011360:	460f      	mov	r7, r1
 8011362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011366:	f7ee ffaf 	bl	80002c8 <__aeabi_dsub>
 801136a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801136e:	f7ee ffad 	bl	80002cc <__adddf3>
 8011372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011376:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801137a:	e9c5 6700 	strd	r6, r7, [r5]
 801137e:	e76d      	b.n	801125c <__kernel_rem_pio2+0x50c>
 8011380:	ed94 7b00 	vldr	d7, [r4]
 8011384:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011388:	ec51 0b17 	vmov	r0, r1, d7
 801138c:	4652      	mov	r2, sl
 801138e:	465b      	mov	r3, fp
 8011390:	ed8d 7b00 	vstr	d7, [sp]
 8011394:	f7ee ff9a 	bl	80002cc <__adddf3>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4606      	mov	r6, r0
 801139e:	460f      	mov	r7, r1
 80113a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113a4:	f7ee ff90 	bl	80002c8 <__aeabi_dsub>
 80113a8:	4652      	mov	r2, sl
 80113aa:	465b      	mov	r3, fp
 80113ac:	f7ee ff8e 	bl	80002cc <__adddf3>
 80113b0:	3d01      	subs	r5, #1
 80113b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113b6:	e9c4 6700 	strd	r6, r7, [r4]
 80113ba:	e755      	b.n	8011268 <__kernel_rem_pio2+0x518>
 80113bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80113c0:	f7ee ff84 	bl	80002cc <__adddf3>
 80113c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80113c8:	e758      	b.n	801127c <__kernel_rem_pio2+0x52c>
 80113ca:	bf00      	nop
 80113cc:	f3af 8000 	nop.w
	...
 80113d8:	41700000 	.word	0x41700000
 80113dc:	3e700000 	.word	0x3e700000
 80113e0:	9b04      	ldr	r3, [sp, #16]
 80113e2:	9a04      	ldr	r2, [sp, #16]
 80113e4:	601f      	str	r7, [r3, #0]
 80113e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80113ea:	605c      	str	r4, [r3, #4]
 80113ec:	609d      	str	r5, [r3, #8]
 80113ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80113f2:	60d3      	str	r3, [r2, #12]
 80113f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113f8:	6110      	str	r0, [r2, #16]
 80113fa:	6153      	str	r3, [r2, #20]
 80113fc:	e719      	b.n	8011232 <__kernel_rem_pio2+0x4e2>
 80113fe:	bf00      	nop

08011400 <floor>:
 8011400:	ec51 0b10 	vmov	r0, r1, d0
 8011404:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801140c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011410:	2e13      	cmp	r6, #19
 8011412:	460c      	mov	r4, r1
 8011414:	4605      	mov	r5, r0
 8011416:	4680      	mov	r8, r0
 8011418:	dc34      	bgt.n	8011484 <floor+0x84>
 801141a:	2e00      	cmp	r6, #0
 801141c:	da17      	bge.n	801144e <floor+0x4e>
 801141e:	a332      	add	r3, pc, #200	@ (adr r3, 80114e8 <floor+0xe8>)
 8011420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011424:	f7ee ff52 	bl	80002cc <__adddf3>
 8011428:	2200      	movs	r2, #0
 801142a:	2300      	movs	r3, #0
 801142c:	f7ef fb94 	bl	8000b58 <__aeabi_dcmpgt>
 8011430:	b150      	cbz	r0, 8011448 <floor+0x48>
 8011432:	2c00      	cmp	r4, #0
 8011434:	da55      	bge.n	80114e2 <floor+0xe2>
 8011436:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801143a:	432c      	orrs	r4, r5
 801143c:	2500      	movs	r5, #0
 801143e:	42ac      	cmp	r4, r5
 8011440:	4c2b      	ldr	r4, [pc, #172]	@ (80114f0 <floor+0xf0>)
 8011442:	bf08      	it	eq
 8011444:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011448:	4621      	mov	r1, r4
 801144a:	4628      	mov	r0, r5
 801144c:	e023      	b.n	8011496 <floor+0x96>
 801144e:	4f29      	ldr	r7, [pc, #164]	@ (80114f4 <floor+0xf4>)
 8011450:	4137      	asrs	r7, r6
 8011452:	ea01 0307 	and.w	r3, r1, r7
 8011456:	4303      	orrs	r3, r0
 8011458:	d01d      	beq.n	8011496 <floor+0x96>
 801145a:	a323      	add	r3, pc, #140	@ (adr r3, 80114e8 <floor+0xe8>)
 801145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011460:	f7ee ff34 	bl	80002cc <__adddf3>
 8011464:	2200      	movs	r2, #0
 8011466:	2300      	movs	r3, #0
 8011468:	f7ef fb76 	bl	8000b58 <__aeabi_dcmpgt>
 801146c:	2800      	cmp	r0, #0
 801146e:	d0eb      	beq.n	8011448 <floor+0x48>
 8011470:	2c00      	cmp	r4, #0
 8011472:	bfbe      	ittt	lt
 8011474:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011478:	4133      	asrlt	r3, r6
 801147a:	18e4      	addlt	r4, r4, r3
 801147c:	ea24 0407 	bic.w	r4, r4, r7
 8011480:	2500      	movs	r5, #0
 8011482:	e7e1      	b.n	8011448 <floor+0x48>
 8011484:	2e33      	cmp	r6, #51	@ 0x33
 8011486:	dd0a      	ble.n	801149e <floor+0x9e>
 8011488:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801148c:	d103      	bne.n	8011496 <floor+0x96>
 801148e:	4602      	mov	r2, r0
 8011490:	460b      	mov	r3, r1
 8011492:	f7ee ff1b 	bl	80002cc <__adddf3>
 8011496:	ec41 0b10 	vmov	d0, r0, r1
 801149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801149e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80114a2:	f04f 37ff 	mov.w	r7, #4294967295
 80114a6:	40df      	lsrs	r7, r3
 80114a8:	4207      	tst	r7, r0
 80114aa:	d0f4      	beq.n	8011496 <floor+0x96>
 80114ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80114e8 <floor+0xe8>)
 80114ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b2:	f7ee ff0b 	bl	80002cc <__adddf3>
 80114b6:	2200      	movs	r2, #0
 80114b8:	2300      	movs	r3, #0
 80114ba:	f7ef fb4d 	bl	8000b58 <__aeabi_dcmpgt>
 80114be:	2800      	cmp	r0, #0
 80114c0:	d0c2      	beq.n	8011448 <floor+0x48>
 80114c2:	2c00      	cmp	r4, #0
 80114c4:	da0a      	bge.n	80114dc <floor+0xdc>
 80114c6:	2e14      	cmp	r6, #20
 80114c8:	d101      	bne.n	80114ce <floor+0xce>
 80114ca:	3401      	adds	r4, #1
 80114cc:	e006      	b.n	80114dc <floor+0xdc>
 80114ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80114d2:	2301      	movs	r3, #1
 80114d4:	40b3      	lsls	r3, r6
 80114d6:	441d      	add	r5, r3
 80114d8:	4545      	cmp	r5, r8
 80114da:	d3f6      	bcc.n	80114ca <floor+0xca>
 80114dc:	ea25 0507 	bic.w	r5, r5, r7
 80114e0:	e7b2      	b.n	8011448 <floor+0x48>
 80114e2:	2500      	movs	r5, #0
 80114e4:	462c      	mov	r4, r5
 80114e6:	e7af      	b.n	8011448 <floor+0x48>
 80114e8:	8800759c 	.word	0x8800759c
 80114ec:	7e37e43c 	.word	0x7e37e43c
 80114f0:	bff00000 	.word	0xbff00000
 80114f4:	000fffff 	.word	0x000fffff

080114f8 <abort>:
 80114f8:	b508      	push	{r3, lr}
 80114fa:	2006      	movs	r0, #6
 80114fc:	f000 f926 	bl	801174c <raise>
 8011500:	2001      	movs	r0, #1
 8011502:	f7f4 fadd 	bl	8005ac0 <_exit>
	...

08011508 <malloc>:
 8011508:	4b02      	ldr	r3, [pc, #8]	@ (8011514 <malloc+0xc>)
 801150a:	4601      	mov	r1, r0
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	f000 b82d 	b.w	801156c <_malloc_r>
 8011512:	bf00      	nop
 8011514:	20000020 	.word	0x20000020

08011518 <free>:
 8011518:	4b02      	ldr	r3, [pc, #8]	@ (8011524 <free+0xc>)
 801151a:	4601      	mov	r1, r0
 801151c:	6818      	ldr	r0, [r3, #0]
 801151e:	f000 b96d 	b.w	80117fc <_free_r>
 8011522:	bf00      	nop
 8011524:	20000020 	.word	0x20000020

08011528 <sbrk_aligned>:
 8011528:	b570      	push	{r4, r5, r6, lr}
 801152a:	4e0f      	ldr	r6, [pc, #60]	@ (8011568 <sbrk_aligned+0x40>)
 801152c:	460c      	mov	r4, r1
 801152e:	6831      	ldr	r1, [r6, #0]
 8011530:	4605      	mov	r5, r0
 8011532:	b911      	cbnz	r1, 801153a <sbrk_aligned+0x12>
 8011534:	f000 f926 	bl	8011784 <_sbrk_r>
 8011538:	6030      	str	r0, [r6, #0]
 801153a:	4621      	mov	r1, r4
 801153c:	4628      	mov	r0, r5
 801153e:	f000 f921 	bl	8011784 <_sbrk_r>
 8011542:	1c43      	adds	r3, r0, #1
 8011544:	d103      	bne.n	801154e <sbrk_aligned+0x26>
 8011546:	f04f 34ff 	mov.w	r4, #4294967295
 801154a:	4620      	mov	r0, r4
 801154c:	bd70      	pop	{r4, r5, r6, pc}
 801154e:	1cc4      	adds	r4, r0, #3
 8011550:	f024 0403 	bic.w	r4, r4, #3
 8011554:	42a0      	cmp	r0, r4
 8011556:	d0f8      	beq.n	801154a <sbrk_aligned+0x22>
 8011558:	1a21      	subs	r1, r4, r0
 801155a:	4628      	mov	r0, r5
 801155c:	f000 f912 	bl	8011784 <_sbrk_r>
 8011560:	3001      	adds	r0, #1
 8011562:	d1f2      	bne.n	801154a <sbrk_aligned+0x22>
 8011564:	e7ef      	b.n	8011546 <sbrk_aligned+0x1e>
 8011566:	bf00      	nop
 8011568:	200015d8 	.word	0x200015d8

0801156c <_malloc_r>:
 801156c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011570:	1ccd      	adds	r5, r1, #3
 8011572:	f025 0503 	bic.w	r5, r5, #3
 8011576:	3508      	adds	r5, #8
 8011578:	2d0c      	cmp	r5, #12
 801157a:	bf38      	it	cc
 801157c:	250c      	movcc	r5, #12
 801157e:	2d00      	cmp	r5, #0
 8011580:	4606      	mov	r6, r0
 8011582:	db01      	blt.n	8011588 <_malloc_r+0x1c>
 8011584:	42a9      	cmp	r1, r5
 8011586:	d904      	bls.n	8011592 <_malloc_r+0x26>
 8011588:	230c      	movs	r3, #12
 801158a:	6033      	str	r3, [r6, #0]
 801158c:	2000      	movs	r0, #0
 801158e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011668 <_malloc_r+0xfc>
 8011596:	f000 f869 	bl	801166c <__malloc_lock>
 801159a:	f8d8 3000 	ldr.w	r3, [r8]
 801159e:	461c      	mov	r4, r3
 80115a0:	bb44      	cbnz	r4, 80115f4 <_malloc_r+0x88>
 80115a2:	4629      	mov	r1, r5
 80115a4:	4630      	mov	r0, r6
 80115a6:	f7ff ffbf 	bl	8011528 <sbrk_aligned>
 80115aa:	1c43      	adds	r3, r0, #1
 80115ac:	4604      	mov	r4, r0
 80115ae:	d158      	bne.n	8011662 <_malloc_r+0xf6>
 80115b0:	f8d8 4000 	ldr.w	r4, [r8]
 80115b4:	4627      	mov	r7, r4
 80115b6:	2f00      	cmp	r7, #0
 80115b8:	d143      	bne.n	8011642 <_malloc_r+0xd6>
 80115ba:	2c00      	cmp	r4, #0
 80115bc:	d04b      	beq.n	8011656 <_malloc_r+0xea>
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	4639      	mov	r1, r7
 80115c2:	4630      	mov	r0, r6
 80115c4:	eb04 0903 	add.w	r9, r4, r3
 80115c8:	f000 f8dc 	bl	8011784 <_sbrk_r>
 80115cc:	4581      	cmp	r9, r0
 80115ce:	d142      	bne.n	8011656 <_malloc_r+0xea>
 80115d0:	6821      	ldr	r1, [r4, #0]
 80115d2:	1a6d      	subs	r5, r5, r1
 80115d4:	4629      	mov	r1, r5
 80115d6:	4630      	mov	r0, r6
 80115d8:	f7ff ffa6 	bl	8011528 <sbrk_aligned>
 80115dc:	3001      	adds	r0, #1
 80115de:	d03a      	beq.n	8011656 <_malloc_r+0xea>
 80115e0:	6823      	ldr	r3, [r4, #0]
 80115e2:	442b      	add	r3, r5
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	f8d8 3000 	ldr.w	r3, [r8]
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	bb62      	cbnz	r2, 8011648 <_malloc_r+0xdc>
 80115ee:	f8c8 7000 	str.w	r7, [r8]
 80115f2:	e00f      	b.n	8011614 <_malloc_r+0xa8>
 80115f4:	6822      	ldr	r2, [r4, #0]
 80115f6:	1b52      	subs	r2, r2, r5
 80115f8:	d420      	bmi.n	801163c <_malloc_r+0xd0>
 80115fa:	2a0b      	cmp	r2, #11
 80115fc:	d917      	bls.n	801162e <_malloc_r+0xc2>
 80115fe:	1961      	adds	r1, r4, r5
 8011600:	42a3      	cmp	r3, r4
 8011602:	6025      	str	r5, [r4, #0]
 8011604:	bf18      	it	ne
 8011606:	6059      	strne	r1, [r3, #4]
 8011608:	6863      	ldr	r3, [r4, #4]
 801160a:	bf08      	it	eq
 801160c:	f8c8 1000 	streq.w	r1, [r8]
 8011610:	5162      	str	r2, [r4, r5]
 8011612:	604b      	str	r3, [r1, #4]
 8011614:	4630      	mov	r0, r6
 8011616:	f000 f82f 	bl	8011678 <__malloc_unlock>
 801161a:	f104 000b 	add.w	r0, r4, #11
 801161e:	1d23      	adds	r3, r4, #4
 8011620:	f020 0007 	bic.w	r0, r0, #7
 8011624:	1ac2      	subs	r2, r0, r3
 8011626:	bf1c      	itt	ne
 8011628:	1a1b      	subne	r3, r3, r0
 801162a:	50a3      	strne	r3, [r4, r2]
 801162c:	e7af      	b.n	801158e <_malloc_r+0x22>
 801162e:	6862      	ldr	r2, [r4, #4]
 8011630:	42a3      	cmp	r3, r4
 8011632:	bf0c      	ite	eq
 8011634:	f8c8 2000 	streq.w	r2, [r8]
 8011638:	605a      	strne	r2, [r3, #4]
 801163a:	e7eb      	b.n	8011614 <_malloc_r+0xa8>
 801163c:	4623      	mov	r3, r4
 801163e:	6864      	ldr	r4, [r4, #4]
 8011640:	e7ae      	b.n	80115a0 <_malloc_r+0x34>
 8011642:	463c      	mov	r4, r7
 8011644:	687f      	ldr	r7, [r7, #4]
 8011646:	e7b6      	b.n	80115b6 <_malloc_r+0x4a>
 8011648:	461a      	mov	r2, r3
 801164a:	685b      	ldr	r3, [r3, #4]
 801164c:	42a3      	cmp	r3, r4
 801164e:	d1fb      	bne.n	8011648 <_malloc_r+0xdc>
 8011650:	2300      	movs	r3, #0
 8011652:	6053      	str	r3, [r2, #4]
 8011654:	e7de      	b.n	8011614 <_malloc_r+0xa8>
 8011656:	230c      	movs	r3, #12
 8011658:	6033      	str	r3, [r6, #0]
 801165a:	4630      	mov	r0, r6
 801165c:	f000 f80c 	bl	8011678 <__malloc_unlock>
 8011660:	e794      	b.n	801158c <_malloc_r+0x20>
 8011662:	6005      	str	r5, [r0, #0]
 8011664:	e7d6      	b.n	8011614 <_malloc_r+0xa8>
 8011666:	bf00      	nop
 8011668:	200015dc 	.word	0x200015dc

0801166c <__malloc_lock>:
 801166c:	4801      	ldr	r0, [pc, #4]	@ (8011674 <__malloc_lock+0x8>)
 801166e:	f000 b8c3 	b.w	80117f8 <__retarget_lock_acquire_recursive>
 8011672:	bf00      	nop
 8011674:	2000171c 	.word	0x2000171c

08011678 <__malloc_unlock>:
 8011678:	4801      	ldr	r0, [pc, #4]	@ (8011680 <__malloc_unlock+0x8>)
 801167a:	f000 b8be 	b.w	80117fa <__retarget_lock_release_recursive>
 801167e:	bf00      	nop
 8011680:	2000171c 	.word	0x2000171c

08011684 <sniprintf>:
 8011684:	b40c      	push	{r2, r3}
 8011686:	b530      	push	{r4, r5, lr}
 8011688:	4b17      	ldr	r3, [pc, #92]	@ (80116e8 <sniprintf+0x64>)
 801168a:	1e0c      	subs	r4, r1, #0
 801168c:	681d      	ldr	r5, [r3, #0]
 801168e:	b09d      	sub	sp, #116	@ 0x74
 8011690:	da08      	bge.n	80116a4 <sniprintf+0x20>
 8011692:	238b      	movs	r3, #139	@ 0x8b
 8011694:	602b      	str	r3, [r5, #0]
 8011696:	f04f 30ff 	mov.w	r0, #4294967295
 801169a:	b01d      	add	sp, #116	@ 0x74
 801169c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116a0:	b002      	add	sp, #8
 80116a2:	4770      	bx	lr
 80116a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80116a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80116ac:	bf14      	ite	ne
 80116ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80116b2:	4623      	moveq	r3, r4
 80116b4:	9304      	str	r3, [sp, #16]
 80116b6:	9307      	str	r3, [sp, #28]
 80116b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80116bc:	9002      	str	r0, [sp, #8]
 80116be:	9006      	str	r0, [sp, #24]
 80116c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80116c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80116c6:	ab21      	add	r3, sp, #132	@ 0x84
 80116c8:	a902      	add	r1, sp, #8
 80116ca:	4628      	mov	r0, r5
 80116cc:	9301      	str	r3, [sp, #4]
 80116ce:	f000 f93b 	bl	8011948 <_svfiprintf_r>
 80116d2:	1c43      	adds	r3, r0, #1
 80116d4:	bfbc      	itt	lt
 80116d6:	238b      	movlt	r3, #139	@ 0x8b
 80116d8:	602b      	strlt	r3, [r5, #0]
 80116da:	2c00      	cmp	r4, #0
 80116dc:	d0dd      	beq.n	801169a <sniprintf+0x16>
 80116de:	9b02      	ldr	r3, [sp, #8]
 80116e0:	2200      	movs	r2, #0
 80116e2:	701a      	strb	r2, [r3, #0]
 80116e4:	e7d9      	b.n	801169a <sniprintf+0x16>
 80116e6:	bf00      	nop
 80116e8:	20000020 	.word	0x20000020

080116ec <memset>:
 80116ec:	4402      	add	r2, r0
 80116ee:	4603      	mov	r3, r0
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d100      	bne.n	80116f6 <memset+0xa>
 80116f4:	4770      	bx	lr
 80116f6:	f803 1b01 	strb.w	r1, [r3], #1
 80116fa:	e7f9      	b.n	80116f0 <memset+0x4>

080116fc <_raise_r>:
 80116fc:	291f      	cmp	r1, #31
 80116fe:	b538      	push	{r3, r4, r5, lr}
 8011700:	4605      	mov	r5, r0
 8011702:	460c      	mov	r4, r1
 8011704:	d904      	bls.n	8011710 <_raise_r+0x14>
 8011706:	2316      	movs	r3, #22
 8011708:	6003      	str	r3, [r0, #0]
 801170a:	f04f 30ff 	mov.w	r0, #4294967295
 801170e:	bd38      	pop	{r3, r4, r5, pc}
 8011710:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011712:	b112      	cbz	r2, 801171a <_raise_r+0x1e>
 8011714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011718:	b94b      	cbnz	r3, 801172e <_raise_r+0x32>
 801171a:	4628      	mov	r0, r5
 801171c:	f000 f830 	bl	8011780 <_getpid_r>
 8011720:	4622      	mov	r2, r4
 8011722:	4601      	mov	r1, r0
 8011724:	4628      	mov	r0, r5
 8011726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801172a:	f000 b817 	b.w	801175c <_kill_r>
 801172e:	2b01      	cmp	r3, #1
 8011730:	d00a      	beq.n	8011748 <_raise_r+0x4c>
 8011732:	1c59      	adds	r1, r3, #1
 8011734:	d103      	bne.n	801173e <_raise_r+0x42>
 8011736:	2316      	movs	r3, #22
 8011738:	6003      	str	r3, [r0, #0]
 801173a:	2001      	movs	r0, #1
 801173c:	e7e7      	b.n	801170e <_raise_r+0x12>
 801173e:	2100      	movs	r1, #0
 8011740:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011744:	4620      	mov	r0, r4
 8011746:	4798      	blx	r3
 8011748:	2000      	movs	r0, #0
 801174a:	e7e0      	b.n	801170e <_raise_r+0x12>

0801174c <raise>:
 801174c:	4b02      	ldr	r3, [pc, #8]	@ (8011758 <raise+0xc>)
 801174e:	4601      	mov	r1, r0
 8011750:	6818      	ldr	r0, [r3, #0]
 8011752:	f7ff bfd3 	b.w	80116fc <_raise_r>
 8011756:	bf00      	nop
 8011758:	20000020 	.word	0x20000020

0801175c <_kill_r>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4d07      	ldr	r5, [pc, #28]	@ (801177c <_kill_r+0x20>)
 8011760:	2300      	movs	r3, #0
 8011762:	4604      	mov	r4, r0
 8011764:	4608      	mov	r0, r1
 8011766:	4611      	mov	r1, r2
 8011768:	602b      	str	r3, [r5, #0]
 801176a:	f7f4 f999 	bl	8005aa0 <_kill>
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	d102      	bne.n	8011778 <_kill_r+0x1c>
 8011772:	682b      	ldr	r3, [r5, #0]
 8011774:	b103      	cbz	r3, 8011778 <_kill_r+0x1c>
 8011776:	6023      	str	r3, [r4, #0]
 8011778:	bd38      	pop	{r3, r4, r5, pc}
 801177a:	bf00      	nop
 801177c:	20001718 	.word	0x20001718

08011780 <_getpid_r>:
 8011780:	f7f4 b986 	b.w	8005a90 <_getpid>

08011784 <_sbrk_r>:
 8011784:	b538      	push	{r3, r4, r5, lr}
 8011786:	4d06      	ldr	r5, [pc, #24]	@ (80117a0 <_sbrk_r+0x1c>)
 8011788:	2300      	movs	r3, #0
 801178a:	4604      	mov	r4, r0
 801178c:	4608      	mov	r0, r1
 801178e:	602b      	str	r3, [r5, #0]
 8011790:	f7f4 f9a2 	bl	8005ad8 <_sbrk>
 8011794:	1c43      	adds	r3, r0, #1
 8011796:	d102      	bne.n	801179e <_sbrk_r+0x1a>
 8011798:	682b      	ldr	r3, [r5, #0]
 801179a:	b103      	cbz	r3, 801179e <_sbrk_r+0x1a>
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	bd38      	pop	{r3, r4, r5, pc}
 80117a0:	20001718 	.word	0x20001718

080117a4 <__errno>:
 80117a4:	4b01      	ldr	r3, [pc, #4]	@ (80117ac <__errno+0x8>)
 80117a6:	6818      	ldr	r0, [r3, #0]
 80117a8:	4770      	bx	lr
 80117aa:	bf00      	nop
 80117ac:	20000020 	.word	0x20000020

080117b0 <__libc_init_array>:
 80117b0:	b570      	push	{r4, r5, r6, lr}
 80117b2:	4d0d      	ldr	r5, [pc, #52]	@ (80117e8 <__libc_init_array+0x38>)
 80117b4:	4c0d      	ldr	r4, [pc, #52]	@ (80117ec <__libc_init_array+0x3c>)
 80117b6:	1b64      	subs	r4, r4, r5
 80117b8:	10a4      	asrs	r4, r4, #2
 80117ba:	2600      	movs	r6, #0
 80117bc:	42a6      	cmp	r6, r4
 80117be:	d109      	bne.n	80117d4 <__libc_init_array+0x24>
 80117c0:	4d0b      	ldr	r5, [pc, #44]	@ (80117f0 <__libc_init_array+0x40>)
 80117c2:	4c0c      	ldr	r4, [pc, #48]	@ (80117f4 <__libc_init_array+0x44>)
 80117c4:	f000 fba8 	bl	8011f18 <_init>
 80117c8:	1b64      	subs	r4, r4, r5
 80117ca:	10a4      	asrs	r4, r4, #2
 80117cc:	2600      	movs	r6, #0
 80117ce:	42a6      	cmp	r6, r4
 80117d0:	d105      	bne.n	80117de <__libc_init_array+0x2e>
 80117d2:	bd70      	pop	{r4, r5, r6, pc}
 80117d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80117d8:	4798      	blx	r3
 80117da:	3601      	adds	r6, #1
 80117dc:	e7ee      	b.n	80117bc <__libc_init_array+0xc>
 80117de:	f855 3b04 	ldr.w	r3, [r5], #4
 80117e2:	4798      	blx	r3
 80117e4:	3601      	adds	r6, #1
 80117e6:	e7f2      	b.n	80117ce <__libc_init_array+0x1e>
 80117e8:	080123dc 	.word	0x080123dc
 80117ec:	080123dc 	.word	0x080123dc
 80117f0:	080123dc 	.word	0x080123dc
 80117f4:	080123e4 	.word	0x080123e4

080117f8 <__retarget_lock_acquire_recursive>:
 80117f8:	4770      	bx	lr

080117fa <__retarget_lock_release_recursive>:
 80117fa:	4770      	bx	lr

080117fc <_free_r>:
 80117fc:	b538      	push	{r3, r4, r5, lr}
 80117fe:	4605      	mov	r5, r0
 8011800:	2900      	cmp	r1, #0
 8011802:	d041      	beq.n	8011888 <_free_r+0x8c>
 8011804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011808:	1f0c      	subs	r4, r1, #4
 801180a:	2b00      	cmp	r3, #0
 801180c:	bfb8      	it	lt
 801180e:	18e4      	addlt	r4, r4, r3
 8011810:	f7ff ff2c 	bl	801166c <__malloc_lock>
 8011814:	4a1d      	ldr	r2, [pc, #116]	@ (801188c <_free_r+0x90>)
 8011816:	6813      	ldr	r3, [r2, #0]
 8011818:	b933      	cbnz	r3, 8011828 <_free_r+0x2c>
 801181a:	6063      	str	r3, [r4, #4]
 801181c:	6014      	str	r4, [r2, #0]
 801181e:	4628      	mov	r0, r5
 8011820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011824:	f7ff bf28 	b.w	8011678 <__malloc_unlock>
 8011828:	42a3      	cmp	r3, r4
 801182a:	d908      	bls.n	801183e <_free_r+0x42>
 801182c:	6820      	ldr	r0, [r4, #0]
 801182e:	1821      	adds	r1, r4, r0
 8011830:	428b      	cmp	r3, r1
 8011832:	bf01      	itttt	eq
 8011834:	6819      	ldreq	r1, [r3, #0]
 8011836:	685b      	ldreq	r3, [r3, #4]
 8011838:	1809      	addeq	r1, r1, r0
 801183a:	6021      	streq	r1, [r4, #0]
 801183c:	e7ed      	b.n	801181a <_free_r+0x1e>
 801183e:	461a      	mov	r2, r3
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	b10b      	cbz	r3, 8011848 <_free_r+0x4c>
 8011844:	42a3      	cmp	r3, r4
 8011846:	d9fa      	bls.n	801183e <_free_r+0x42>
 8011848:	6811      	ldr	r1, [r2, #0]
 801184a:	1850      	adds	r0, r2, r1
 801184c:	42a0      	cmp	r0, r4
 801184e:	d10b      	bne.n	8011868 <_free_r+0x6c>
 8011850:	6820      	ldr	r0, [r4, #0]
 8011852:	4401      	add	r1, r0
 8011854:	1850      	adds	r0, r2, r1
 8011856:	4283      	cmp	r3, r0
 8011858:	6011      	str	r1, [r2, #0]
 801185a:	d1e0      	bne.n	801181e <_free_r+0x22>
 801185c:	6818      	ldr	r0, [r3, #0]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	6053      	str	r3, [r2, #4]
 8011862:	4408      	add	r0, r1
 8011864:	6010      	str	r0, [r2, #0]
 8011866:	e7da      	b.n	801181e <_free_r+0x22>
 8011868:	d902      	bls.n	8011870 <_free_r+0x74>
 801186a:	230c      	movs	r3, #12
 801186c:	602b      	str	r3, [r5, #0]
 801186e:	e7d6      	b.n	801181e <_free_r+0x22>
 8011870:	6820      	ldr	r0, [r4, #0]
 8011872:	1821      	adds	r1, r4, r0
 8011874:	428b      	cmp	r3, r1
 8011876:	bf04      	itt	eq
 8011878:	6819      	ldreq	r1, [r3, #0]
 801187a:	685b      	ldreq	r3, [r3, #4]
 801187c:	6063      	str	r3, [r4, #4]
 801187e:	bf04      	itt	eq
 8011880:	1809      	addeq	r1, r1, r0
 8011882:	6021      	streq	r1, [r4, #0]
 8011884:	6054      	str	r4, [r2, #4]
 8011886:	e7ca      	b.n	801181e <_free_r+0x22>
 8011888:	bd38      	pop	{r3, r4, r5, pc}
 801188a:	bf00      	nop
 801188c:	200015dc 	.word	0x200015dc

08011890 <__ssputs_r>:
 8011890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011894:	688e      	ldr	r6, [r1, #8]
 8011896:	461f      	mov	r7, r3
 8011898:	42be      	cmp	r6, r7
 801189a:	680b      	ldr	r3, [r1, #0]
 801189c:	4682      	mov	sl, r0
 801189e:	460c      	mov	r4, r1
 80118a0:	4690      	mov	r8, r2
 80118a2:	d82d      	bhi.n	8011900 <__ssputs_r+0x70>
 80118a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118ac:	d026      	beq.n	80118fc <__ssputs_r+0x6c>
 80118ae:	6965      	ldr	r5, [r4, #20]
 80118b0:	6909      	ldr	r1, [r1, #16]
 80118b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118b6:	eba3 0901 	sub.w	r9, r3, r1
 80118ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118be:	1c7b      	adds	r3, r7, #1
 80118c0:	444b      	add	r3, r9
 80118c2:	106d      	asrs	r5, r5, #1
 80118c4:	429d      	cmp	r5, r3
 80118c6:	bf38      	it	cc
 80118c8:	461d      	movcc	r5, r3
 80118ca:	0553      	lsls	r3, r2, #21
 80118cc:	d527      	bpl.n	801191e <__ssputs_r+0x8e>
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7ff fe4c 	bl	801156c <_malloc_r>
 80118d4:	4606      	mov	r6, r0
 80118d6:	b360      	cbz	r0, 8011932 <__ssputs_r+0xa2>
 80118d8:	6921      	ldr	r1, [r4, #16]
 80118da:	464a      	mov	r2, r9
 80118dc:	f000 fad8 	bl	8011e90 <memcpy>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80118e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118ea:	81a3      	strh	r3, [r4, #12]
 80118ec:	6126      	str	r6, [r4, #16]
 80118ee:	6165      	str	r5, [r4, #20]
 80118f0:	444e      	add	r6, r9
 80118f2:	eba5 0509 	sub.w	r5, r5, r9
 80118f6:	6026      	str	r6, [r4, #0]
 80118f8:	60a5      	str	r5, [r4, #8]
 80118fa:	463e      	mov	r6, r7
 80118fc:	42be      	cmp	r6, r7
 80118fe:	d900      	bls.n	8011902 <__ssputs_r+0x72>
 8011900:	463e      	mov	r6, r7
 8011902:	6820      	ldr	r0, [r4, #0]
 8011904:	4632      	mov	r2, r6
 8011906:	4641      	mov	r1, r8
 8011908:	f000 faa8 	bl	8011e5c <memmove>
 801190c:	68a3      	ldr	r3, [r4, #8]
 801190e:	1b9b      	subs	r3, r3, r6
 8011910:	60a3      	str	r3, [r4, #8]
 8011912:	6823      	ldr	r3, [r4, #0]
 8011914:	4433      	add	r3, r6
 8011916:	6023      	str	r3, [r4, #0]
 8011918:	2000      	movs	r0, #0
 801191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801191e:	462a      	mov	r2, r5
 8011920:	f000 fac4 	bl	8011eac <_realloc_r>
 8011924:	4606      	mov	r6, r0
 8011926:	2800      	cmp	r0, #0
 8011928:	d1e0      	bne.n	80118ec <__ssputs_r+0x5c>
 801192a:	6921      	ldr	r1, [r4, #16]
 801192c:	4650      	mov	r0, sl
 801192e:	f7ff ff65 	bl	80117fc <_free_r>
 8011932:	230c      	movs	r3, #12
 8011934:	f8ca 3000 	str.w	r3, [sl]
 8011938:	89a3      	ldrh	r3, [r4, #12]
 801193a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193e:	81a3      	strh	r3, [r4, #12]
 8011940:	f04f 30ff 	mov.w	r0, #4294967295
 8011944:	e7e9      	b.n	801191a <__ssputs_r+0x8a>
	...

08011948 <_svfiprintf_r>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	4698      	mov	r8, r3
 801194e:	898b      	ldrh	r3, [r1, #12]
 8011950:	061b      	lsls	r3, r3, #24
 8011952:	b09d      	sub	sp, #116	@ 0x74
 8011954:	4607      	mov	r7, r0
 8011956:	460d      	mov	r5, r1
 8011958:	4614      	mov	r4, r2
 801195a:	d510      	bpl.n	801197e <_svfiprintf_r+0x36>
 801195c:	690b      	ldr	r3, [r1, #16]
 801195e:	b973      	cbnz	r3, 801197e <_svfiprintf_r+0x36>
 8011960:	2140      	movs	r1, #64	@ 0x40
 8011962:	f7ff fe03 	bl	801156c <_malloc_r>
 8011966:	6028      	str	r0, [r5, #0]
 8011968:	6128      	str	r0, [r5, #16]
 801196a:	b930      	cbnz	r0, 801197a <_svfiprintf_r+0x32>
 801196c:	230c      	movs	r3, #12
 801196e:	603b      	str	r3, [r7, #0]
 8011970:	f04f 30ff 	mov.w	r0, #4294967295
 8011974:	b01d      	add	sp, #116	@ 0x74
 8011976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197a:	2340      	movs	r3, #64	@ 0x40
 801197c:	616b      	str	r3, [r5, #20]
 801197e:	2300      	movs	r3, #0
 8011980:	9309      	str	r3, [sp, #36]	@ 0x24
 8011982:	2320      	movs	r3, #32
 8011984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011988:	f8cd 800c 	str.w	r8, [sp, #12]
 801198c:	2330      	movs	r3, #48	@ 0x30
 801198e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b2c <_svfiprintf_r+0x1e4>
 8011992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011996:	f04f 0901 	mov.w	r9, #1
 801199a:	4623      	mov	r3, r4
 801199c:	469a      	mov	sl, r3
 801199e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119a2:	b10a      	cbz	r2, 80119a8 <_svfiprintf_r+0x60>
 80119a4:	2a25      	cmp	r2, #37	@ 0x25
 80119a6:	d1f9      	bne.n	801199c <_svfiprintf_r+0x54>
 80119a8:	ebba 0b04 	subs.w	fp, sl, r4
 80119ac:	d00b      	beq.n	80119c6 <_svfiprintf_r+0x7e>
 80119ae:	465b      	mov	r3, fp
 80119b0:	4622      	mov	r2, r4
 80119b2:	4629      	mov	r1, r5
 80119b4:	4638      	mov	r0, r7
 80119b6:	f7ff ff6b 	bl	8011890 <__ssputs_r>
 80119ba:	3001      	adds	r0, #1
 80119bc:	f000 80a7 	beq.w	8011b0e <_svfiprintf_r+0x1c6>
 80119c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119c2:	445a      	add	r2, fp
 80119c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80119c6:	f89a 3000 	ldrb.w	r3, [sl]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f000 809f 	beq.w	8011b0e <_svfiprintf_r+0x1c6>
 80119d0:	2300      	movs	r3, #0
 80119d2:	f04f 32ff 	mov.w	r2, #4294967295
 80119d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119da:	f10a 0a01 	add.w	sl, sl, #1
 80119de:	9304      	str	r3, [sp, #16]
 80119e0:	9307      	str	r3, [sp, #28]
 80119e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80119e8:	4654      	mov	r4, sl
 80119ea:	2205      	movs	r2, #5
 80119ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119f0:	484e      	ldr	r0, [pc, #312]	@ (8011b2c <_svfiprintf_r+0x1e4>)
 80119f2:	f7ee fc15 	bl	8000220 <memchr>
 80119f6:	9a04      	ldr	r2, [sp, #16]
 80119f8:	b9d8      	cbnz	r0, 8011a32 <_svfiprintf_r+0xea>
 80119fa:	06d0      	lsls	r0, r2, #27
 80119fc:	bf44      	itt	mi
 80119fe:	2320      	movmi	r3, #32
 8011a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a04:	0711      	lsls	r1, r2, #28
 8011a06:	bf44      	itt	mi
 8011a08:	232b      	movmi	r3, #43	@ 0x2b
 8011a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a14:	d015      	beq.n	8011a42 <_svfiprintf_r+0xfa>
 8011a16:	9a07      	ldr	r2, [sp, #28]
 8011a18:	4654      	mov	r4, sl
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	f04f 0c0a 	mov.w	ip, #10
 8011a20:	4621      	mov	r1, r4
 8011a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a26:	3b30      	subs	r3, #48	@ 0x30
 8011a28:	2b09      	cmp	r3, #9
 8011a2a:	d94b      	bls.n	8011ac4 <_svfiprintf_r+0x17c>
 8011a2c:	b1b0      	cbz	r0, 8011a5c <_svfiprintf_r+0x114>
 8011a2e:	9207      	str	r2, [sp, #28]
 8011a30:	e014      	b.n	8011a5c <_svfiprintf_r+0x114>
 8011a32:	eba0 0308 	sub.w	r3, r0, r8
 8011a36:	fa09 f303 	lsl.w	r3, r9, r3
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	9304      	str	r3, [sp, #16]
 8011a3e:	46a2      	mov	sl, r4
 8011a40:	e7d2      	b.n	80119e8 <_svfiprintf_r+0xa0>
 8011a42:	9b03      	ldr	r3, [sp, #12]
 8011a44:	1d19      	adds	r1, r3, #4
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	9103      	str	r1, [sp, #12]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	bfbb      	ittet	lt
 8011a4e:	425b      	neglt	r3, r3
 8011a50:	f042 0202 	orrlt.w	r2, r2, #2
 8011a54:	9307      	strge	r3, [sp, #28]
 8011a56:	9307      	strlt	r3, [sp, #28]
 8011a58:	bfb8      	it	lt
 8011a5a:	9204      	strlt	r2, [sp, #16]
 8011a5c:	7823      	ldrb	r3, [r4, #0]
 8011a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a60:	d10a      	bne.n	8011a78 <_svfiprintf_r+0x130>
 8011a62:	7863      	ldrb	r3, [r4, #1]
 8011a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a66:	d132      	bne.n	8011ace <_svfiprintf_r+0x186>
 8011a68:	9b03      	ldr	r3, [sp, #12]
 8011a6a:	1d1a      	adds	r2, r3, #4
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	9203      	str	r2, [sp, #12]
 8011a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a74:	3402      	adds	r4, #2
 8011a76:	9305      	str	r3, [sp, #20]
 8011a78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b3c <_svfiprintf_r+0x1f4>
 8011a7c:	7821      	ldrb	r1, [r4, #0]
 8011a7e:	2203      	movs	r2, #3
 8011a80:	4650      	mov	r0, sl
 8011a82:	f7ee fbcd 	bl	8000220 <memchr>
 8011a86:	b138      	cbz	r0, 8011a98 <_svfiprintf_r+0x150>
 8011a88:	9b04      	ldr	r3, [sp, #16]
 8011a8a:	eba0 000a 	sub.w	r0, r0, sl
 8011a8e:	2240      	movs	r2, #64	@ 0x40
 8011a90:	4082      	lsls	r2, r0
 8011a92:	4313      	orrs	r3, r2
 8011a94:	3401      	adds	r4, #1
 8011a96:	9304      	str	r3, [sp, #16]
 8011a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a9c:	4824      	ldr	r0, [pc, #144]	@ (8011b30 <_svfiprintf_r+0x1e8>)
 8011a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011aa2:	2206      	movs	r2, #6
 8011aa4:	f7ee fbbc 	bl	8000220 <memchr>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d036      	beq.n	8011b1a <_svfiprintf_r+0x1d2>
 8011aac:	4b21      	ldr	r3, [pc, #132]	@ (8011b34 <_svfiprintf_r+0x1ec>)
 8011aae:	bb1b      	cbnz	r3, 8011af8 <_svfiprintf_r+0x1b0>
 8011ab0:	9b03      	ldr	r3, [sp, #12]
 8011ab2:	3307      	adds	r3, #7
 8011ab4:	f023 0307 	bic.w	r3, r3, #7
 8011ab8:	3308      	adds	r3, #8
 8011aba:	9303      	str	r3, [sp, #12]
 8011abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011abe:	4433      	add	r3, r6
 8011ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ac2:	e76a      	b.n	801199a <_svfiprintf_r+0x52>
 8011ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ac8:	460c      	mov	r4, r1
 8011aca:	2001      	movs	r0, #1
 8011acc:	e7a8      	b.n	8011a20 <_svfiprintf_r+0xd8>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	3401      	adds	r4, #1
 8011ad2:	9305      	str	r3, [sp, #20]
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	f04f 0c0a 	mov.w	ip, #10
 8011ada:	4620      	mov	r0, r4
 8011adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ae0:	3a30      	subs	r2, #48	@ 0x30
 8011ae2:	2a09      	cmp	r2, #9
 8011ae4:	d903      	bls.n	8011aee <_svfiprintf_r+0x1a6>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0c6      	beq.n	8011a78 <_svfiprintf_r+0x130>
 8011aea:	9105      	str	r1, [sp, #20]
 8011aec:	e7c4      	b.n	8011a78 <_svfiprintf_r+0x130>
 8011aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8011af2:	4604      	mov	r4, r0
 8011af4:	2301      	movs	r3, #1
 8011af6:	e7f0      	b.n	8011ada <_svfiprintf_r+0x192>
 8011af8:	ab03      	add	r3, sp, #12
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	462a      	mov	r2, r5
 8011afe:	4b0e      	ldr	r3, [pc, #56]	@ (8011b38 <_svfiprintf_r+0x1f0>)
 8011b00:	a904      	add	r1, sp, #16
 8011b02:	4638      	mov	r0, r7
 8011b04:	f3af 8000 	nop.w
 8011b08:	1c42      	adds	r2, r0, #1
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	d1d6      	bne.n	8011abc <_svfiprintf_r+0x174>
 8011b0e:	89ab      	ldrh	r3, [r5, #12]
 8011b10:	065b      	lsls	r3, r3, #25
 8011b12:	f53f af2d 	bmi.w	8011970 <_svfiprintf_r+0x28>
 8011b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b18:	e72c      	b.n	8011974 <_svfiprintf_r+0x2c>
 8011b1a:	ab03      	add	r3, sp, #12
 8011b1c:	9300      	str	r3, [sp, #0]
 8011b1e:	462a      	mov	r2, r5
 8011b20:	4b05      	ldr	r3, [pc, #20]	@ (8011b38 <_svfiprintf_r+0x1f0>)
 8011b22:	a904      	add	r1, sp, #16
 8011b24:	4638      	mov	r0, r7
 8011b26:	f000 f879 	bl	8011c1c <_printf_i>
 8011b2a:	e7ed      	b.n	8011b08 <_svfiprintf_r+0x1c0>
 8011b2c:	080123a0 	.word	0x080123a0
 8011b30:	080123aa 	.word	0x080123aa
 8011b34:	00000000 	.word	0x00000000
 8011b38:	08011891 	.word	0x08011891
 8011b3c:	080123a6 	.word	0x080123a6

08011b40 <_printf_common>:
 8011b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b44:	4616      	mov	r6, r2
 8011b46:	4698      	mov	r8, r3
 8011b48:	688a      	ldr	r2, [r1, #8]
 8011b4a:	690b      	ldr	r3, [r1, #16]
 8011b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b50:	4293      	cmp	r3, r2
 8011b52:	bfb8      	it	lt
 8011b54:	4613      	movlt	r3, r2
 8011b56:	6033      	str	r3, [r6, #0]
 8011b58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b5c:	4607      	mov	r7, r0
 8011b5e:	460c      	mov	r4, r1
 8011b60:	b10a      	cbz	r2, 8011b66 <_printf_common+0x26>
 8011b62:	3301      	adds	r3, #1
 8011b64:	6033      	str	r3, [r6, #0]
 8011b66:	6823      	ldr	r3, [r4, #0]
 8011b68:	0699      	lsls	r1, r3, #26
 8011b6a:	bf42      	ittt	mi
 8011b6c:	6833      	ldrmi	r3, [r6, #0]
 8011b6e:	3302      	addmi	r3, #2
 8011b70:	6033      	strmi	r3, [r6, #0]
 8011b72:	6825      	ldr	r5, [r4, #0]
 8011b74:	f015 0506 	ands.w	r5, r5, #6
 8011b78:	d106      	bne.n	8011b88 <_printf_common+0x48>
 8011b7a:	f104 0a19 	add.w	sl, r4, #25
 8011b7e:	68e3      	ldr	r3, [r4, #12]
 8011b80:	6832      	ldr	r2, [r6, #0]
 8011b82:	1a9b      	subs	r3, r3, r2
 8011b84:	42ab      	cmp	r3, r5
 8011b86:	dc26      	bgt.n	8011bd6 <_printf_common+0x96>
 8011b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011b8c:	6822      	ldr	r2, [r4, #0]
 8011b8e:	3b00      	subs	r3, #0
 8011b90:	bf18      	it	ne
 8011b92:	2301      	movne	r3, #1
 8011b94:	0692      	lsls	r2, r2, #26
 8011b96:	d42b      	bmi.n	8011bf0 <_printf_common+0xb0>
 8011b98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011b9c:	4641      	mov	r1, r8
 8011b9e:	4638      	mov	r0, r7
 8011ba0:	47c8      	blx	r9
 8011ba2:	3001      	adds	r0, #1
 8011ba4:	d01e      	beq.n	8011be4 <_printf_common+0xa4>
 8011ba6:	6823      	ldr	r3, [r4, #0]
 8011ba8:	6922      	ldr	r2, [r4, #16]
 8011baa:	f003 0306 	and.w	r3, r3, #6
 8011bae:	2b04      	cmp	r3, #4
 8011bb0:	bf02      	ittt	eq
 8011bb2:	68e5      	ldreq	r5, [r4, #12]
 8011bb4:	6833      	ldreq	r3, [r6, #0]
 8011bb6:	1aed      	subeq	r5, r5, r3
 8011bb8:	68a3      	ldr	r3, [r4, #8]
 8011bba:	bf0c      	ite	eq
 8011bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bc0:	2500      	movne	r5, #0
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	bfc4      	itt	gt
 8011bc6:	1a9b      	subgt	r3, r3, r2
 8011bc8:	18ed      	addgt	r5, r5, r3
 8011bca:	2600      	movs	r6, #0
 8011bcc:	341a      	adds	r4, #26
 8011bce:	42b5      	cmp	r5, r6
 8011bd0:	d11a      	bne.n	8011c08 <_printf_common+0xc8>
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	e008      	b.n	8011be8 <_printf_common+0xa8>
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	4652      	mov	r2, sl
 8011bda:	4641      	mov	r1, r8
 8011bdc:	4638      	mov	r0, r7
 8011bde:	47c8      	blx	r9
 8011be0:	3001      	adds	r0, #1
 8011be2:	d103      	bne.n	8011bec <_printf_common+0xac>
 8011be4:	f04f 30ff 	mov.w	r0, #4294967295
 8011be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bec:	3501      	adds	r5, #1
 8011bee:	e7c6      	b.n	8011b7e <_printf_common+0x3e>
 8011bf0:	18e1      	adds	r1, r4, r3
 8011bf2:	1c5a      	adds	r2, r3, #1
 8011bf4:	2030      	movs	r0, #48	@ 0x30
 8011bf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011bfa:	4422      	add	r2, r4
 8011bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011c04:	3302      	adds	r3, #2
 8011c06:	e7c7      	b.n	8011b98 <_printf_common+0x58>
 8011c08:	2301      	movs	r3, #1
 8011c0a:	4622      	mov	r2, r4
 8011c0c:	4641      	mov	r1, r8
 8011c0e:	4638      	mov	r0, r7
 8011c10:	47c8      	blx	r9
 8011c12:	3001      	adds	r0, #1
 8011c14:	d0e6      	beq.n	8011be4 <_printf_common+0xa4>
 8011c16:	3601      	adds	r6, #1
 8011c18:	e7d9      	b.n	8011bce <_printf_common+0x8e>
	...

08011c1c <_printf_i>:
 8011c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c20:	7e0f      	ldrb	r7, [r1, #24]
 8011c22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011c24:	2f78      	cmp	r7, #120	@ 0x78
 8011c26:	4691      	mov	r9, r2
 8011c28:	4680      	mov	r8, r0
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	469a      	mov	sl, r3
 8011c2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011c32:	d807      	bhi.n	8011c44 <_printf_i+0x28>
 8011c34:	2f62      	cmp	r7, #98	@ 0x62
 8011c36:	d80a      	bhi.n	8011c4e <_printf_i+0x32>
 8011c38:	2f00      	cmp	r7, #0
 8011c3a:	f000 80d2 	beq.w	8011de2 <_printf_i+0x1c6>
 8011c3e:	2f58      	cmp	r7, #88	@ 0x58
 8011c40:	f000 80b9 	beq.w	8011db6 <_printf_i+0x19a>
 8011c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c4c:	e03a      	b.n	8011cc4 <_printf_i+0xa8>
 8011c4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c52:	2b15      	cmp	r3, #21
 8011c54:	d8f6      	bhi.n	8011c44 <_printf_i+0x28>
 8011c56:	a101      	add	r1, pc, #4	@ (adr r1, 8011c5c <_printf_i+0x40>)
 8011c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c5c:	08011cb5 	.word	0x08011cb5
 8011c60:	08011cc9 	.word	0x08011cc9
 8011c64:	08011c45 	.word	0x08011c45
 8011c68:	08011c45 	.word	0x08011c45
 8011c6c:	08011c45 	.word	0x08011c45
 8011c70:	08011c45 	.word	0x08011c45
 8011c74:	08011cc9 	.word	0x08011cc9
 8011c78:	08011c45 	.word	0x08011c45
 8011c7c:	08011c45 	.word	0x08011c45
 8011c80:	08011c45 	.word	0x08011c45
 8011c84:	08011c45 	.word	0x08011c45
 8011c88:	08011dc9 	.word	0x08011dc9
 8011c8c:	08011cf3 	.word	0x08011cf3
 8011c90:	08011d83 	.word	0x08011d83
 8011c94:	08011c45 	.word	0x08011c45
 8011c98:	08011c45 	.word	0x08011c45
 8011c9c:	08011deb 	.word	0x08011deb
 8011ca0:	08011c45 	.word	0x08011c45
 8011ca4:	08011cf3 	.word	0x08011cf3
 8011ca8:	08011c45 	.word	0x08011c45
 8011cac:	08011c45 	.word	0x08011c45
 8011cb0:	08011d8b 	.word	0x08011d8b
 8011cb4:	6833      	ldr	r3, [r6, #0]
 8011cb6:	1d1a      	adds	r2, r3, #4
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	6032      	str	r2, [r6, #0]
 8011cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011cc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e09d      	b.n	8011e04 <_printf_i+0x1e8>
 8011cc8:	6833      	ldr	r3, [r6, #0]
 8011cca:	6820      	ldr	r0, [r4, #0]
 8011ccc:	1d19      	adds	r1, r3, #4
 8011cce:	6031      	str	r1, [r6, #0]
 8011cd0:	0606      	lsls	r6, r0, #24
 8011cd2:	d501      	bpl.n	8011cd8 <_printf_i+0xbc>
 8011cd4:	681d      	ldr	r5, [r3, #0]
 8011cd6:	e003      	b.n	8011ce0 <_printf_i+0xc4>
 8011cd8:	0645      	lsls	r5, r0, #25
 8011cda:	d5fb      	bpl.n	8011cd4 <_printf_i+0xb8>
 8011cdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ce0:	2d00      	cmp	r5, #0
 8011ce2:	da03      	bge.n	8011cec <_printf_i+0xd0>
 8011ce4:	232d      	movs	r3, #45	@ 0x2d
 8011ce6:	426d      	negs	r5, r5
 8011ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cec:	4859      	ldr	r0, [pc, #356]	@ (8011e54 <_printf_i+0x238>)
 8011cee:	230a      	movs	r3, #10
 8011cf0:	e011      	b.n	8011d16 <_printf_i+0xfa>
 8011cf2:	6821      	ldr	r1, [r4, #0]
 8011cf4:	6833      	ldr	r3, [r6, #0]
 8011cf6:	0608      	lsls	r0, r1, #24
 8011cf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8011cfc:	d402      	bmi.n	8011d04 <_printf_i+0xe8>
 8011cfe:	0649      	lsls	r1, r1, #25
 8011d00:	bf48      	it	mi
 8011d02:	b2ad      	uxthmi	r5, r5
 8011d04:	2f6f      	cmp	r7, #111	@ 0x6f
 8011d06:	4853      	ldr	r0, [pc, #332]	@ (8011e54 <_printf_i+0x238>)
 8011d08:	6033      	str	r3, [r6, #0]
 8011d0a:	bf14      	ite	ne
 8011d0c:	230a      	movne	r3, #10
 8011d0e:	2308      	moveq	r3, #8
 8011d10:	2100      	movs	r1, #0
 8011d12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011d16:	6866      	ldr	r6, [r4, #4]
 8011d18:	60a6      	str	r6, [r4, #8]
 8011d1a:	2e00      	cmp	r6, #0
 8011d1c:	bfa2      	ittt	ge
 8011d1e:	6821      	ldrge	r1, [r4, #0]
 8011d20:	f021 0104 	bicge.w	r1, r1, #4
 8011d24:	6021      	strge	r1, [r4, #0]
 8011d26:	b90d      	cbnz	r5, 8011d2c <_printf_i+0x110>
 8011d28:	2e00      	cmp	r6, #0
 8011d2a:	d04b      	beq.n	8011dc4 <_printf_i+0x1a8>
 8011d2c:	4616      	mov	r6, r2
 8011d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d32:	fb03 5711 	mls	r7, r3, r1, r5
 8011d36:	5dc7      	ldrb	r7, [r0, r7]
 8011d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d3c:	462f      	mov	r7, r5
 8011d3e:	42bb      	cmp	r3, r7
 8011d40:	460d      	mov	r5, r1
 8011d42:	d9f4      	bls.n	8011d2e <_printf_i+0x112>
 8011d44:	2b08      	cmp	r3, #8
 8011d46:	d10b      	bne.n	8011d60 <_printf_i+0x144>
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	07df      	lsls	r7, r3, #31
 8011d4c:	d508      	bpl.n	8011d60 <_printf_i+0x144>
 8011d4e:	6923      	ldr	r3, [r4, #16]
 8011d50:	6861      	ldr	r1, [r4, #4]
 8011d52:	4299      	cmp	r1, r3
 8011d54:	bfde      	ittt	le
 8011d56:	2330      	movle	r3, #48	@ 0x30
 8011d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d60:	1b92      	subs	r2, r2, r6
 8011d62:	6122      	str	r2, [r4, #16]
 8011d64:	f8cd a000 	str.w	sl, [sp]
 8011d68:	464b      	mov	r3, r9
 8011d6a:	aa03      	add	r2, sp, #12
 8011d6c:	4621      	mov	r1, r4
 8011d6e:	4640      	mov	r0, r8
 8011d70:	f7ff fee6 	bl	8011b40 <_printf_common>
 8011d74:	3001      	adds	r0, #1
 8011d76:	d14a      	bne.n	8011e0e <_printf_i+0x1f2>
 8011d78:	f04f 30ff 	mov.w	r0, #4294967295
 8011d7c:	b004      	add	sp, #16
 8011d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d82:	6823      	ldr	r3, [r4, #0]
 8011d84:	f043 0320 	orr.w	r3, r3, #32
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	4833      	ldr	r0, [pc, #204]	@ (8011e58 <_printf_i+0x23c>)
 8011d8c:	2778      	movs	r7, #120	@ 0x78
 8011d8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	6831      	ldr	r1, [r6, #0]
 8011d96:	061f      	lsls	r7, r3, #24
 8011d98:	f851 5b04 	ldr.w	r5, [r1], #4
 8011d9c:	d402      	bmi.n	8011da4 <_printf_i+0x188>
 8011d9e:	065f      	lsls	r7, r3, #25
 8011da0:	bf48      	it	mi
 8011da2:	b2ad      	uxthmi	r5, r5
 8011da4:	6031      	str	r1, [r6, #0]
 8011da6:	07d9      	lsls	r1, r3, #31
 8011da8:	bf44      	itt	mi
 8011daa:	f043 0320 	orrmi.w	r3, r3, #32
 8011dae:	6023      	strmi	r3, [r4, #0]
 8011db0:	b11d      	cbz	r5, 8011dba <_printf_i+0x19e>
 8011db2:	2310      	movs	r3, #16
 8011db4:	e7ac      	b.n	8011d10 <_printf_i+0xf4>
 8011db6:	4827      	ldr	r0, [pc, #156]	@ (8011e54 <_printf_i+0x238>)
 8011db8:	e7e9      	b.n	8011d8e <_printf_i+0x172>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	f023 0320 	bic.w	r3, r3, #32
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	e7f6      	b.n	8011db2 <_printf_i+0x196>
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	e7bd      	b.n	8011d44 <_printf_i+0x128>
 8011dc8:	6833      	ldr	r3, [r6, #0]
 8011dca:	6825      	ldr	r5, [r4, #0]
 8011dcc:	6961      	ldr	r1, [r4, #20]
 8011dce:	1d18      	adds	r0, r3, #4
 8011dd0:	6030      	str	r0, [r6, #0]
 8011dd2:	062e      	lsls	r6, r5, #24
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	d501      	bpl.n	8011ddc <_printf_i+0x1c0>
 8011dd8:	6019      	str	r1, [r3, #0]
 8011dda:	e002      	b.n	8011de2 <_printf_i+0x1c6>
 8011ddc:	0668      	lsls	r0, r5, #25
 8011dde:	d5fb      	bpl.n	8011dd8 <_printf_i+0x1bc>
 8011de0:	8019      	strh	r1, [r3, #0]
 8011de2:	2300      	movs	r3, #0
 8011de4:	6123      	str	r3, [r4, #16]
 8011de6:	4616      	mov	r6, r2
 8011de8:	e7bc      	b.n	8011d64 <_printf_i+0x148>
 8011dea:	6833      	ldr	r3, [r6, #0]
 8011dec:	1d1a      	adds	r2, r3, #4
 8011dee:	6032      	str	r2, [r6, #0]
 8011df0:	681e      	ldr	r6, [r3, #0]
 8011df2:	6862      	ldr	r2, [r4, #4]
 8011df4:	2100      	movs	r1, #0
 8011df6:	4630      	mov	r0, r6
 8011df8:	f7ee fa12 	bl	8000220 <memchr>
 8011dfc:	b108      	cbz	r0, 8011e02 <_printf_i+0x1e6>
 8011dfe:	1b80      	subs	r0, r0, r6
 8011e00:	6060      	str	r0, [r4, #4]
 8011e02:	6863      	ldr	r3, [r4, #4]
 8011e04:	6123      	str	r3, [r4, #16]
 8011e06:	2300      	movs	r3, #0
 8011e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e0c:	e7aa      	b.n	8011d64 <_printf_i+0x148>
 8011e0e:	6923      	ldr	r3, [r4, #16]
 8011e10:	4632      	mov	r2, r6
 8011e12:	4649      	mov	r1, r9
 8011e14:	4640      	mov	r0, r8
 8011e16:	47d0      	blx	sl
 8011e18:	3001      	adds	r0, #1
 8011e1a:	d0ad      	beq.n	8011d78 <_printf_i+0x15c>
 8011e1c:	6823      	ldr	r3, [r4, #0]
 8011e1e:	079b      	lsls	r3, r3, #30
 8011e20:	d413      	bmi.n	8011e4a <_printf_i+0x22e>
 8011e22:	68e0      	ldr	r0, [r4, #12]
 8011e24:	9b03      	ldr	r3, [sp, #12]
 8011e26:	4298      	cmp	r0, r3
 8011e28:	bfb8      	it	lt
 8011e2a:	4618      	movlt	r0, r3
 8011e2c:	e7a6      	b.n	8011d7c <_printf_i+0x160>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	4632      	mov	r2, r6
 8011e32:	4649      	mov	r1, r9
 8011e34:	4640      	mov	r0, r8
 8011e36:	47d0      	blx	sl
 8011e38:	3001      	adds	r0, #1
 8011e3a:	d09d      	beq.n	8011d78 <_printf_i+0x15c>
 8011e3c:	3501      	adds	r5, #1
 8011e3e:	68e3      	ldr	r3, [r4, #12]
 8011e40:	9903      	ldr	r1, [sp, #12]
 8011e42:	1a5b      	subs	r3, r3, r1
 8011e44:	42ab      	cmp	r3, r5
 8011e46:	dcf2      	bgt.n	8011e2e <_printf_i+0x212>
 8011e48:	e7eb      	b.n	8011e22 <_printf_i+0x206>
 8011e4a:	2500      	movs	r5, #0
 8011e4c:	f104 0619 	add.w	r6, r4, #25
 8011e50:	e7f5      	b.n	8011e3e <_printf_i+0x222>
 8011e52:	bf00      	nop
 8011e54:	080123b1 	.word	0x080123b1
 8011e58:	080123c2 	.word	0x080123c2

08011e5c <memmove>:
 8011e5c:	4288      	cmp	r0, r1
 8011e5e:	b510      	push	{r4, lr}
 8011e60:	eb01 0402 	add.w	r4, r1, r2
 8011e64:	d902      	bls.n	8011e6c <memmove+0x10>
 8011e66:	4284      	cmp	r4, r0
 8011e68:	4623      	mov	r3, r4
 8011e6a:	d807      	bhi.n	8011e7c <memmove+0x20>
 8011e6c:	1e43      	subs	r3, r0, #1
 8011e6e:	42a1      	cmp	r1, r4
 8011e70:	d008      	beq.n	8011e84 <memmove+0x28>
 8011e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e7a:	e7f8      	b.n	8011e6e <memmove+0x12>
 8011e7c:	4402      	add	r2, r0
 8011e7e:	4601      	mov	r1, r0
 8011e80:	428a      	cmp	r2, r1
 8011e82:	d100      	bne.n	8011e86 <memmove+0x2a>
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e8e:	e7f7      	b.n	8011e80 <memmove+0x24>

08011e90 <memcpy>:
 8011e90:	440a      	add	r2, r1
 8011e92:	4291      	cmp	r1, r2
 8011e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e98:	d100      	bne.n	8011e9c <memcpy+0xc>
 8011e9a:	4770      	bx	lr
 8011e9c:	b510      	push	{r4, lr}
 8011e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ea6:	4291      	cmp	r1, r2
 8011ea8:	d1f9      	bne.n	8011e9e <memcpy+0xe>
 8011eaa:	bd10      	pop	{r4, pc}

08011eac <_realloc_r>:
 8011eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb0:	4680      	mov	r8, r0
 8011eb2:	4615      	mov	r5, r2
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	b921      	cbnz	r1, 8011ec2 <_realloc_r+0x16>
 8011eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	f7ff bb55 	b.w	801156c <_malloc_r>
 8011ec2:	b92a      	cbnz	r2, 8011ed0 <_realloc_r+0x24>
 8011ec4:	f7ff fc9a 	bl	80117fc <_free_r>
 8011ec8:	2400      	movs	r4, #0
 8011eca:	4620      	mov	r0, r4
 8011ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed0:	f000 f81a 	bl	8011f08 <_malloc_usable_size_r>
 8011ed4:	4285      	cmp	r5, r0
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	d802      	bhi.n	8011ee0 <_realloc_r+0x34>
 8011eda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011ede:	d8f4      	bhi.n	8011eca <_realloc_r+0x1e>
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	4640      	mov	r0, r8
 8011ee4:	f7ff fb42 	bl	801156c <_malloc_r>
 8011ee8:	4607      	mov	r7, r0
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d0ec      	beq.n	8011ec8 <_realloc_r+0x1c>
 8011eee:	42b5      	cmp	r5, r6
 8011ef0:	462a      	mov	r2, r5
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	bf28      	it	cs
 8011ef6:	4632      	movcs	r2, r6
 8011ef8:	f7ff ffca 	bl	8011e90 <memcpy>
 8011efc:	4621      	mov	r1, r4
 8011efe:	4640      	mov	r0, r8
 8011f00:	f7ff fc7c 	bl	80117fc <_free_r>
 8011f04:	463c      	mov	r4, r7
 8011f06:	e7e0      	b.n	8011eca <_realloc_r+0x1e>

08011f08 <_malloc_usable_size_r>:
 8011f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f0c:	1f18      	subs	r0, r3, #4
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	bfbc      	itt	lt
 8011f12:	580b      	ldrlt	r3, [r1, r0]
 8011f14:	18c0      	addlt	r0, r0, r3
 8011f16:	4770      	bx	lr

08011f18 <_init>:
 8011f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1a:	bf00      	nop
 8011f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f1e:	bc08      	pop	{r3}
 8011f20:	469e      	mov	lr, r3
 8011f22:	4770      	bx	lr

08011f24 <_fini>:
 8011f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f26:	bf00      	nop
 8011f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f2a:	bc08      	pop	{r3}
 8011f2c:	469e      	mov	lr, r3
 8011f2e:	4770      	bx	lr
