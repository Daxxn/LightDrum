
LightDrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000070  080069d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080069d0  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e981  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd5  00000000  00000000  0003ea21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  000426f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00043d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027618  00000000  00000000  00045218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be95  00000000  00000000  0006c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db0dd  00000000  00000000  000886c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001637a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006454  00000000  00000000  001637f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006810 	.word	0x08006810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006810 	.word	0x08006810

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_ZN6ButtonC1Ev>:
 */

#include "Button.h"


Button::Button()
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <_ZN6ButtonC1Ev+0x1c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
{
}
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	080068c8 	.word	0x080068c8

080005e4 <_ZN6ButtonD1Ev>:

Button::~Button()
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <_ZN6ButtonD1Ev+0x1c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
{
}
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	080068c8 	.word	0x080068c8

08000604 <_ZN6ButtonD0Ev>:
Button::~Button()
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
}
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ffe9 	bl	80005e4 <_ZN6ButtonD1Ev>
 8000612:	2110      	movs	r1, #16
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f005 fbbb 	bl	8005d90 <_ZdlPvj>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZN3PinC1Ev>:
#if __cplusplus


struct Pin
{
	Pin() {};
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef *port, uint16_t pin)
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	4613      	mov	r3, r2
 8000646:	80fb      	strh	r3, [r7, #6]
	{
		this->port = port;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	88fa      	ldrh	r2, [r7, #6]
 8000652:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2200      	movs	r2, #0
 8000658:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	68b8      	ldr	r0, [r7, #8]
 8000662:	f002 fe5b 	bl	800331c <HAL_GPIO_WritePin>
	};
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <_ZN9ShiftRegsC1Ev>:
 *
 */
class ShiftRegs
{
public:
	ShiftRegs() {};
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <_ZN9ShiftRegsC1Ev+0x2c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3308      	adds	r3, #8
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffce 	bl	8000624 <_ZN3PinC1Ev>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3310      	adds	r3, #16
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffc9 	bl	8000624 <_ZN3PinC1Ev>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	080068ec 	.word	0x080068ec

080006a0 <_ZN9ShiftRegsaSERKS_>:
class ShiftRegs
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	3308      	adds	r3, #8
 80006b8:	3208      	adds	r2, #8
 80006ba:	6811      	ldr	r1, [r2, #0]
 80006bc:	6019      	str	r1, [r3, #0]
 80006be:	8891      	ldrh	r1, [r2, #4]
 80006c0:	7992      	ldrb	r2, [r2, #6]
 80006c2:	8099      	strh	r1, [r3, #4]
 80006c4:	719a      	strb	r2, [r3, #6]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	3310      	adds	r3, #16
 80006cc:	3210      	adds	r2, #16
 80006ce:	6811      	ldr	r1, [r2, #0]
 80006d0:	6019      	str	r1, [r3, #0]
 80006d2:	8891      	ldrh	r1, [r2, #4]
 80006d4:	7992      	ldrb	r2, [r2, #6]
 80006d6:	8099      	strh	r1, [r3, #4]
 80006d8:	719a      	strb	r2, [r3, #6]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	8b1a      	ldrh	r2, [r3, #24]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	831a      	strh	r2, [r3, #24]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	69da      	ldr	r2, [r3, #28]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	6a1a      	ldr	r2, [r3, #32]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	621a      	str	r2, [r3, #32]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <Init>:
		TIM_HandleTypeDef *in_htim2,
		TIM_HandleTypeDef *in_htim3,
		UART_HandleTypeDef *in_huart1,
		UART_HandleTypeDef *in_huart2
	)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af02      	add	r7, sp, #8
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]

	Pin graphLE = Pin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000716:	4928      	ldr	r1, [pc, #160]	; (80007b8 <Init+0xb8>)
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff8e 	bl	800063a <_ZN3PinC1EP12GPIO_TypeDeft>
	Pin graphOE = Pin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000726:	4924      	ldr	r1, [pc, #144]	; (80007b8 <Init+0xb8>)
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff86 	bl	800063a <_ZN3PinC1EP12GPIO_TypeDeft>

	currentADCHandle = in_hadc1;
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <Init+0xbc>)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6013      	str	r3, [r2, #0]
	currentADCMemHandle = in_hdma_adc1;
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <Init+0xc0>)
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	6013      	str	r3, [r2, #0]
	i2cHandle = in_hi2c1;
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <Init+0xc4>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6013      	str	r3, [r2, #0]
	graphHandle = in_hspi2;
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <Init+0xc8>)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	6013      	str	r3, [r2, #0]
	spiHandle = in_hspi5;
 8000746:	4a21      	ldr	r2, [pc, #132]	; (80007cc <Init+0xcc>)
 8000748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800074a:	6013      	str	r3, [r2, #0]
	pwm2Handle = in_htim2;
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <Init+0xd0>)
 800074e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000750:	6013      	str	r3, [r2, #0]
	pwm3Handle = in_htim3;
 8000752:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <Init+0xd4>)
 8000754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000756:	6013      	str	r3, [r2, #0]
	screenHandle = in_huart1;
 8000758:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <Init+0xd8>)
 800075a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800075c:	6013      	str	r3, [r2, #0]
	midiHandle = in_huart2;
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <Init+0xdc>)
 8000760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000762:	6013      	str	r3, [r2, #0]

	screen.Startup(screenHandle);
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <Init+0xd8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	481d      	ldr	r0, [pc, #116]	; (80007e0 <Init+0xe0>)
 800076c:	f000 f9ce 	bl	8000b0c <_ZN7Nextion7StartupEP20__UART_HandleTypeDef>
	shiftReg = ShiftRegs(graphHandle, graphOE, graphLE);
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <Init+0xc8>)
 8000772:	681d      	ldr	r5, [r3, #0]
 8000774:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000778:	466a      	mov	r2, sp
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000782:	e882 0003 	stmia.w	r2, {r0, r1}
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	cb0c      	ldmia	r3, {r2, r3}
 800078c:	4629      	mov	r1, r5
 800078e:	4620      	mov	r0, r4
 8000790:	f000 fa88 	bl	8000ca4 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>
 8000794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <Init+0xe4>)
 800079c:	f7ff ff80 	bl	80006a0 <_ZN9ShiftRegsaSERKS_>
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fabf 	bl	8000d28 <_ZN9ShiftRegsD1Ev>

	shiftReg.Init();
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <Init+0xe4>)
 80007ac:	f000 fae4 	bl	8000d78 <_ZN9ShiftRegs4InitEv>
}
 80007b0:	bf00      	nop
 80007b2:	3748      	adds	r7, #72	; 0x48
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	20000090 	.word	0x20000090
 80007c4:	20000094 	.word	0x20000094
 80007c8:	20000098 	.word	0x20000098
 80007cc:	2000009c 	.word	0x2000009c
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	200000a4 	.word	0x200000a4
 80007d8:	200000a8 	.word	0x200000a8
 80007dc:	200000ac 	.word	0x200000ac
 80007e0:	200000d4 	.word	0x200000d4
 80007e4:	200000b0 	.word	0x200000b0

080007e8 <InitTest>:

void InitTest()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	shiftReg.IndicatorTest();
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <InitTest+0x10>)
 80007ee:	f000 fad5 	bl	8000d9c <_ZN9ShiftRegs13IndicatorTestEv>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000b0 	.word	0x200000b0

080007fc <Main>:
/**
  * @brief C++ Main Loop Function
  * @retval None
  */
void Main()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0


	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_2, 10000);
 8000800:	4b45      	ldr	r3, [pc, #276]	; (8000918 <Main+0x11c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f242 7210 	movw	r2, #10000	; 0x2710
 800080a:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(50);
 800080c:	2032      	movs	r0, #50	; 0x32
 800080e:	f001 fd13 	bl	8002238 <HAL_Delay>
	screen.SetProgressBar(0, count);
 8000812:	4b42      	ldr	r3, [pc, #264]	; (800091c <Main+0x120>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	4841      	ldr	r0, [pc, #260]	; (8000920 <Main+0x124>)
 800081c:	f000 fa26 	bl	8000c6c <_ZN7Nextion14SetProgressBarEhh>
	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_2, 20000);
 8000820:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <Main+0x11c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f644 6220 	movw	r2, #20000	; 0x4e20
 800082a:	639a      	str	r2, [r3, #56]	; 0x38
	screen.SetNumber(0, count);
 800082c:	4b3b      	ldr	r3, [pc, #236]	; (800091c <Main+0x120>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	483a      	ldr	r0, [pc, #232]	; (8000920 <Main+0x124>)
 8000836:	f000 f9ff 	bl	8000c38 <_ZN7Nextion9SetNumberEhi>
	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_2, 30000);
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <Main+0x11c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f247 5230 	movw	r2, #30000	; 0x7530
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(50);
 8000846:	2032      	movs	r0, #50	; 0x32
 8000848:	f001 fcf6 	bl	8002238 <HAL_Delay>
//	screen.SetPage(1);
	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_2, 40000);
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <Main+0x11c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
//	{
//		uint8_t val = (uint8_t)round(sin(i) * 40 + 127);
//		screen.UpdateGraph(1, 0, val);
//		screen.SetNumber(0, val);
//	}
	HAL_Delay(100);
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f001 fced 	bl	8002238 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_2, 50000);
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <Main+0x11c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000868:	639a      	str	r2, [r3, #56]	; 0x38
//	HAL_Delay(250);
//	screen.HomePage();
	__HAL_TIM_SET_COMPARE(pwm3Handle, TIM_CHANNEL_2, 60000);
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <Main+0x11c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000874:	639a      	str	r2, [r3, #56]	; 0x38
	count++;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <Main+0x120>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <Main+0x120>)
 8000880:	701a      	strb	r2, [r3, #0]
	if (count > 100)
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <Main+0x120>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b64      	cmp	r3, #100	; 0x64
 8000888:	d902      	bls.n	8000890 <Main+0x94>
	{
		count = 0;
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <Main+0x120>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
	}

	static GPIO_PinState menuLeft = HAL_GPIO_ReadPin(MENU_LEFT_GPIO_Port, MENU_LEFT_Pin);
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <Main+0x128>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f3bf 8f5b 	dmb	ish
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf0c      	ite	eq
 80008a2:	2301      	moveq	r3, #1
 80008a4:	2300      	movne	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d016      	beq.n	80008da <Main+0xde>
 80008ac:	481d      	ldr	r0, [pc, #116]	; (8000924 <Main+0x128>)
 80008ae:	f005 fa73 	bl	8005d98 <__cxa_guard_acquire>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00b      	beq.n	80008da <Main+0xde>
 80008c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <Main+0x12c>)
 80008c8:	f002 fd10 	bl	80032ec <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <Main+0x130>)
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <Main+0x128>)
 80008d6:	f005 fa6b 	bl	8005db0 <__cxa_guard_release>
	if (menuLeft != menuLeftPrev)
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <Main+0x130>)
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <Main+0x134>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d00e      	beq.n	8000904 <Main+0x108>
	{
		if (menuLeft == GPIO_PIN_SET)
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <Main+0x130>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d105      	bne.n	80008fa <Main+0xfe>
		{
			shiftReg.SetValue(ON, MENU_LEFT_IND);
 80008ee:	2204      	movs	r2, #4
 80008f0:	2101      	movs	r1, #1
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <Main+0x138>)
 80008f4:	f000 fa78 	bl	8000de8 <_ZN9ShiftRegs8SetValueE8LEDStatej>
 80008f8:	e004      	b.n	8000904 <Main+0x108>
		}
		else
		{
			shiftReg.SetValue(OFF, MENU_LEFT_IND);
 80008fa:	2204      	movs	r2, #4
 80008fc:	2100      	movs	r1, #0
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <Main+0x138>)
 8000900:	f000 fa72 	bl	8000de8 <_ZN9ShiftRegs8SetValueE8LEDStatej>
		}
	}
	menuLeftPrev = menuLeft;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <Main+0x130>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <Main+0x134>)
 800090a:	701a      	strb	r2, [r3, #0]
	shiftReg.Update();
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <Main+0x138>)
 800090e:	f000 fad6 	bl	8000ebe <_ZN9ShiftRegs6UpdateEv>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000a4 	.word	0x200000a4
 800091c:	2000010c 	.word	0x2000010c
 8000920:	200000d4 	.word	0x200000d4
 8000924:	20000110 	.word	0x20000110
 8000928:	40020c00 	.word	0x40020c00
 800092c:	2000010e 	.word	0x2000010e
 8000930:	2000010d 	.word	0x2000010d
 8000934:	200000b0 	.word	0x200000b0

08000938 <MenuUpInterruptCallback>:

void MenuUpInterruptCallback()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_UP_IND);
 800093c:	2103      	movs	r1, #3
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <MenuUpInterruptCallback+0x10>)
 8000940:	f000 fa90 	bl	8000e64 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000b0 	.word	0x200000b0

0800094c <MenuDownInterruptCallback>:
void MenuDownInterruptCallback()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_DOWN_IND);
 8000950:	2102      	movs	r1, #2
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <MenuDownInterruptCallback+0x10>)
 8000954:	f000 fa86 	bl	8000e64 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000b0 	.word	0x200000b0

08000960 <MenuRightInterruptCallback>:
//void MenuLeftInterruptCallback()
//{
//
//}
void MenuRightInterruptCallback()
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_RIGHT_IND);
 8000964:	2105      	movs	r1, #5
 8000966:	4802      	ldr	r0, [pc, #8]	; (8000970 <MenuRightInterruptCallback+0x10>)
 8000968:	f000 fa7c 	bl	8000e64 <_ZN9ShiftRegs11ToggleValueEj>
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000b0 	.word	0x200000b0

08000974 <MenuActInterruptCallback>:
void MenuActInterruptCallback()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(8);
 8000978:	2108      	movs	r1, #8
 800097a:	4802      	ldr	r0, [pc, #8]	; (8000984 <MenuActInterruptCallback+0x10>)
 800097c:	f000 fa72 	bl	8000e64 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000b0 	.word	0x200000b0

08000988 <MenuBackInterruptCallback>:
void MenuBackInterruptCallback()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	shiftReg.ToggleValue(MENU_BACK_IND);
 800098c:	2101      	movs	r1, #1
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <MenuBackInterruptCallback+0x10>)
 8000990:	f000 fa68 	bl	8000e64 <_ZN9ShiftRegs11ToggleValueEj>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000b0 	.word	0x200000b0

0800099c <Enc1TurnInterruptCallback>:
void Enc2SwInterruptCallback()
{
	shiftReg.ToggleValue(7);
}
void Enc1TurnInterruptCallback()
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
//	static GPIO_PinState enc1b = HAL_GPIO_ReadPin(ENC1_B_GPIO_Port, ENC1_B_Pin);
//	if (enc1b == GPIO_PIN_SET)
//	{
//
//	}
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <Enc2TurnInterruptCallback>:
void Enc2TurnInterruptCallback()
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
	// Need to move to an "Encoder" class.
//	static GPIO_PinState enc2b = HAL_GPIO_ReadPin(ENC2_B_GPIO_Port, ENC2_B_Pin);
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_Z41__static_initialization_and_destruction_0ii>:
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d110      	bne.n	80009ea <_Z41__static_initialization_and_destruction_0ii+0x32>
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10b      	bne.n	80009ea <_Z41__static_initialization_and_destruction_0ii+0x32>
ShiftRegs shiftReg;
 80009d2:	4812      	ldr	r0, [pc, #72]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80009d4:	f7ff fe4c 	bl	8000670 <_ZN9ShiftRegsC1Ev>
Nextion screen = Nextion();
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80009da:	f000 f837 	bl	8000a4c <_ZN7NextionC1Ev>
Button menuUp = Button();
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80009e0:	f7ff fdf0 	bl	80005c4 <_ZN6ButtonC1Ev>
Button menuDown = Button();
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80009e6:	f7ff fded 	bl	80005c4 <_ZN6ButtonC1Ev>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d110      	bne.n	8000a12 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10b      	bne.n	8000a12 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80009fc:	f7ff fdf2 	bl	80005e4 <_ZN6ButtonD1Ev>
Button menuUp = Button();
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000a02:	f7ff fdef 	bl	80005e4 <_ZN6ButtonD1Ev>
Nextion screen = Nextion();
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000a08:	f000 f846 	bl	8000a98 <_ZN7NextionD1Ev>
ShiftRegs shiftReg;
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000a0e:	f000 f98b 	bl	8000d28 <_ZN9ShiftRegsD1Ev>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000b0 	.word	0x200000b0
 8000a20:	200000d4 	.word	0x200000d4
 8000a24:	200000ec 	.word	0x200000ec
 8000a28:	200000fc 	.word	0x200000fc

08000a2c <_GLOBAL__sub_I_currentADCHandle>:
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff ffbf 	bl	80009b8 <_Z41__static_initialization_and_destruction_0ii>
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_GLOBAL__sub_D_currentADCHandle>:
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff ffb7 	bl	80009b8 <_Z41__static_initialization_and_destruction_0ii>
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_ZN7NextionC1Ev>:
#include "Nextion.h"
#include "NextionDefs.h"
#include "string.h"
#include "math.h"

Nextion::Nextion()
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <_ZN7NextionC1Ev+0x48>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
{
	this->cmdBuffer = new uint8_t[NEXTION_BUFFER];
 8000a5a:	2010      	movs	r0, #16
 8000a5c:	f005 f9ab 	bl	8005db6 <_Znaj>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	609a      	str	r2, [r3, #8]
	this->recBuffer = new uint8_t[NEXTION_REC_SIZE];
 8000a68:	2008      	movs	r0, #8
 8000a6a:	f005 f9a4 	bl	8005db6 <_Znaj>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60da      	str	r2, [r3, #12]
	this->buffer = new char[NEXTION_BUFFER];
 8000a76:	2010      	movs	r0, #16
 8000a78:	f005 f99d 	bl	8005db6 <_Znaj>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	611a      	str	r2, [r3, #16]
	this->index = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	719a      	strb	r2, [r3, #6]
}
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	080068dc 	.word	0x080068dc

08000a98 <_ZN7NextionD1Ev>:

Nextion::~Nextion()
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <_ZN7NextionD1Ev+0x50>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
{
	delete[] cmdBuffer;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d004      	beq.n	8000ab8 <_ZN7NextionD1Ev+0x20>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 f96e 	bl	8005d94 <_ZdaPv>
	delete[] recBuffer;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d004      	beq.n	8000aca <_ZN7NextionD1Ev+0x32>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 f965 	bl	8005d94 <_ZdaPv>
	delete[] buffer;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <_ZN7NextionD1Ev+0x44>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 f95c 	bl	8005d94 <_ZdaPv>
}
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	080068dc 	.word	0x080068dc

08000aec <_ZN7NextionD0Ev>:
Nextion::~Nextion()
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
}
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffcf 	bl	8000a98 <_ZN7NextionD1Ev>
 8000afa:	2118      	movs	r1, #24
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f005 f947 	bl	8005d90 <_ZdlPvj>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_ZN7Nextion7StartupEP20__UART_HandleTypeDef>:

void Nextion::Startup(UART_HandleTypeDef *uart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	this->uart = uart;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	615a      	str	r2, [r3, #20]
	HAL_UART_Receive(uart, recBuffer, 8, UART_TIMEOUT);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68d9      	ldr	r1, [r3, #12]
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	2208      	movs	r2, #8
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f004 fdae 	bl	8005686 <HAL_UART_Receive>
	SendCommand("bkcmd=1");
 8000b2a:	4905      	ldr	r1, [pc, #20]	; (8000b40 <_ZN7Nextion7StartupEP20__UART_HandleTypeDef+0x34>)
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f853 	bl	8000bd8 <_ZN7Nextion11SendCommandEPKc>
	HAL_Delay(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f001 fb80 	bl	8002238 <HAL_Delay>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	08006828 	.word	0x08006828

08000b44 <_ZN7Nextion12CommandCheckEv>:

bool Nextion::CommandCheck()
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if (this->recBuffer[0] == 0 || this->recBuffer[0] == NEX_RET_CMD_FINISHED)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <_ZN7Nextion12CommandCheckEv+0x1c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <_ZN7Nextion12CommandCheckEv+0x20>
	{
		return true;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <_ZN7Nextion12CommandCheckEv+0x22>
	}
	return false;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <_ZN7Nextion11SendCommandEv>:

bool Nextion::SendCommand()
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(uart, (unsigned char*)buffer, strlen(buffer), UART_TIMEOUT);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	695c      	ldr	r4, [r3, #20]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691d      	ldr	r5, [r3, #16]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fb41 	bl	8000210 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	4629      	mov	r1, r5
 8000b96:	4620      	mov	r0, r4
 8000b98:	f004 fce3 	bl	8005562 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, NEXT_END, 3, UART_TIMEOUT);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6958      	ldr	r0, [r3, #20]
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	490b      	ldr	r1, [pc, #44]	; (8000bd4 <_ZN7Nextion11SendCommandEv+0x60>)
 8000ba6:	f004 fcdc 	bl	8005562 <HAL_UART_Transmit>
	recBuffer[NEXTION_REC_SIZE] = {0};
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	3308      	adds	r3, #8
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(uart, recBuffer, 8, UART_TIMEOUT);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6958      	ldr	r0, [r3, #20]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68d9      	ldr	r1, [r3, #12]
 8000bbc:	2364      	movs	r3, #100	; 0x64
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	f004 fd61 	bl	8005686 <HAL_UART_Receive>
	return CommandCheck();
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffbd 	bl	8000b44 <_ZN7Nextion12CommandCheckEv>
 8000bca:	4603      	mov	r3, r0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd4:	080068d0 	.word	0x080068d0

08000bd8 <_ZN7Nextion11SendCommandEPKc>:

bool Nextion::SendCommand(const char *buffer)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, (unsigned char*)buffer, strlen(buffer), UART_TIMEOUT);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	695c      	ldr	r4, [r3, #20]
 8000be6:	6838      	ldr	r0, [r7, #0]
 8000be8:	f7ff fb12 	bl	8000210 <strlen>
 8000bec:	4603      	mov	r3, r0
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f004 fcb4 	bl	8005562 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, NEXT_END, 3, UART_TIMEOUT);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6958      	ldr	r0, [r3, #20]
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	2203      	movs	r2, #3
 8000c02:	490c      	ldr	r1, [pc, #48]	; (8000c34 <_ZN7Nextion11SendCommandEPKc+0x5c>)
 8000c04:	f004 fcad 	bl	8005562 <HAL_UART_Transmit>
	recBuffer[NEXTION_REC_SIZE] = {0};
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(uart, recBuffer, 8, UART_TIMEOUT);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6958      	ldr	r0, [r3, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68d9      	ldr	r1, [r3, #12]
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	f004 fd32 	bl	8005686 <HAL_UART_Receive>
	return CommandCheck();
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ff8e 	bl	8000b44 <_ZN7Nextion12CommandCheckEv>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	080068d0 	.word	0x080068d0

08000c38 <_ZN7Nextion9SetNumberEhi>:
{
	SetBrightness(100, save);
}

void Nextion::SetNumber(uint8_t id, int value)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	460b      	mov	r3, r1
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	72fb      	strb	r3, [r7, #11]
	snprintf(buffer, 12, "n%d.val=%d", id, value);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6918      	ldr	r0, [r3, #16]
 8000c4a:	7afa      	ldrb	r2, [r7, #11]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4613      	mov	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_ZN7Nextion9SetNumberEhi+0x30>)
 8000c54:	210c      	movs	r1, #12
 8000c56:	f005 fa49 	bl	80060ec <sniprintf>
	SendCommand();
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff ff8a 	bl	8000b74 <_ZN7Nextion11SendCommandEv>
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	08006868 	.word	0x08006868

08000c6c <_ZN7Nextion14SetProgressBarEhh>:

void Nextion::SetProgressBar(uint8_t id, uint8_t value)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	70bb      	strb	r3, [r7, #2]
	snprintf(buffer, 10, "j%d.val=%d", id, value);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6918      	ldr	r0, [r3, #16]
 8000c80:	78fa      	ldrb	r2, [r7, #3]
 8000c82:	78bb      	ldrb	r3, [r7, #2]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	4613      	mov	r3, r2
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_ZN7Nextion14SetProgressBarEhh+0x34>)
 8000c8a:	210a      	movs	r1, #10
 8000c8c:	f005 fa2e 	bl	80060ec <sniprintf>
	SendCommand();
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff6f 	bl	8000b74 <_ZN7Nextion11SendCommandEv>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08006874 	.word	0x08006874

08000ca4 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_>:

#include "ShiftRegs.h"
#include "main.h"
#include "bitset"

ShiftRegs::ShiftRegs(SPI_HandleTypeDef *spi, Pin OEPin, Pin LEPin)
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	4639      	mov	r1, r7
 8000cb0:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <_ZN9ShiftRegsC1EP19__SPI_HandleTypeDef3PinS2_+0x80>)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fcb0 	bl	8000624 <_ZN3PinC1Ev>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3310      	adds	r3, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fcab 	bl	8000624 <_ZN3PinC1Ev>
{
	this->_spi = spi;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	61da      	str	r2, [r3, #28]
	this->OEPin = OEPin;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	463a      	mov	r2, r7
 8000cda:	6810      	ldr	r0, [r2, #0]
 8000cdc:	6018      	str	r0, [r3, #0]
 8000cde:	8891      	ldrh	r1, [r2, #4]
 8000ce0:	7992      	ldrb	r2, [r2, #6]
 8000ce2:	8099      	strh	r1, [r3, #4]
 8000ce4:	719a      	strb	r2, [r3, #6]
	this->LEPin = LEPin;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3310      	adds	r3, #16
 8000cea:	f107 0218 	add.w	r2, r7, #24
 8000cee:	6810      	ldr	r0, [r2, #0]
 8000cf0:	6018      	str	r0, [r3, #0]
 8000cf2:	8891      	ldrh	r1, [r2, #4]
 8000cf4:	7992      	ldrb	r2, [r2, #6]
 8000cf6:	8099      	strh	r1, [r3, #4]
 8000cf8:	719a      	strb	r2, [r3, #6]
	this->_buffer = new uint8_t[2] {0,0};
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f005 f85b 	bl	8005db6 <_Znaj>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	4613      	mov	r3, r2
 8000d06:	2100      	movs	r1, #0
 8000d08:	7019      	strb	r1, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	7019      	strb	r1, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	621a      	str	r2, [r3, #32]
	this->_number = 0;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2200      	movs	r2, #0
 8000d18:	831a      	strh	r2, [r3, #24]
}
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080068ec 	.word	0x080068ec

08000d28 <_ZN9ShiftRegsD1Ev>:

ShiftRegs::~ShiftRegs()
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <_ZN9ShiftRegsD1Ev+0x2c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
{
	delete[] this->_buffer;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <_ZN9ShiftRegsD1Ev+0x20>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 f826 	bl	8005d94 <_ZdaPv>
}
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	080068ec 	.word	0x080068ec

08000d58 <_ZN9ShiftRegsD0Ev>:
ShiftRegs::~ShiftRegs()
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
}
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ffe1 	bl	8000d28 <_ZN9ShiftRegsD1Ev>
 8000d66:	2124      	movs	r1, #36	; 0x24
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f005 f811 	bl	8005d90 <_ZdlPvj>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_ZN9ShiftRegs4InitEv>:

void ShiftRegs::Init()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
//	STP16C - LE = Active HIGH | OE = Active LOW
	this->OEPin.Clear();
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3308      	adds	r3, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f8ef 	bl	8000f68 <_ZN3Pin5ClearEv>
	this->LEPin.Clear();
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3310      	adds	r3, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f8ea 	bl	8000f68 <_ZN3Pin5ClearEv>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN9ShiftRegs13IndicatorTestEv>:

void ShiftRegs::IndicatorTest()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 32; ++i) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b1f      	cmp	r3, #31
 8000db0:	dc16      	bgt.n	8000de0 <_ZN9ShiftRegs13IndicatorTestEv+0x44>

		ToggleValue(count);
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	4619      	mov	r1, r3
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f854 	bl	8000e64 <_ZN9ShiftRegs11ToggleValueEj>
		Update();
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f87e 	bl	8000ebe <_ZN9ShiftRegs6UpdateEv>
		count++;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
		if (count >= 16)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	d901      	bls.n	8000dd2 <_ZN9ShiftRegs13IndicatorTestEv+0x36>
		{
			count = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(50);
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f001 fa30 	bl	8002238 <HAL_Delay>
	for (int i = 0; i < 32; ++i) {
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	e7e5      	b.n	8000dac <_ZN9ShiftRegs13IndicatorTestEv+0x10>
	}
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_ZN9ShiftRegs8SetValueE8LEDStatej>:

void ShiftRegs::SetValue(LEDState value, size_t index)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	460b      	mov	r3, r1
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	72fb      	strb	r3, [r7, #11]
	this->SetValue((uint8_t)value, index);
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f804 	bl	8000e0a <_ZN9ShiftRegs8SetValueEhj>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_ZN9ShiftRegs8SetValueEhj>:

void ShiftRegs::SetValue(uint8_t value, size_t index)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	460b      	mov	r3, r1
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	72fb      	strb	r3, [r7, #11]
	if (value == 1)
 8000e18:	7afb      	ldrb	r3, [r7, #11]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d10d      	bne.n	8000e3a <_ZN9ShiftRegs8SetValueEhj+0x30>
	{
		this->_number |= 1 << index;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	8b1b      	ldrh	r3, [r3, #24]
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	2101      	movs	r1, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	831a      	strh	r2, [r3, #24]
		this->_number &= ~(1 << index);
	}
//	this->_temp = 1 << index;
	// I dont trust this...
//	this->_union->number ^= (-value ^ this->_union->number) & (1 << index);
}
 8000e38:	e00e      	b.n	8000e58 <_ZN9ShiftRegs8SetValueEhj+0x4e>
		this->_number &= ~(1 << index);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	8b1b      	ldrh	r3, [r3, #24]
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	2101      	movs	r1, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	831a      	strh	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_ZN9ShiftRegs11ToggleValueEj>:

void ShiftRegs::ToggleValue(size_t index)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	this->SetValue(!this->GetValue(index), index);
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 f80f 	bl	8000e94 <_ZN9ShiftRegs8GetValueEj>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf0c      	ite	eq
 8000e7c:	2301      	moveq	r3, #1
 8000e7e:	2300      	movne	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffbf 	bl	8000e0a <_ZN9ShiftRegs8SetValueEhj>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN9ShiftRegs8GetValueEj>:
{
	this->_number = 0;
}

uint8_t ShiftRegs::GetValue(size_t index)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	return (this->_number >> index) & 1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	8b1b      	ldrh	r3, [r3, #24]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_ZN9ShiftRegs6UpdateEv>:

void ShiftRegs::Update()
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	this->_buffer[0] = this->_number & 0xFF;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	8b1a      	ldrh	r2, [r3, #24]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	701a      	strb	r2, [r3, #0]
	this->_buffer[1] = (this->_number & 0xFF00) >> 8;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8b1b      	ldrh	r3, [r3, #24]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
	this->OEPin.Write(GPIO_PIN_SET);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f81f 	bl	8000f2e <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_SET);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f819 	bl	8000f2e <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_SET);
	HAL_SPI_Transmit(this->_spi, this->_buffer, 2, Timeout);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69d8      	ldr	r0, [r3, #28]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a19      	ldr	r1, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f003 f8a8 	bl	800405e <HAL_SPI_Transmit>
	this->OEPin.Write(GPIO_PIN_RESET);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3308      	adds	r3, #8
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f80a 	bl	8000f2e <_ZN3Pin5WriteE13GPIO_PinState>
	this->LEPin.Write(GPIO_PIN_RESET);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f804 	bl	8000f2e <_ZN3Pin5WriteE13GPIO_PinState>
//	HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_ZN3Pin5WriteE13GPIO_PinState>:


#include "Utils.h"

void Pin::Write(GPIO_PinState state)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(this->defaultState == GPIO_Default_State::ACTIVE_LOW ? !state : state));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	8899      	ldrh	r1, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	799b      	ldrb	r3, [r3, #6]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d106      	bne.n	8000f58 <_ZN3Pin5WriteE13GPIO_PinState+0x2a>
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	e000      	b.n	8000f5a <_ZN3Pin5WriteE13GPIO_PinState+0x2c>
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f002 f9de 	bl	800331c <HAL_GPIO_WritePin>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN3Pin5ClearEv>:
{
	HAL_GPIO_TogglePin(this->port, this->pin);
}

void Pin::Clear()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)this->defaultState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8899      	ldrh	r1, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	799b      	ldrb	r3, [r3, #6]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f002 f9cd 	bl	800331c <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f9a:	d020      	beq.n	8000fde <HAL_GPIO_EXTI_Callback+0x54>
 8000f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fa0:	dc31      	bgt.n	8001006 <HAL_GPIO_EXTI_Callback+0x7c>
 8000fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fa6:	d01d      	beq.n	8000fe4 <HAL_GPIO_EXTI_Callback+0x5a>
 8000fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fac:	dc2b      	bgt.n	8001006 <HAL_GPIO_EXTI_Callback+0x7c>
 8000fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb2:	d01a      	beq.n	8000fea <HAL_GPIO_EXTI_Callback+0x60>
 8000fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb8:	dc25      	bgt.n	8001006 <HAL_GPIO_EXTI_Callback+0x7c>
 8000fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fbe:	d020      	beq.n	8001002 <HAL_GPIO_EXTI_Callback+0x78>
 8000fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fc4:	dc1f      	bgt.n	8001006 <HAL_GPIO_EXTI_Callback+0x7c>
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_EXTI_Callback+0x72>
 8000fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd0:	dc19      	bgt.n	8001006 <HAL_GPIO_EXTI_Callback+0x7c>
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d00c      	beq.n	8000ff0 <HAL_GPIO_EXTI_Callback+0x66>
 8000fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fda:	d00c      	beq.n	8000ff6 <HAL_GPIO_EXTI_Callback+0x6c>
			MenuActInterruptCallback();
			break;
		case MENU_BACK_Pin:
			MenuBackInterruptCallback();
		default:
			break;
 8000fdc:	e013      	b.n	8001006 <HAL_GPIO_EXTI_Callback+0x7c>
			Enc1TurnInterruptCallback();
 8000fde:	f7ff fcdd 	bl	800099c <Enc1TurnInterruptCallback>
			break;
 8000fe2:	e011      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x7e>
			Enc2TurnInterruptCallback();
 8000fe4:	f7ff fce1 	bl	80009aa <Enc2TurnInterruptCallback>
			break;
 8000fe8:	e00e      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuUpInterruptCallback();
 8000fea:	f7ff fca5 	bl	8000938 <MenuUpInterruptCallback>
			break;
 8000fee:	e00b      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuDownInterruptCallback();
 8000ff0:	f7ff fcac 	bl	800094c <MenuDownInterruptCallback>
			break;
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuRightInterruptCallback();
 8000ff6:	f7ff fcb3 	bl	8000960 <MenuRightInterruptCallback>
			break;
 8000ffa:	e005      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuActInterruptCallback();
 8000ffc:	f7ff fcba 	bl	8000974 <MenuActInterruptCallback>
			break;
 8001000:	e002      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x7e>
			MenuBackInterruptCallback();
 8001002:	f7ff fcc1 	bl	8000988 <MenuBackInterruptCallback>
			break;
 8001006:	bf00      	nop
	}
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f001 f89d 	bl	8002154 <HAL_Init>

  /* USER CODE BEGIN Init */
  Init(
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <main+0x9c>)
 800101c:	9304      	str	r3, [sp, #16]
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <main+0xa0>)
 8001020:	9303      	str	r3, [sp, #12]
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <main+0xa4>)
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <main+0xa8>)
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <main+0xac>)
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <main+0xb0>)
 8001030:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <main+0xb4>)
 8001032:	4925      	ldr	r1, [pc, #148]	; (80010c8 <main+0xb8>)
 8001034:	4825      	ldr	r0, [pc, #148]	; (80010cc <main+0xbc>)
 8001036:	f7ff fb63 	bl	8000700 <Init>
		  &huart2
  );
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f84b 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fb71 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 8001042:	f000 fb4f 	bl	80016e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001046:	f000 f8af 	bl	80011a8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800104a:	f000 f99d 	bl	8001388 <MX_TIM2_Init>
  MX_I2C1_Init();
 800104e:	f000 f8ff 	bl	8001250 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001052:	f000 f92b 	bl	80012ac <MX_SPI2_Init>
  MX_SPI5_Init();
 8001056:	f000 f95f 	bl	8001318 <MX_SPI5_Init>
  MX_TIM3_Init();
 800105a:	f000 fa15 	bl	8001488 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800105e:	f000 faed 	bl	800163c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001062:	f000 fb15 	bl	8001690 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001066:	f000 faab 	bl	80015c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800106a:	2100      	movs	r1, #0
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <main+0xa4>)
 800106e:	f003 faa5 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001072:	2104      	movs	r1, #4
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <main+0xa4>)
 8001076:	f003 faa1 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800107a:	2108      	movs	r1, #8
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <main+0xa4>)
 800107e:	f003 fa9d 	bl	80045bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001082:	210c      	movs	r1, #12
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <main+0xa4>)
 8001086:	f003 fa99 	bl	80045bc <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <main+0xc0>)
 8001092:	f002 f943 	bl	800331c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <main+0xc0>)
 800109e:	f002 f93d 	bl	800331c <HAL_GPIO_WritePin>

  // For Itit tests
  InitTest();
 80010a2:	f7ff fba1 	bl	80007e8 <InitTest>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 80010a6:	f7ff fba9 	bl	80007fc <Main>
 80010aa:	e7fc      	b.n	80010a6 <main+0x96>
 80010ac:	200003f8 	.word	0x200003f8
 80010b0:	200003b4 	.word	0x200003b4
 80010b4:	20000324 	.word	0x20000324
 80010b8:	200002dc 	.word	0x200002dc
 80010bc:	20000284 	.word	0x20000284
 80010c0:	2000022c 	.word	0x2000022c
 80010c4:	200001d8 	.word	0x200001d8
 80010c8:	20000178 	.word	0x20000178
 80010cc:	20000114 	.word	0x20000114
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	; 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2234      	movs	r2, #52	; 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fec6 	bl	8005e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <SystemClock_Config+0xcc>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <SystemClock_Config+0xcc>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <SystemClock_Config+0xcc>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <SystemClock_Config+0xd0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <SystemClock_Config+0xd0>)
 800111e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <SystemClock_Config+0xd0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001144:	2310      	movs	r3, #16
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001148:	23b4      	movs	r3, #180	; 0xb4
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4618      	mov	r0, r3
 800115e:	f002 fc71 	bl	8003a44 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001168:	f000 fc12 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fa3d 	bl	8003608 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001194:	f000 fbfc 	bl	8001990 <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	; 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <MX_ADC1_Init+0xa0>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <MX_ADC1_Init+0xa4>)
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_ADC1_Init+0x9c>)
 8001206:	2201      	movs	r2, #1
 8001208:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <MX_ADC1_Init+0x9c>)
 800120c:	f001 f838 	bl	8002280 <HAL_ADC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001216:	f000 fbbb 	bl	8001990 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800121a:	2304      	movs	r3, #4
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_ADC1_Init+0x9c>)
 800122c:	f001 f8b6 	bl	800239c <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001236:	f000 fbab 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000114 	.word	0x20000114
 8001248:	40012000 	.word	0x40012000
 800124c:	0f000001 	.word	0x0f000001

08001250 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <MX_I2C1_Init+0x54>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C1_Init+0x50>)
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x58>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_I2C1_Init+0x50>)
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_I2C1_Init+0x50>)
 800128e:	f002 f877 	bl	8003380 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 fb7a 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200001d8 	.word	0x200001d8
 80012a4:	40005400 	.word	0x40005400
 80012a8:	000186a0 	.word	0x000186a0

080012ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_SPI2_Init+0x64>)
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <MX_SPI2_Init+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_SPI2_Init+0x64>)
 80012b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_SPI2_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_SPI2_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_SPI2_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_SPI2_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_SPI2_Init+0x64>)
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_SPI2_Init+0x64>)
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_SPI2_Init+0x64>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_SPI2_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_SPI2_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_SPI2_Init+0x64>)
 80012f8:	220a      	movs	r2, #10
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_SPI2_Init+0x64>)
 80012fe:	f002 fe25 	bl	8003f4c <HAL_SPI_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001308:	f000 fb42 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000022c 	.word	0x2000022c
 8001314:	40003800 	.word	0x40003800

08001318 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_SPI5_Init+0x68>)
 800131e:	4a19      	ldr	r2, [pc, #100]	; (8001384 <MX_SPI5_Init+0x6c>)
 8001320:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_SPI5_Init+0x68>)
 8001324:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001328:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_SPI5_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_SPI5_Init+0x68>)
 8001332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001336:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_SPI5_Init+0x68>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_SPI5_Init+0x68>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_SPI5_Init+0x68>)
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_SPI5_Init+0x68>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_SPI5_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_SPI5_Init+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_SPI5_Init+0x68>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_SPI5_Init+0x68>)
 8001366:	220a      	movs	r2, #10
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_SPI5_Init+0x68>)
 800136c:	f002 fdee 	bl	8003f4c <HAL_SPI_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 8001376:	f000 fb0b 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000284 	.word	0x20000284
 8001384:	40015000 	.word	0x40015000

08001388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b8:	4b32      	ldr	r3, [pc, #200]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013ce:	f04f 32ff 	mov.w	r2, #4294967295
 80013d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e0:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013e2:	f003 f843 	bl	800446c <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013ec:	f000 fad0 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4821      	ldr	r0, [pc, #132]	; (8001484 <MX_TIM2_Init+0xfc>)
 80013fe:	f003 fbc9 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001408:	f000 fac2 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800140c:	481d      	ldr	r0, [pc, #116]	; (8001484 <MX_TIM2_Init+0xfc>)
 800140e:	f003 f87c 	bl	800450a <HAL_TIM_PWM_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001418:	f000 faba 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4619      	mov	r1, r3
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <MX_TIM2_Init+0xfc>)
 800142c:	f003 ffbc 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001436:	f000 faab 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143a:	2360      	movs	r3, #96	; 0x60
 800143c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_TIM2_Init+0xfc>)
 8001452:	f003 fadd 	bl	8004a10 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800145c:	f000 fa98 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2204      	movs	r2, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM2_Init+0xfc>)
 8001468:	f003 fad2 	bl	8004a10 <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001472:	f000 fa8d 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM2_Init+0xfc>)
 8001478:	f000 fc82 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3738      	adds	r7, #56	; 0x38
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002dc 	.word	0x200002dc

08001488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]
 80014b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014ba:	4a40      	ldr	r2, [pc, #256]	; (80015bc <MX_TIM3_Init+0x134>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014de:	4836      	ldr	r0, [pc, #216]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014e0:	f002 ffc4 	bl	800446c <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014ea:	f000 fa51 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f8:	4619      	mov	r1, r3
 80014fa:	482f      	ldr	r0, [pc, #188]	; (80015b8 <MX_TIM3_Init+0x130>)
 80014fc:	f003 fb4a 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001506:	f000 fa43 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800150a:	482b      	ldr	r0, [pc, #172]	; (80015b8 <MX_TIM3_Init+0x130>)
 800150c:	f002 fffd 	bl	800450a <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001516:	f000 fa3b 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	4619      	mov	r1, r3
 8001528:	4823      	ldr	r0, [pc, #140]	; (80015b8 <MX_TIM3_Init+0x130>)
 800152a:	f003 ff3d 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001534:	f000 fa2c 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <MX_TIM3_Init+0x130>)
 8001550:	f003 fa5e 	bl	8004a10 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800155a:	f000 fa19 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_TIM3_Init+0x130>)
 8001566:	f003 fa53 	bl	8004a10 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001570:	f000 fa0e 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 255;
 8001574:	23ff      	movs	r3, #255	; 0xff
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2208      	movs	r2, #8
 800157c:	4619      	mov	r1, r3
 800157e:	480e      	ldr	r0, [pc, #56]	; (80015b8 <MX_TIM3_Init+0x130>)
 8001580:	f003 fa46 	bl	8004a10 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800158a:	f000 fa01 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	220c      	movs	r2, #12
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM3_Init+0x130>)
 800159a:	f003 fa39 	bl	8004a10 <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80015a4:	f000 f9f4 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM3_Init+0x130>)
 80015aa:	f000 fbe9 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3738      	adds	r7, #56	; 0x38
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000324 	.word	0x20000324
 80015bc:	40000400 	.word	0x40000400

080015c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_TIM6_Init+0x74>)
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <MX_TIM6_Init+0x78>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_TIM6_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_TIM6_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 255;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_TIM6_Init+0x74>)
 80015e2:	22ff      	movs	r2, #255	; 0xff
 80015e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_TIM6_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <MX_TIM6_Init+0x74>)
 80015ee:	f002 ff3d 	bl	800446c <HAL_TIM_Base_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80015f8:	f000 f9ca 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80015fc:	2108      	movs	r1, #8
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_TIM6_Init+0x74>)
 8001600:	f003 f8a4 	bl	800474c <HAL_TIM_OnePulse_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 800160a:	f000 f9c1 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800160e:	2320      	movs	r3, #32
 8001610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_TIM6_Init+0x74>)
 800161c:	f003 fec4 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 8001626:	f000 f9b3 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000036c 	.word	0x2000036c
 8001638:	40001000 	.word	0x40001000

0800163c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART1_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001674:	f003 ff28 	bl	80054c8 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f000 f987 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003b4 	.word	0x200003b4
 800168c:	40011000 	.word	0x40011000

08001690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART2_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c8:	f003 fefe 	bl	80054c8 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f95d 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003f8 	.word	0x200003f8
 80016e0:	40004400 	.word	0x40004400

080016e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_DMA_Init+0x3c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <MX_DMA_Init+0x3c>)
 80016f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_DMA_Init+0x3c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2038      	movs	r0, #56	; 0x38
 800170c:	f001 f949 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001710:	2038      	movs	r0, #56	; 0x38
 8001712:	f001 f962 	bl	80029da <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <MX_GPIO_Init+0x254>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a8d      	ldr	r2, [pc, #564]	; (8001978 <MX_GPIO_Init+0x254>)
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <MX_GPIO_Init+0x254>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	4b87      	ldr	r3, [pc, #540]	; (8001978 <MX_GPIO_Init+0x254>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a86      	ldr	r2, [pc, #536]	; (8001978 <MX_GPIO_Init+0x254>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b84      	ldr	r3, [pc, #528]	; (8001978 <MX_GPIO_Init+0x254>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b80      	ldr	r3, [pc, #512]	; (8001978 <MX_GPIO_Init+0x254>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a7f      	ldr	r2, [pc, #508]	; (8001978 <MX_GPIO_Init+0x254>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <MX_GPIO_Init+0x254>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b79      	ldr	r3, [pc, #484]	; (8001978 <MX_GPIO_Init+0x254>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a78      	ldr	r2, [pc, #480]	; (8001978 <MX_GPIO_Init+0x254>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b76      	ldr	r3, [pc, #472]	; (8001978 <MX_GPIO_Init+0x254>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <MX_GPIO_Init+0x254>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a71      	ldr	r2, [pc, #452]	; (8001978 <MX_GPIO_Init+0x254>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <MX_GPIO_Init+0x254>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <MX_GPIO_Init+0x254>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a6a      	ldr	r2, [pc, #424]	; (8001978 <MX_GPIO_Init+0x254>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b68      	ldr	r3, [pc, #416]	; (8001978 <MX_GPIO_Init+0x254>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_SRC_IND_Pin|XLR_ADC_CS_Pin|HP_ADC_CS_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80017e8:	4864      	ldr	r0, [pc, #400]	; (800197c <MX_GPIO_Init+0x258>)
 80017ea:	f001 fd97 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2102      	movs	r1, #2
 80017f2:	4863      	ldr	r0, [pc, #396]	; (8001980 <MX_GPIO_Init+0x25c>)
 80017f4:	f001 fd92 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GRAPH_LE_GPIO_Port, GRAPH_LE_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4861      	ldr	r0, [pc, #388]	; (8001984 <MX_GPIO_Init+0x260>)
 8001800:	f001 fd8c 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GRAPH_OE_GPIO_Port, GRAPH_OE_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180a:	485e      	ldr	r0, [pc, #376]	; (8001984 <MX_GPIO_Init+0x260>)
 800180c:	f001 fd86 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AUDIO_SRC_IND_Pin XLR_ADC_CS_Pin HP_ADC_CS_Pin */
  GPIO_InitStruct.Pin = AUDIO_SRC_IND_Pin|XLR_ADC_CS_Pin|HP_ADC_CS_Pin;
 8001810:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4854      	ldr	r0, [pc, #336]	; (800197c <MX_GPIO_Init+0x258>)
 800182a:	f001 fbdb 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_WP_Pin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	484e      	ldr	r0, [pc, #312]	; (8001980 <MX_GPIO_Init+0x25c>)
 8001846:	f001 fbcd 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC2_B_Pin;
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC2_B_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	484a      	ldr	r0, [pc, #296]	; (8001988 <MX_GPIO_Init+0x264>)
 8001860:	f001 fbc0 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_A_Pin ENC1_A_Pin */
  GPIO_InitStruct.Pin = ENC2_A_Pin|ENC1_A_Pin;
 8001864:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4843      	ldr	r0, [pc, #268]	; (8001988 <MX_GPIO_Init+0x264>)
 800187c:	f001 fbb2 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC2_SW_Pin MENU_RIGHT_Pin MENU_ACT_Pin MENU_BACK_Pin
                           MENU_UP_Pin MENU_DOWN_Pin ENC1_SW_Pin */
  GPIO_InitStruct.Pin = ENC2_SW_Pin|MENU_RIGHT_Pin|MENU_ACT_Pin|MENU_BACK_Pin
 8001880:	f641 7328 	movw	r3, #7976	; 0x1f28
 8001884:	61fb      	str	r3, [r7, #28]
                          |MENU_UP_Pin|MENU_DOWN_Pin|ENC1_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001886:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	483b      	ldr	r0, [pc, #236]	; (8001984 <MX_GPIO_Init+0x260>)
 8001898:	f001 fba4 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GRAPH_LE_Pin GRAPH_OE_Pin */
  GPIO_InitStruct.Pin = GRAPH_LE_Pin|GRAPH_OE_Pin;
 800189c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4833      	ldr	r0, [pc, #204]	; (8001984 <MX_GPIO_Init+0x260>)
 80018b6:	f001 fb95 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_LEFT_Pin */
  GPIO_InitStruct.Pin = MENU_LEFT_Pin;
 80018ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_LEFT_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	482d      	ldr	r0, [pc, #180]	; (8001984 <MX_GPIO_Init+0x260>)
 80018d0:	f001 fb88 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HP_SW_Pin */
  GPIO_InitStruct.Pin = HP_SW_Pin;
 80018d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HP_SW_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4828      	ldr	r0, [pc, #160]	; (800198c <MX_GPIO_Init+0x268>)
 80018ea:	f001 fb7b 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin;
 80018ee:	2310      	movs	r3, #16
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC1_B_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4820      	ldr	r0, [pc, #128]	; (8001984 <MX_GPIO_Init+0x260>)
 8001902:	f001 fb6f 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HP_VREF_IRQ_Pin XLR_VRE_FIRQ_Pin */
  GPIO_InitStruct.Pin = HP_VREF_IRQ_Pin|XLR_VRE_FIRQ_Pin;
 8001906:	2303      	movs	r3, #3
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	4818      	ldr	r0, [pc, #96]	; (800197c <MX_GPIO_Init+0x258>)
 800191c:	f001 fb62 	bl	8002fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2006      	movs	r0, #6
 8001926:	f001 f83c 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800192a:	2006      	movs	r0, #6
 800192c:	f001 f855 	bl	80029da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	2007      	movs	r0, #7
 8001936:	f001 f834 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800193a:	2007      	movs	r0, #7
 800193c:	f001 f84d 	bl	80029da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2009      	movs	r0, #9
 8001946:	f001 f82c 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800194a:	2009      	movs	r0, #9
 800194c:	f001 f845 	bl	80029da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2017      	movs	r0, #23
 8001956:	f001 f824 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800195a:	2017      	movs	r0, #23
 800195c:	f001 f83d 	bl	80029da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2028      	movs	r0, #40	; 0x28
 8001966:	f001 f81c 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800196a:	2028      	movs	r0, #40	; 0x28
 800196c:	f001 f835 	bl	80029da <HAL_NVIC_EnableIRQ>

}
 8001970:	bf00      	nop
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40020400 	.word	0x40020400
 800198c:	40020000 	.word	0x40020000

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	; 0x30
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <HAL_ADC_MspInit+0x144>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f040 808b 	bne.w	8001b26 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a20:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a3f      	ldr	r2, [pc, #252]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a38      	ldr	r2, [pc, #224]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	6313      	str	r3, [r2, #48]	; 0x30
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_ADC_MspInit+0x148>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STRIP1_CURR_Pin|STRIP5_CURR_Pin|STRIP6_CURR_Pin|STRIP2_CURR_Pin;
 8001a80:	23f0      	movs	r3, #240	; 0xf0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4829      	ldr	r0, [pc, #164]	; (8001b38 <HAL_ADC_MspInit+0x14c>)
 8001a94:	f001 faa6 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP3_CURR_Pin|STRIP7_CURR_Pin;
 8001a98:	2330      	movs	r3, #48	; 0x30
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4824      	ldr	r0, [pc, #144]	; (8001b3c <HAL_ADC_MspInit+0x150>)
 8001aac:	f001 fa9a 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STRIP8_CURR_Pin|STRIP4_CURR_Pin;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	481f      	ldr	r0, [pc, #124]	; (8001b40 <HAL_ADC_MspInit+0x154>)
 8001ac4:	f001 fa8e 	bl	8002fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001aca:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_ADC_MspInit+0x15c>)
 8001acc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001afe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0a:	480e      	ldr	r0, [pc, #56]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001b0c:	f000 ff80 	bl	8002a10 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001b16:	f7ff ff3b 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b20:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_ADC_MspInit+0x158>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	; 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40012000 	.word	0x40012000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020400 	.word	0x40020400
 8001b44:	20000178 	.word	0x20000178
 8001b48:	40026410 	.word	0x40026410

08001b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_I2C_MspInit+0x84>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12b      	bne.n	8001bc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8a:	23c0      	movs	r3, #192	; 0xc0
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <HAL_I2C_MspInit+0x8c>)
 8001ba6:	f001 fa1d 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020400 	.word	0x40020400

08001bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a33      	ldr	r2, [pc, #204]	; (8001cc8 <HAL_SPI_MspInit+0xec>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12d      	bne.n	8001c5a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a31      	ldr	r2, [pc, #196]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001c36:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c48:	2305      	movs	r3, #5
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	481f      	ldr	r0, [pc, #124]	; (8001cd0 <HAL_SPI_MspInit+0xf4>)
 8001c54:	f001 f9c6 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001c58:	e031      	b.n	8001cbe <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI5)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_SPI_MspInit+0xf8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d12c      	bne.n	8001cbe <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c72:	6453      	str	r3, [r2, #68]	; 0x44
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_SPI_MspInit+0xf0>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_13;
 8001c9c:	f242 0344 	movw	r3, #8260	; 0x2044
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001cae:	2306      	movs	r3, #6
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <HAL_SPI_MspInit+0xfc>)
 8001cba:	f001 f993 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40003800 	.word	0x40003800
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40015000 	.word	0x40015000
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001d0a:	e02e      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_TIM_Base_MspInit+0x9c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
}
 8001d32:	e01a      	b.n	8001d6a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_TIM_Base_MspInit+0xa0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d115      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_TIM_Base_MspInit+0x98>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2036      	movs	r0, #54	; 0x36
 8001d60:	f000 fe1f 	bl	80029a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001d64:	2036      	movs	r0, #54	; 0x36
 8001d66:	f000 fe38 	bl	80029da <HAL_NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40001000 	.word	0x40001000

08001d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da0:	d11e      	bne.n	8001de0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_TIM_MspPostInit+0xb0>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_TIM_MspPostInit+0xb0>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <HAL_TIM_MspPostInit+0xb0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = XLR_SEL_IND_Pin|HP_SEL_IND_Pin;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4816      	ldr	r0, [pc, #88]	; (8001e34 <HAL_TIM_MspPostInit+0xb4>)
 8001dda:	f001 f903 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dde:	e023      	b.n	8001e28 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_TIM_MspPostInit+0xb8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11e      	bne.n	8001e28 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_TIM_MspPostInit+0xb0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_TIM_MspPostInit+0xb0>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_TIM_MspPostInit+0xb0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OE_Pin|DIAG_STATUS_Pin|DIAG_DEBUG_Pin|STRIP_PWR_Pin;
 8001e06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <HAL_TIM_MspPostInit+0xbc>)
 8001e24:	f001 f8de 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40020800 	.word	0x40020800

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_UART_MspInit+0xe8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d12d      	bne.n	8001ebe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a30      	ldr	r2, [pc, #192]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SCREEN_TX_Pin|SCREEN_RX_Pin;
 8001e9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eac:	2307      	movs	r3, #7
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481e      	ldr	r0, [pc, #120]	; (8001f30 <HAL_UART_MspInit+0xf0>)
 8001eb8:	f001 f894 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ebc:	e030      	b.n	8001f20 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_UART_MspInit+0xf4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d12b      	bne.n	8001f20 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <HAL_UART_MspInit+0xec>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_OUT_Pin|MIDI_IN_Pin;
 8001f00:	230c      	movs	r3, #12
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f10:	2307      	movs	r3, #7
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HAL_UART_MspInit+0xf0>)
 8001f1c:	f001 f862 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001f20:	bf00      	nop
 8001f22:	3730      	adds	r7, #48	; 0x30
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40011000 	.word	0x40011000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40004400 	.word	0x40004400

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <NMI_Handler+0x4>

08001f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f84:	f000 f938 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HP_VREF_IRQ_Pin);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f001 f9dd 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(XLR_VRE_FIRQ_Pin);
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f001 f9d6 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_DOWN_Pin);
 8001fac:	2008      	movs	r0, #8
 8001fae:	f001 f9cf 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_SW_Pin);
 8001fba:	2020      	movs	r0, #32
 8001fbc:	f001 f9c8 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_SW_Pin);
 8001fc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fc4:	f001 f9c4 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_RIGHT_Pin);
 8001fc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fcc:	f001 f9c0 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_ACT_Pin);
 8001fd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fdc:	f001 f9b8 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_BACK_Pin);
 8001fe0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fe4:	f001 f9b4 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MENU_UP_Pin);
 8001fe8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fec:	f001 f9b0 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8001ff0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ff4:	f001 f9ac 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8001ff8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ffc:	f001 f9a8 	bl	8003350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}

08002004 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM6_IRQHandler+0x10>)
 800200a:	f002 fbf9 	bl	8004800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000036c 	.word	0x2000036c

08002018 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <DMA2_Stream0_IRQHandler+0x10>)
 800201e:	f000 fda5 	bl	8002b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000178 	.word	0x20000178

0800202c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_kill>:

int _kill(int pid, int sig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002046:	f003 fedb 	bl	8005e00 <__errno>
 800204a:	4603      	mov	r3, r0
 800204c:	2216      	movs	r2, #22
 800204e:	601a      	str	r2, [r3, #0]
  return -1;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_exit>:

void _exit (int status)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffe7 	bl	800203c <_kill>
  while (1) {}    /* Make sure we hang here */
 800206e:	e7fe      	b.n	800206e <_exit+0x12>

08002070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <_sbrk+0x5c>)
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <_sbrk+0x60>)
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <_sbrk+0x64>)
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <_sbrk+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a0:	f003 feae 	bl	8005e00 <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	e009      	b.n	80020c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <_sbrk+0x64>)
 80020c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20040000 	.word	0x20040000
 80020d0:	00000400 	.word	0x00000400
 80020d4:	2000043c 	.word	0x2000043c
 80020d8:	20000458 	.word	0x20000458

080020dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800211c:	4c0b      	ldr	r4, [pc, #44]	; (800214c <LoopFillZerobss+0x26>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800212a:	f7ff ffd7 	bl	80020dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f003 fe6d 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7fe ff6d 	bl	8001010 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002138:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002144:	08006960 	.word	0x08006960
  ldr r2, =_sbss
 8002148:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800214c:	20000458 	.word	0x20000458

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 fc05 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	200f      	movs	r0, #15
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fc08 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fc1d 	bl	80029f6 <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 fbe5 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	20000440 	.word	0x20000440

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000440 	.word	0x20000440

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e04a      	b.n	800232c <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d120      	bne.n	80022e0 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_ADC_Init+0xb4>)
 80022a2:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_ADC_Init+0xb8>)
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_ADC_Init+0xbc>)
 80022ae:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_ADC_Init+0xc0>)
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_ADC_Init+0xc4>)
 80022ba:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a20      	ldr	r2, [pc, #128]	; (8002348 <HAL_ADC_Init+0xc8>)
 80022c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d118      	bne.n	800231e <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f4:	f023 0302 	bic.w	r3, r3, #2
 80022f8:	f043 0202 	orr.w	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f96d 	bl	80025e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f023 0303 	bic.w	r3, r3, #3
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
 800231c:	e001      	b.n	8002322 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800234d 	.word	0x0800234d
 8002338:	08002361 	.word	0x08002361
 800233c:	08002375 	.word	0x08002375
 8002340:	08002389 	.word	0x08002389
 8002344:	080027d9 	.word	0x080027d9
 8002348:	080019ed 	.word	0x080019ed

0800234c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1c>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e105      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x228>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b09      	cmp	r3, #9
 80023c6:	d925      	bls.n	8002414 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68d9      	ldr	r1, [r3, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	3b1e      	subs	r3, #30
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68d9      	ldr	r1, [r3, #12]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	4603      	mov	r3, r0
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4403      	add	r3, r0
 8002406:	3b1e      	subs	r3, #30
 8002408:	409a      	lsls	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	e022      	b.n	800245a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6919      	ldr	r1, [r3, #16]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	2207      	movs	r2, #7
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	4603      	mov	r3, r0
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4403      	add	r3, r0
 8002450:	409a      	lsls	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d824      	bhi.n	80024ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	3b05      	subs	r3, #5
 8002474:	221f      	movs	r2, #31
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3b05      	subs	r3, #5
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
 80024aa:	e04c      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d824      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	3b23      	subs	r3, #35	; 0x23
 80024c6:	221f      	movs	r2, #31
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43da      	mvns	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	400a      	ands	r2, r1
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	3b23      	subs	r3, #35	; 0x23
 80024f0:	fa00 f203 	lsl.w	r2, r0, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
 80024fc:	e023      	b.n	8002546 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b41      	subs	r3, #65	; 0x41
 8002510:	221f      	movs	r2, #31
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b41      	subs	r3, #65	; 0x41
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_ADC_ConfigChannel+0x234>)
 8002548:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_ADC_ConfigChannel+0x238>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d109      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x1cc>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d105      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <HAL_ADC_ConfigChannel+0x238>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d123      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x21e>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d003      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x1e6>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b11      	cmp	r3, #17
 8002580:	d11b      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b10      	cmp	r3, #16
 8002594:	d111      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_ADC_ConfigChannel+0x23c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_ADC_ConfigChannel+0x240>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9a      	lsrs	r2, r3, #18
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025ac:	e002      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40012300 	.word	0x40012300
 80025d4:	40012000 	.word	0x40012000
 80025d8:	20000000 	.word	0x20000000
 80025dc:	431bde83 	.word	0x431bde83

080025e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e8:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <ADC_Init+0x1f0>)
 80025ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	021a      	lsls	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6899      	ldr	r1, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <ADC_Init+0x1f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002686:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e00f      	b.n	80026de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0202 	bic.w	r2, r2, #2
 80026ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6899      	ldr	r1, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7e1b      	ldrb	r3, [r3, #24]
 80026f8:	005a      	lsls	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800272a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	3b01      	subs	r3, #1
 8002738:	035a      	lsls	r2, r3, #13
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	e007      	b.n	8002754 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002752:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	3b01      	subs	r3, #1
 8002770:	051a      	lsls	r2, r3, #20
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002796:	025a      	lsls	r2, r3, #9
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	029a      	lsls	r2, r3, #10
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	40012300 	.word	0x40012300
 80027d4:	0f000001 	.word	0x0f000001

080027d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	; (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	; (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff29 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff3e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff31 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa2 	bl	8002948 <SysTick_Config>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fc00 	bl	8002220 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e099      	b.n	8002b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4c:	e00f      	b.n	8002a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4e:	f7ff fbe7 	bl	8002220 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d908      	bls.n	8002a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e078      	b.n	8002b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e8      	bne.n	8002a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_DMA_Init+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d117      	bne.n	8002b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f9e9 	bl	8002eec <DMA_CheckFifoParam>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2240      	movs	r2, #64	; 0x40
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e016      	b.n	8002b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f9a0 	bl	8002e80 <DMA_CalcBaseAndBitshift>
 8002b40:	4603      	mov	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	223f      	movs	r2, #63	; 0x3f
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	f010803f 	.word	0xf010803f

08002b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b78:	4b8e      	ldr	r3, [pc, #568]	; (8002db4 <HAL_DMA_IRQHandler+0x248>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a8e      	ldr	r2, [pc, #568]	; (8002db8 <HAL_DMA_IRQHandler+0x24c>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0a9b      	lsrs	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2208      	movs	r2, #8
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0204 	bic.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0202 	orr.w	r2, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2204      	movs	r2, #4
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	2204      	movs	r2, #4
 8002c32:	409a      	lsls	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	2210      	movs	r2, #16
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d043      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03c      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2210      	movs	r2, #16
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d018      	beq.n	8002cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d024      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e01f      	b.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e016      	b.n	8002cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0208 	bic.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 808f 	beq.w	8002e0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8087 	beq.w	8002e0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2220      	movs	r2, #32
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d136      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0216 	bic.w	r2, r2, #22
 8002d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x1da>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	223f      	movs	r2, #63	; 0x3f
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d07e      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
        }
        return;
 8002d82:	e079      	b.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01d      	beq.n	8002dce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d031      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	e02c      	b.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000
 8002db8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
 8002dcc:	e01e      	b.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0210 	bic.w	r2, r2, #16
 8002dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d032      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2205      	movs	r2, #5
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d307      	bcc.n	8002e54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f2      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x2cc>
 8002e52:	e000      	b.n	8002e56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
 8002e76:	e000      	b.n	8002e7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e78:	bf00      	nop
    }
  }
}
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3b10      	subs	r3, #16
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d909      	bls.n	8002ec2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	1d1a      	adds	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8002ec0:	e007      	b.n	8002ed2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	aaaaaaab 	.word	0xaaaaaaab
 8002ee8:	0800690c 	.word	0x0800690c

08002eec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11f      	bne.n	8002f46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d856      	bhi.n	8002fba <DMA_CheckFifoParam+0xce>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <DMA_CheckFifoParam+0x28>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f37 	.word	0x08002f37
 8002f1c:	08002f25 	.word	0x08002f25
 8002f20:	08002fbb 	.word	0x08002fbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d046      	beq.n	8002fbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e043      	b.n	8002fbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f3e:	d140      	bne.n	8002fc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f44:	e03d      	b.n	8002fc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4e:	d121      	bne.n	8002f94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d837      	bhi.n	8002fc6 <DMA_CheckFifoParam+0xda>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <DMA_CheckFifoParam+0x70>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f73 	.word	0x08002f73
 8002f64:	08002f6d 	.word	0x08002f6d
 8002f68:	08002f85 	.word	0x08002f85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f70:	e030      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d025      	beq.n	8002fca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f82:	e022      	b.n	8002fca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f8c:	d11f      	bne.n	8002fce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f92:	e01c      	b.n	8002fce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d903      	bls.n	8002fa2 <DMA_CheckFifoParam+0xb6>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d003      	beq.n	8002fa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fa0:	e018      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa6:	e015      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e00b      	b.n	8002fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e00a      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e008      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e006      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e004      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e002      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e159      	b.n	80032b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 8148 	bne.w	80032ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d005      	beq.n	8003036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003032:	2b02      	cmp	r3, #2
 8003034:	d130      	bne.n	8003098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 0201 	and.w	r2, r3, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d017      	beq.n	80030d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d123      	bne.n	8003128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a2 	beq.w	80032ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b57      	ldr	r3, [pc, #348]	; (80032cc <HAL_GPIO_Init+0x2e8>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_GPIO_Init+0x2e8>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b54      	ldr	r3, [pc, #336]	; (80032cc <HAL_GPIO_Init+0x2e8>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003186:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_GPIO_Init+0x2ec>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a49      	ldr	r2, [pc, #292]	; (80032d4 <HAL_GPIO_Init+0x2f0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d019      	beq.n	80031e6 <HAL_GPIO_Init+0x202>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a48      	ldr	r2, [pc, #288]	; (80032d8 <HAL_GPIO_Init+0x2f4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0x1fe>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a47      	ldr	r2, [pc, #284]	; (80032dc <HAL_GPIO_Init+0x2f8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_Init+0x1fa>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a46      	ldr	r2, [pc, #280]	; (80032e0 <HAL_GPIO_Init+0x2fc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_Init+0x1f6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a45      	ldr	r2, [pc, #276]	; (80032e4 <HAL_GPIO_Init+0x300>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_Init+0x1f2>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e008      	b.n	80031e8 <HAL_GPIO_Init+0x204>
 80031d6:	2307      	movs	r3, #7
 80031d8:	e006      	b.n	80031e8 <HAL_GPIO_Init+0x204>
 80031da:	2303      	movs	r3, #3
 80031dc:	e004      	b.n	80031e8 <HAL_GPIO_Init+0x204>
 80031de:	2302      	movs	r3, #2
 80031e0:	e002      	b.n	80031e8 <HAL_GPIO_Init+0x204>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_GPIO_Init+0x204>
 80031e6:	2300      	movs	r3, #0
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	f002 0203 	and.w	r2, r2, #3
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	4093      	lsls	r3, r2
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f8:	4935      	ldr	r1, [pc, #212]	; (80032d0 <HAL_GPIO_Init+0x2ec>)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	3302      	adds	r3, #2
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_GPIO_Init+0x304>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322a:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_GPIO_Init+0x304>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_GPIO_Init+0x304>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_GPIO_Init+0x304>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <HAL_GPIO_Init+0x304>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800327e:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <HAL_GPIO_Init+0x304>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_GPIO_Init+0x304>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_GPIO_Init+0x304>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3301      	adds	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b0f      	cmp	r3, #15
 80032b8:	f67f aea2 	bls.w	8003000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40013800 	.word	0x40013800
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40020400 	.word	0x40020400
 80032dc:	40020800 	.word	0x40020800
 80032e0:	40020c00 	.word	0x40020c00
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40013c00 	.word	0x40013c00

080032ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	e001      	b.n	800330e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003338:	e003      	b.n	8003342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800333a:	887b      	ldrh	r3, [r7, #2]
 800333c:	041a      	lsls	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	619a      	str	r2, [r3, #24]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd fe0b 	bl	8000f8a <HAL_GPIO_EXTI_Callback>
  }
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40013c00 	.word	0x40013c00

08003380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e12b      	b.n	80035ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe fbd0 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e4:	f000 fb06 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 80033e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a81      	ldr	r2, [pc, #516]	; (80035f4 <HAL_I2C_Init+0x274>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d807      	bhi.n	8003404 <HAL_I2C_Init+0x84>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a80      	ldr	r2, [pc, #512]	; (80035f8 <HAL_I2C_Init+0x278>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e006      	b.n	8003412 <HAL_I2C_Init+0x92>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a7d      	ldr	r2, [pc, #500]	; (80035fc <HAL_I2C_Init+0x27c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	bf94      	ite	ls
 800340c:	2301      	movls	r3, #1
 800340e:	2300      	movhi	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0e7      	b.n	80035ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a78      	ldr	r2, [pc, #480]	; (8003600 <HAL_I2C_Init+0x280>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0c9b      	lsrs	r3, r3, #18
 8003424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a6a      	ldr	r2, [pc, #424]	; (80035f4 <HAL_I2C_Init+0x274>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d802      	bhi.n	8003454 <HAL_I2C_Init+0xd4>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3301      	adds	r3, #1
 8003452:	e009      	b.n	8003468 <HAL_I2C_Init+0xe8>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	4a69      	ldr	r2, [pc, #420]	; (8003604 <HAL_I2C_Init+0x284>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	3301      	adds	r3, #1
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	430b      	orrs	r3, r1
 800346e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800347a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	495c      	ldr	r1, [pc, #368]	; (80035f4 <HAL_I2C_Init+0x274>)
 8003484:	428b      	cmp	r3, r1
 8003486:	d819      	bhi.n	80034bc <HAL_I2C_Init+0x13c>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e59      	subs	r1, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fbb1 f3f3 	udiv	r3, r1, r3
 8003496:	1c59      	adds	r1, r3, #1
 8003498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800349c:	400b      	ands	r3, r1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_I2C_Init+0x138>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e59      	subs	r1, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b6:	e051      	b.n	800355c <HAL_I2C_Init+0x1dc>
 80034b8:	2304      	movs	r3, #4
 80034ba:	e04f      	b.n	800355c <HAL_I2C_Init+0x1dc>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d111      	bne.n	80034e8 <HAL_I2C_Init+0x168>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	440b      	add	r3, r1
 80034d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e012      	b.n	800350e <HAL_I2C_Init+0x18e>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1e58      	subs	r0, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6859      	ldr	r1, [r3, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	0099      	lsls	r1, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x196>
 8003512:	2301      	movs	r3, #1
 8003514:	e022      	b.n	800355c <HAL_I2C_Init+0x1dc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10e      	bne.n	800353c <HAL_I2C_Init+0x1bc>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1e58      	subs	r0, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6859      	ldr	r1, [r3, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	440b      	add	r3, r1
 800352c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003530:	3301      	adds	r3, #1
 8003532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353a:	e00f      	b.n	800355c <HAL_I2C_Init+0x1dc>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	0099      	lsls	r1, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	6809      	ldr	r1, [r1, #0]
 8003560:	4313      	orrs	r3, r2
 8003562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800358a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6911      	ldr	r1, [r2, #16]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68d2      	ldr	r2, [r2, #12]
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	430b      	orrs	r3, r1
 800359e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	000186a0 	.word	0x000186a0
 80035f8:	001e847f 	.word	0x001e847f
 80035fc:	003d08ff 	.word	0x003d08ff
 8003600:	431bde83 	.word	0x431bde83
 8003604:	10624dd3 	.word	0x10624dd3

08003608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0cc      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d90c      	bls.n	8003644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003674:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	494d      	ldr	r1, [pc, #308]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d044      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d119      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e067      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4934      	ldr	r1, [pc, #208]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fd92 	bl	8002220 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fd8e 	bl	8002220 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e04f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d20c      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e032      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4916      	ldr	r1, [pc, #88]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378e:	f000 f821 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003792:	4602      	mov	r2, r0
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	490a      	ldr	r1, [pc, #40]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	5ccb      	ldrb	r3, [r1, r3]
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fcf2 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023c00 	.word	0x40023c00
 80037c4:	40023800 	.word	0x40023800
 80037c8:	080068f4 	.word	0x080068f4
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d8:	b094      	sub	sp, #80	; 0x50
 80037da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	647b      	str	r3, [r7, #68]	; 0x44
 80037e0:	2300      	movs	r3, #0
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	2300      	movs	r3, #0
 80037e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ec:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 030c 	and.w	r3, r3, #12
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d00d      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x40>
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	f200 80e1 	bhi.w	80039c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x34>
 8003802:	2b04      	cmp	r3, #4
 8003804:	d003      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0x3a>
 8003806:	e0db      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003808:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800380a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800380c:	e0db      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380e:	4b72      	ldr	r3, [pc, #456]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003812:	e0d8      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003814:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381e:	4b6d      	ldr	r3, [pc, #436]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d063      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	2200      	movs	r2, #0
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
 8003834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
 800383e:	2300      	movs	r3, #0
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
 8003842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003846:	4622      	mov	r2, r4
 8003848:	462b      	mov	r3, r5
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	0159      	lsls	r1, r3, #5
 8003854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003858:	0150      	lsls	r0, r2, #5
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4621      	mov	r1, r4
 8003860:	1a51      	subs	r1, r2, r1
 8003862:	6139      	str	r1, [r7, #16]
 8003864:	4629      	mov	r1, r5
 8003866:	eb63 0301 	sbc.w	r3, r3, r1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003878:	4659      	mov	r1, fp
 800387a:	018b      	lsls	r3, r1, #6
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003882:	4651      	mov	r1, sl
 8003884:	018a      	lsls	r2, r1, #6
 8003886:	4651      	mov	r1, sl
 8003888:	ebb2 0801 	subs.w	r8, r2, r1
 800388c:	4659      	mov	r1, fp
 800388e:	eb63 0901 	sbc.w	r9, r3, r1
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	eb18 0303 	adds.w	r3, r8, r3
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	462b      	mov	r3, r5
 80038b4:	eb49 0303 	adc.w	r3, r9, r3
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038c6:	4629      	mov	r1, r5
 80038c8:	028b      	lsls	r3, r1, #10
 80038ca:	4621      	mov	r1, r4
 80038cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d0:	4621      	mov	r1, r4
 80038d2:	028a      	lsls	r2, r1, #10
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038da:	2200      	movs	r2, #0
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e4:	f7fc fcec 	bl	80002c0 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4613      	mov	r3, r2
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038f0:	e058      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	2200      	movs	r2, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	4611      	mov	r1, r2
 80038fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	2300      	movs	r3, #0
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	f04f 0000 	mov.w	r0, #0
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	0159      	lsls	r1, r3, #5
 800391a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800391e:	0150      	lsls	r0, r2, #5
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4641      	mov	r1, r8
 8003926:	ebb2 0a01 	subs.w	sl, r2, r1
 800392a:	4649      	mov	r1, r9
 800392c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800393c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003944:	ebb2 040a 	subs.w	r4, r2, sl
 8003948:	eb63 050b 	sbc.w	r5, r3, fp
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	00eb      	lsls	r3, r5, #3
 8003956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800395a:	00e2      	lsls	r2, r4, #3
 800395c:	4614      	mov	r4, r2
 800395e:	461d      	mov	r5, r3
 8003960:	4643      	mov	r3, r8
 8003962:	18e3      	adds	r3, r4, r3
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	464b      	mov	r3, r9
 8003968:	eb45 0303 	adc.w	r3, r5, r3
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800397a:	4629      	mov	r1, r5
 800397c:	028b      	lsls	r3, r1, #10
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003984:	4621      	mov	r1, r4
 8003986:	028a      	lsls	r2, r1, #10
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	2200      	movs	r2, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	61fa      	str	r2, [r7, #28]
 8003994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003998:	f7fc fc92 	bl	80002c0 <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	3301      	adds	r3, #1
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3750      	adds	r7, #80	; 0x50
 80039cc:	46bd      	mov	sp, r7
 80039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	00f42400 	.word	0x00f42400

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000000 	.word	0x20000000

080039f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f8:	f7ff fff0 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0a9b      	lsrs	r3, r3, #10
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4903      	ldr	r1, [pc, #12]	; (8003a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0a:	5ccb      	ldrb	r3, [r1, r3]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	08006904 	.word	0x08006904

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a20:	f7ff ffdc 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0b5b      	lsrs	r3, r3, #13
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08006904 	.word	0x08006904

08003a44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e273      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a62:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b82      	ldr	r3, [pc, #520]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e24e      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6f      	ldr	r2, [pc, #444]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6c      	ldr	r2, [pc, #432]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fb90 	bl	8002220 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fb8c 	bl	8002220 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e213      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fb7c 	bl	8002220 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fb78 	bl	8002220 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1ff      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1d3      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fe fb31 	bl	8002220 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fb2d 	bl	8002220 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1b4      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4925      	ldr	r1, [pc, #148]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fb10 	bl	8002220 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fe fb0c 	bl	8002220 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e193      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d036      	beq.n	8003c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fe faf0 	bl	8002220 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fe faec 	bl	8002220 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e173      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
 8003c62:	e01b      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7fe fad9 	bl	8002220 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fe fad5 	bl	8002220 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d907      	bls.n	8003c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e15c      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	42470000 	.word	0x42470000
 8003c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	4b8a      	ldr	r3, [pc, #552]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ea      	bne.n	8003c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8097 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b83      	ldr	r3, [pc, #524]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	4b7f      	ldr	r3, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a7e      	ldr	r2, [pc, #504]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce6:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a75      	ldr	r2, [pc, #468]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fe fa95 	bl	8002220 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fe fa91 	bl	8002220 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e118      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2ea>
 8003d20:	4b66      	ldr	r3, [pc, #408]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x30c>
 8003d36:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a60      	ldr	r2, [pc, #384]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
 8003d42:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d50:	4b5a      	ldr	r3, [pc, #360]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a59      	ldr	r2, [pc, #356]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a56      	ldr	r2, [pc, #344]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fe fa56 	bl	8002220 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fe fa52 	bl	8002220 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0d7      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ee      	beq.n	8003d78 <HAL_RCC_OscConfig+0x334>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fa40 	bl	8002220 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fe fa3c 	bl	8002220 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0c1      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ee      	bne.n	8003da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	4a3a      	ldr	r2, [pc, #232]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80ad 	beq.w	8003f3c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d060      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d145      	bne.n	8003e82 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fa10 	bl	8002220 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe fa0c 	bl	8002220 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e093      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	491b      	ldr	r1, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fe f9e1 	bl	8002220 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fe f9dd 	bl	8002220 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e064      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x41e>
 8003e80:	e05c      	b.n	8003f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe f9ca 	bl	8002220 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fe f9c6 	bl	8002220 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04d      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x44c>
 8003eae:	e045      	b.n	8003f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e040      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d030      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d129      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d122      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d119      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d10f      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07b      	b.n	8004056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6e:	d009      	beq.n	8003f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
 8003f76:	e005      	b.n	8003f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fe1c 	bl	8001bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	f003 0104 	and.w	r1, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0210 	and.w	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b088      	sub	sp, #32
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_SPI_Transmit+0x22>
 800407c:	2302      	movs	r3, #2
 800407e:	e126      	b.n	80042ce <HAL_SPI_Transmit+0x270>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004088:	f7fe f8ca 	bl	8002220 <HAL_GetTick>
 800408c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800409e:	2302      	movs	r3, #2
 80040a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a2:	e10b      	b.n	80042bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_SPI_Transmit+0x52>
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040b4:	e102      	b.n	80042bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2203      	movs	r2, #3
 80040ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	d10f      	bne.n	800411e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d007      	beq.n	800413c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	d14b      	bne.n	80041de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_SPI_Transmit+0xf6>
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d13e      	bne.n	80041d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	1c9a      	adds	r2, r3, #2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004178:	e02b      	b.n	80041d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b02      	cmp	r3, #2
 8004186:	d112      	bne.n	80041ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80041ac:	e011      	b.n	80041d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ae:	f7fe f837 	bl	8002220 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d803      	bhi.n	80041c6 <HAL_SPI_Transmit+0x168>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d102      	bne.n	80041cc <HAL_SPI_Transmit+0x16e>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041d0:	e074      	b.n	80042bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ce      	bne.n	800417a <HAL_SPI_Transmit+0x11c>
 80041dc:	e04c      	b.n	8004278 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_Transmit+0x18e>
 80041e6:	8afb      	ldrh	r3, [r7, #22]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d140      	bne.n	800426e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004212:	e02c      	b.n	800426e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d113      	bne.n	800424a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	7812      	ldrb	r2, [r2, #0]
 800422e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	86da      	strh	r2, [r3, #54]	; 0x36
 8004248:	e011      	b.n	800426e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424a:	f7fd ffe9 	bl	8002220 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d803      	bhi.n	8004262 <HAL_SPI_Transmit+0x204>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d102      	bne.n	8004268 <HAL_SPI_Transmit+0x20a>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800426c:	e026      	b.n	80042bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1cd      	bne.n	8004214 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f8b3 	bl	80043e8 <SPI_EndRxTxTransaction>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e000      	b.n	80042bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80042ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042e8:	f7fd ff9a 	bl	8002220 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042f8:	f7fd ff92 	bl	8002220 <HAL_GetTick>
 80042fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	015b      	lsls	r3, r3, #5
 8004304:	0d1b      	lsrs	r3, r3, #20
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430e:	e054      	b.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d050      	beq.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004318:	f7fd ff82 	bl	8002220 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	429a      	cmp	r2, r3
 8004326:	d902      	bls.n	800432e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d13d      	bne.n	80043aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800433c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004346:	d111      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	d004      	beq.n	800435c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d107      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004374:	d10f      	bne.n	8004396 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e017      	b.n	80043da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4013      	ands	r3, r2
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d19b      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000000 	.word	0x20000000

080043e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <SPI_EndRxTxTransaction+0x7c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <SPI_EndRxTxTransaction+0x80>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	0d5b      	lsrs	r3, r3, #21
 8004400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004412:	d112      	bne.n	800443a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2200      	movs	r2, #0
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff ff5a 	bl	80042d8 <SPI_WaitFlagStateUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e00f      	b.n	800445a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3b01      	subs	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d0f2      	beq.n	800443a <SPI_EndRxTxTransaction+0x52>
 8004454:	e000      	b.n	8004458 <SPI_EndRxTxTransaction+0x70>
        break;
 8004456:	bf00      	nop
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000000 	.word	0x20000000
 8004468:	165e9f81 	.word	0x165e9f81

0800446c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e041      	b.n	8004502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fc22 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f000 fc6c 	bl	8004d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e041      	b.n	80045a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f839 	bl	80045a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f000 fc1d 	bl	8004d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x24>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e022      	b.n	8004626 <HAL_TIM_PWM_Start+0x6a>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d109      	bne.n	80045fa <HAL_TIM_PWM_Start+0x3e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e015      	b.n	8004626 <HAL_TIM_PWM_Start+0x6a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x58>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e008      	b.n	8004626 <HAL_TIM_PWM_Start+0x6a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e07c      	b.n	8004728 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_TIM_PWM_Start+0x82>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	e013      	b.n	8004666 <HAL_TIM_PWM_Start+0xaa>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0x92>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	e00b      	b.n	8004666 <HAL_TIM_PWM_Start+0xaa>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0xa2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	e003      	b.n	8004666 <HAL_TIM_PWM_Start+0xaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2201      	movs	r2, #1
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fe74 	bl	800535c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <HAL_TIM_PWM_Start+0x174>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_PWM_Start+0xcc>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <HAL_TIM_PWM_Start+0x178>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_TIM_PWM_Start+0xd0>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_TIM_PWM_Start+0xd2>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a22      	ldr	r2, [pc, #136]	; (8004730 <HAL_TIM_PWM_Start+0x174>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d01d      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_TIM_PWM_Start+0x17c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d018      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1d      	ldr	r2, [pc, #116]	; (800473c <HAL_TIM_PWM_Start+0x180>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <HAL_TIM_PWM_Start+0x184>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_TIM_PWM_Start+0x178>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <HAL_TIM_PWM_Start+0x188>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x136>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <HAL_TIM_PWM_Start+0x18c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d111      	bne.n	8004716 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b06      	cmp	r3, #6
 8004702:	d010      	beq.n	8004726 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	e007      	b.n	8004726 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40010000 	.word	0x40010000
 8004734:	40010400 	.word	0x40010400
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40014000 	.word	0x40014000
 8004748:	40001800 	.word	0x40001800

0800474c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e041      	b.n	80047e4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f839 	bl	80047ec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 fafb 	bl	8004d88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0208 	bic.w	r2, r2, #8
 80047a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0202 	mvn.w	r2, #2
 800482c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa81 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa73 	bl	8004d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fa84 	bl	8004d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0204 	mvn.w	r2, #4
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa57 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa49 	bl	8004d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fa5a 	bl	8004d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0208 	mvn.w	r2, #8
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa2d 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa1f 	bl	8004d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa30 	bl	8004d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0210 	mvn.w	r2, #16
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2208      	movs	r2, #8
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa03 	bl	8004d4a <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9f5 	bl	8004d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa06 	bl	8004d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10e      	bne.n	8004984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d107      	bne.n	8004984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0201 	mvn.w	r2, #1
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f9cf 	bl	8004d22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	d10e      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d107      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fd82 	bl	80054b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d10e      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d107      	bne.n	80049dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9cb 	bl	8004d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d10e      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d107      	bne.n	8004a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0220 	mvn.w	r2, #32
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fd4c 	bl	80054a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e0ae      	b.n	8004b8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	f200 809f 	bhi.w	8004b7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a3e:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004b7d 	.word	0x08004b7d
 8004a4c:	08004b7d 	.word	0x08004b7d
 8004a50:	08004b7d 	.word	0x08004b7d
 8004a54:	08004ab9 	.word	0x08004ab9
 8004a58:	08004b7d 	.word	0x08004b7d
 8004a5c:	08004b7d 	.word	0x08004b7d
 8004a60:	08004b7d 	.word	0x08004b7d
 8004a64:	08004afb 	.word	0x08004afb
 8004a68:	08004b7d 	.word	0x08004b7d
 8004a6c:	08004b7d 	.word	0x08004b7d
 8004a70:	08004b7d 	.word	0x08004b7d
 8004a74:	08004b3b 	.word	0x08004b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fa22 	bl	8004ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0208 	orr.w	r2, r2, #8
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0204 	bic.w	r2, r2, #4
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	619a      	str	r2, [r3, #24]
      break;
 8004ab6:	e064      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa72 	bl	8004fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6999      	ldr	r1, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	619a      	str	r2, [r3, #24]
      break;
 8004af8:	e043      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fac7 	bl	8005094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0208 	orr.w	r2, r2, #8
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0204 	bic.w	r2, r2, #4
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	61da      	str	r2, [r3, #28]
      break;
 8004b38:	e023      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb1b 	bl	800517c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69d9      	ldr	r1, [r3, #28]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	021a      	lsls	r2, r3, #8
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	61da      	str	r2, [r3, #28]
      break;
 8004b7a:	e002      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0b4      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x186>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be8:	d03e      	beq.n	8004c68 <HAL_TIM_ConfigClockSource+0xd4>
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bee:	f200 8087 	bhi.w	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	f000 8086 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x172>
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d87f      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b70      	cmp	r3, #112	; 0x70
 8004c02:	d01a      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0xa6>
 8004c04:	2b70      	cmp	r3, #112	; 0x70
 8004c06:	d87b      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b60      	cmp	r3, #96	; 0x60
 8004c0a:	d050      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x11a>
 8004c0c:	2b60      	cmp	r3, #96	; 0x60
 8004c0e:	d877      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d03c      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xfa>
 8004c14:	2b50      	cmp	r3, #80	; 0x50
 8004c16:	d873      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d058      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x13a>
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d86f      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d064      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c24:	2b30      	cmp	r3, #48	; 0x30
 8004c26:	d86b      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d060      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d867      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d05a      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	e062      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6899      	ldr	r1, [r3, #8]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f000 fb67 	bl	800531c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	609a      	str	r2, [r3, #8]
      break;
 8004c66:	e04f      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6899      	ldr	r1, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f000 fb50 	bl	800531c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c8a:	609a      	str	r2, [r3, #8]
      break;
 8004c8c:	e03c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fac4 	bl	8005228 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2150      	movs	r1, #80	; 0x50
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fb1d 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004cac:	e02c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 fae3 	bl	8005286 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2160      	movs	r1, #96	; 0x60
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fb0d 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e01c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f000 faa4 	bl	8005228 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fafd 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004cec:	e00c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 faf4 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 8004cfe:	e003      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e000      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <TIM_Base_SetConfig+0x114>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da6:	d00f      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3d      	ldr	r2, [pc, #244]	; (8004ea0 <TIM_Base_SetConfig+0x118>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3c      	ldr	r2, [pc, #240]	; (8004ea4 <TIM_Base_SetConfig+0x11c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3b      	ldr	r2, [pc, #236]	; (8004ea8 <TIM_Base_SetConfig+0x120>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <TIM_Base_SetConfig+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d108      	bne.n	8004dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <TIM_Base_SetConfig+0x114>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02b      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de8:	d027      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2c      	ldr	r2, [pc, #176]	; (8004ea0 <TIM_Base_SetConfig+0x118>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d023      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2b      	ldr	r2, [pc, #172]	; (8004ea4 <TIM_Base_SetConfig+0x11c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01f      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ea8 <TIM_Base_SetConfig+0x120>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01b      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <TIM_Base_SetConfig+0x124>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d017      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <TIM_Base_SetConfig+0x128>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a27      	ldr	r2, [pc, #156]	; (8004eb4 <TIM_Base_SetConfig+0x12c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <TIM_Base_SetConfig+0x130>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a25      	ldr	r2, [pc, #148]	; (8004ebc <TIM_Base_SetConfig+0x134>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <TIM_Base_SetConfig+0x138>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a23      	ldr	r2, [pc, #140]	; (8004ec4 <TIM_Base_SetConfig+0x13c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <TIM_Base_SetConfig+0x114>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_Base_SetConfig+0xf8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <TIM_Base_SetConfig+0x124>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	615a      	str	r2, [r3, #20]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40010000 	.word	0x40010000
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	40001800 	.word	0x40001800
 8004ec0:	40001c00 	.word	0x40001c00
 8004ec4:	40002000 	.word	0x40002000

08004ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0201 	bic.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0302 	bic.w	r3, r3, #2
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <TIM_OC1_SetConfig+0xd8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC1_SetConfig+0x64>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <TIM_OC1_SetConfig+0xdc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10c      	bne.n	8004f46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0308 	bic.w	r3, r3, #8
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 0304 	bic.w	r3, r3, #4
 8004f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <TIM_OC1_SetConfig+0xd8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_OC1_SetConfig+0x8e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_OC1_SetConfig+0xdc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d111      	bne.n	8004f7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0210 	bic.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0320 	bic.w	r3, r3, #32
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a22      	ldr	r2, [pc, #136]	; (800508c <TIM_OC2_SetConfig+0xe4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC2_SetConfig+0x68>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a21      	ldr	r2, [pc, #132]	; (8005090 <TIM_OC2_SetConfig+0xe8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a17      	ldr	r2, [pc, #92]	; (800508c <TIM_OC2_SetConfig+0xe4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_OC2_SetConfig+0x94>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a16      	ldr	r2, [pc, #88]	; (8005090 <TIM_OC2_SetConfig+0xe8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d113      	bne.n	8005064 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400

08005094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <TIM_OC3_SetConfig+0xe0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d003      	beq.n	80050fa <TIM_OC3_SetConfig+0x66>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <TIM_OC3_SetConfig+0xe4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10d      	bne.n	8005116 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <TIM_OC3_SetConfig+0xe0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC3_SetConfig+0x92>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <TIM_OC3_SetConfig+0xe4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d113      	bne.n	800514e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800512c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40010000 	.word	0x40010000
 8005178:	40010400 	.word	0x40010400

0800517c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a12      	ldr	r2, [pc, #72]	; (8005220 <TIM_OC4_SetConfig+0xa4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC4_SetConfig+0x68>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <TIM_OC4_SetConfig+0xa8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d109      	bne.n	80051f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40010400 	.word	0x40010400

08005228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 030a 	bic.w	r3, r3, #10
 8005264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005286:	b480      	push	{r7}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0210 	bic.w	r2, r3, #16
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	031b      	lsls	r3, r3, #12
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	f043 0307 	orr.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	431a      	orrs	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	2201      	movs	r2, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e05a      	b.n	8005476 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540c:	d01d      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a18      	ldr	r2, [pc, #96]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10c      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4313      	orrs	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40010400 	.word	0x40010400
 8005498:	40014000 	.word	0x40014000
 800549c:	40001800 	.word	0x40001800

080054a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e03f      	b.n	800555a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fc fca6 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2224      	movs	r2, #36	; 0x24
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9cb 	bl	80058a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08a      	sub	sp, #40	; 0x28
 8005566:	af02      	add	r7, sp, #8
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b20      	cmp	r3, #32
 8005580:	d17c      	bne.n	800567c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_UART_Transmit+0x2c>
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e075      	b.n	800567e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UART_Transmit+0x3e>
 800559c:	2302      	movs	r3, #2
 800559e:	e06e      	b.n	800567e <HAL_UART_Transmit+0x11c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2221      	movs	r2, #33	; 0x21
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b6:	f7fc fe33 	bl	8002220 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	88fa      	ldrh	r2, [r7, #6]
 80055c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d0:	d108      	bne.n	80055e4 <HAL_UART_Transmit+0x82>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e003      	b.n	80055ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055f4:	e02a      	b.n	800564c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f8e2 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e036      	b.n	800567e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005624:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	3302      	adds	r3, #2
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e007      	b.n	800563e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	3301      	adds	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1cf      	bne.n	80055f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	2140      	movs	r1, #64	; 0x40
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f8b2 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e006      	b.n	800567e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b08a      	sub	sp, #40	; 0x28
 800568a:	af02      	add	r7, sp, #8
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	f040 808c 	bne.w	80057c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_UART_Receive+0x2e>
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e084      	b.n	80057c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Receive+0x40>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e07d      	b.n	80057c2 <HAL_UART_Receive+0x13c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2222      	movs	r2, #34	; 0x22
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e2:	f7fc fd9d 	bl	8002220 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	88fa      	ldrh	r2, [r7, #6]
 80056f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fc:	d108      	bne.n	8005710 <HAL_UART_Receive+0x8a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e003      	b.n	8005718 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005720:	e043      	b.n	80057aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2200      	movs	r2, #0
 800572a:	2120      	movs	r1, #32
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f84c 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e042      	b.n	80057c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10c      	bne.n	800575c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	b29b      	uxth	r3, r3
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	b29a      	uxth	r2, r3
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	3302      	adds	r3, #2
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	e01f      	b.n	800579c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	d007      	beq.n	8005776 <HAL_UART_Receive+0xf0>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_UART_Receive+0xfe>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e008      	b.n	8005796 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1b6      	bne.n	8005722 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b090      	sub	sp, #64	; 0x40
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	e050      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d04c      	beq.n	800587e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0x30>
 80057ea:	f7fc fd19 	bl	8002220 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d241      	bcs.n	800587e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800581a:	637a      	str	r2, [r7, #52]	; 0x34
 800581c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	613b      	str	r3, [r7, #16]
   return(result);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	63bb      	str	r3, [r7, #56]	; 0x38
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584e:	623a      	str	r2, [r7, #32]
 8005850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	69f9      	ldr	r1, [r7, #28]
 8005854:	6a3a      	ldr	r2, [r7, #32]
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	61bb      	str	r3, [r7, #24]
   return(result);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e00f      	b.n	800589e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	429a      	cmp	r2, r3
 800589a:	d09f      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3740      	adds	r7, #64	; 0x40
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b0c0      	sub	sp, #256	; 0x100
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	68d9      	ldr	r1, [r3, #12]
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	ea40 0301 	orr.w	r3, r0, r1
 80058d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	431a      	orrs	r2, r3
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005900:	f021 010c 	bic.w	r1, r1, #12
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800590e:	430b      	orrs	r3, r1
 8005910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	6999      	ldr	r1, [r3, #24]
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	ea40 0301 	orr.w	r3, r0, r1
 800592e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b8f      	ldr	r3, [pc, #572]	; (8005b74 <UART_SetConfig+0x2cc>)
 8005938:	429a      	cmp	r2, r3
 800593a:	d005      	beq.n	8005948 <UART_SetConfig+0xa0>
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <UART_SetConfig+0x2d0>)
 8005944:	429a      	cmp	r2, r3
 8005946:	d104      	bne.n	8005952 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005948:	f7fe f868 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 800594c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005950:	e003      	b.n	800595a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005952:	f7fe f84f 	bl	80039f4 <HAL_RCC_GetPCLK1Freq>
 8005956:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005964:	f040 810c 	bne.w	8005b80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596c:	2200      	movs	r2, #0
 800596e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005972:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005976:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800597a:	4622      	mov	r2, r4
 800597c:	462b      	mov	r3, r5
 800597e:	1891      	adds	r1, r2, r2
 8005980:	65b9      	str	r1, [r7, #88]	; 0x58
 8005982:	415b      	adcs	r3, r3
 8005984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800598a:	4621      	mov	r1, r4
 800598c:	eb12 0801 	adds.w	r8, r2, r1
 8005990:	4629      	mov	r1, r5
 8005992:	eb43 0901 	adc.w	r9, r3, r1
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059aa:	4690      	mov	r8, r2
 80059ac:	4699      	mov	r9, r3
 80059ae:	4623      	mov	r3, r4
 80059b0:	eb18 0303 	adds.w	r3, r8, r3
 80059b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059b8:	462b      	mov	r3, r5
 80059ba:	eb49 0303 	adc.w	r3, r9, r3
 80059be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059d6:	460b      	mov	r3, r1
 80059d8:	18db      	adds	r3, r3, r3
 80059da:	653b      	str	r3, [r7, #80]	; 0x50
 80059dc:	4613      	mov	r3, r2
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
 80059e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059ec:	f7fa fc68 	bl	80002c0 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <UART_SetConfig+0x2d4>)
 80059f6:	fba3 2302 	umull	r2, r3, r3, r2
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	011c      	lsls	r4, r3, #4
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a20:	4641      	mov	r1, r8
 8005a22:	eb12 0a01 	adds.w	sl, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb43 0b01 	adc.w	fp, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a40:	4692      	mov	sl, r2
 8005a42:	469b      	mov	fp, r3
 8005a44:	4643      	mov	r3, r8
 8005a46:	eb1a 0303 	adds.w	r3, sl, r3
 8005a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	eb4b 0303 	adc.w	r3, fp, r3
 8005a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	18db      	adds	r3, r3, r3
 8005a70:	643b      	str	r3, [r7, #64]	; 0x40
 8005a72:	4613      	mov	r3, r2
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a82:	f7fa fc1d 	bl	80002c0 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <UART_SetConfig+0x2d4>)
 8005a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2264      	movs	r2, #100	; 0x64
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	1acb      	subs	r3, r1, r3
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aa2:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <UART_SetConfig+0x2d4>)
 8005aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ab0:	441c      	add	r4, r3
 8005ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005abc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ac0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	1891      	adds	r1, r2, r2
 8005aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8005acc:	415b      	adcs	r3, r3
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	1851      	adds	r1, r2, r1
 8005ad8:	6339      	str	r1, [r7, #48]	; 0x30
 8005ada:	4649      	mov	r1, r9
 8005adc:	414b      	adcs	r3, r1
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005aec:	4659      	mov	r1, fp
 8005aee:	00cb      	lsls	r3, r1, #3
 8005af0:	4651      	mov	r1, sl
 8005af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af6:	4651      	mov	r1, sl
 8005af8:	00ca      	lsls	r2, r1, #3
 8005afa:	4610      	mov	r0, r2
 8005afc:	4619      	mov	r1, r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	4642      	mov	r2, r8
 8005b02:	189b      	adds	r3, r3, r2
 8005b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b08:	464b      	mov	r3, r9
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	eb42 0303 	adc.w	r3, r2, r3
 8005b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b28:	460b      	mov	r3, r1
 8005b2a:	18db      	adds	r3, r3, r3
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2e:	4613      	mov	r3, r2
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b3e:	f7fa fbbf 	bl	80002c0 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <UART_SetConfig+0x2d4>)
 8005b48:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	2164      	movs	r1, #100	; 0x64
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	3332      	adds	r3, #50	; 0x32
 8005b5a:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <UART_SetConfig+0x2d4>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	f003 0207 	and.w	r2, r3, #7
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4422      	add	r2, r4
 8005b6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b70:	e105      	b.n	8005d7e <UART_SetConfig+0x4d6>
 8005b72:	bf00      	nop
 8005b74:	40011000 	.word	0x40011000
 8005b78:	40011400 	.word	0x40011400
 8005b7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b92:	4642      	mov	r2, r8
 8005b94:	464b      	mov	r3, r9
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	6239      	str	r1, [r7, #32]
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	1854      	adds	r4, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb43 0501 	adc.w	r5, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	00eb      	lsls	r3, r5, #3
 8005bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bba:	00e2      	lsls	r2, r4, #3
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	4643      	mov	r3, r8
 8005bc2:	18e3      	adds	r3, r4, r3
 8005bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bc8:	464b      	mov	r3, r9
 8005bca:	eb45 0303 	adc.w	r3, r5, r3
 8005bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bee:	4629      	mov	r1, r5
 8005bf0:	008b      	lsls	r3, r1, #2
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	008a      	lsls	r2, r1, #2
 8005bfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c00:	f7fa fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4b60      	ldr	r3, [pc, #384]	; (8005d8c <UART_SetConfig+0x4e4>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	011c      	lsls	r4, r3, #4
 8005c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	1891      	adds	r1, r2, r2
 8005c2a:	61b9      	str	r1, [r7, #24]
 8005c2c:	415b      	adcs	r3, r3
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c34:	4641      	mov	r1, r8
 8005c36:	1851      	adds	r1, r2, r1
 8005c38:	6139      	str	r1, [r7, #16]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	414b      	adcs	r3, r1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	00cb      	lsls	r3, r1, #3
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c56:	4651      	mov	r1, sl
 8005c58:	00ca      	lsls	r2, r1, #3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4642      	mov	r2, r8
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c68:	464b      	mov	r3, r9
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	008b      	lsls	r3, r1, #2
 8005c90:	4641      	mov	r1, r8
 8005c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c96:	4641      	mov	r1, r8
 8005c98:	008a      	lsls	r2, r1, #2
 8005c9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c9e:	f7fa fb0f 	bl	80002c0 <__aeabi_uldivmod>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <UART_SetConfig+0x4e4>)
 8005ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	2164      	movs	r1, #100	; 0x64
 8005cb0:	fb01 f303 	mul.w	r3, r1, r3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	3332      	adds	r3, #50	; 0x32
 8005cba:	4a34      	ldr	r2, [pc, #208]	; (8005d8c <UART_SetConfig+0x4e4>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc6:	441c      	add	r4, r3
 8005cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ccc:	2200      	movs	r2, #0
 8005cce:	673b      	str	r3, [r7, #112]	; 0x70
 8005cd0:	677a      	str	r2, [r7, #116]	; 0x74
 8005cd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	464b      	mov	r3, r9
 8005cda:	1891      	adds	r1, r2, r2
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	415b      	adcs	r3, r3
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	1851      	adds	r1, r2, r1
 8005cea:	6039      	str	r1, [r7, #0]
 8005cec:	4649      	mov	r1, r9
 8005cee:	414b      	adcs	r3, r1
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cfe:	4659      	mov	r1, fp
 8005d00:	00cb      	lsls	r3, r1, #3
 8005d02:	4651      	mov	r1, sl
 8005d04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d08:	4651      	mov	r1, sl
 8005d0a:	00ca      	lsls	r2, r1, #3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4603      	mov	r3, r0
 8005d12:	4642      	mov	r2, r8
 8005d14:	189b      	adds	r3, r3, r2
 8005d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d18:	464b      	mov	r3, r9
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	eb42 0303 	adc.w	r3, r2, r3
 8005d20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d2c:	667a      	str	r2, [r7, #100]	; 0x64
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	008b      	lsls	r3, r1, #2
 8005d3e:	4641      	mov	r1, r8
 8005d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d44:	4641      	mov	r1, r8
 8005d46:	008a      	lsls	r2, r1, #2
 8005d48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d4c:	f7fa fab8 	bl	80002c0 <__aeabi_uldivmod>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <UART_SetConfig+0x4e4>)
 8005d56:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2164      	movs	r1, #100	; 0x64
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	3332      	adds	r3, #50	; 0x32
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <UART_SetConfig+0x4e4>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4422      	add	r2, r4
 8005d7c:	609a      	str	r2, [r3, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	51eb851f 	.word	0x51eb851f

08005d90 <_ZdlPvj>:
 8005d90:	f000 b813 	b.w	8005dba <_ZdlPv>

08005d94 <_ZdaPv>:
 8005d94:	f000 b811 	b.w	8005dba <_ZdlPv>

08005d98 <__cxa_guard_acquire>:
 8005d98:	6803      	ldr	r3, [r0, #0]
 8005d9a:	07db      	lsls	r3, r3, #31
 8005d9c:	d406      	bmi.n	8005dac <__cxa_guard_acquire+0x14>
 8005d9e:	7843      	ldrb	r3, [r0, #1]
 8005da0:	b103      	cbz	r3, 8005da4 <__cxa_guard_acquire+0xc>
 8005da2:	deff      	udf	#255	; 0xff
 8005da4:	2301      	movs	r3, #1
 8005da6:	7043      	strb	r3, [r0, #1]
 8005da8:	4618      	mov	r0, r3
 8005daa:	4770      	bx	lr
 8005dac:	2000      	movs	r0, #0
 8005dae:	4770      	bx	lr

08005db0 <__cxa_guard_release>:
 8005db0:	2301      	movs	r3, #1
 8005db2:	6003      	str	r3, [r0, #0]
 8005db4:	4770      	bx	lr

08005db6 <_Znaj>:
 8005db6:	f000 b802 	b.w	8005dbe <_Znwj>

08005dba <_ZdlPv>:
 8005dba:	f000 b853 	b.w	8005e64 <free>

08005dbe <_Znwj>:
 8005dbe:	2801      	cmp	r0, #1
 8005dc0:	bf38      	it	cc
 8005dc2:	2001      	movcc	r0, #1
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 f843 	bl	8005e54 <malloc>
 8005dce:	b930      	cbnz	r0, 8005dde <_Znwj+0x20>
 8005dd0:	f000 f806 	bl	8005de0 <_ZSt15get_new_handlerv>
 8005dd4:	b908      	cbnz	r0, 8005dda <_Znwj+0x1c>
 8005dd6:	f000 f80b 	bl	8005df0 <abort>
 8005dda:	4780      	blx	r0
 8005ddc:	e7f4      	b.n	8005dc8 <_Znwj+0xa>
 8005dde:	bd10      	pop	{r4, pc}

08005de0 <_ZSt15get_new_handlerv>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <_ZSt15get_new_handlerv+0xc>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	f3bf 8f5b 	dmb	ish
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000444 	.word	0x20000444

08005df0 <abort>:
 8005df0:	b508      	push	{r3, lr}
 8005df2:	2006      	movs	r0, #6
 8005df4:	f000 f95e 	bl	80060b4 <raise>
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f7fc f92f 	bl	800205c <_exit>
	...

08005e00 <__errno>:
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <__errno+0x8>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	2000000c 	.word	0x2000000c

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4d0d      	ldr	r5, [pc, #52]	; (8005e44 <__libc_init_array+0x38>)
 8005e10:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	2600      	movs	r6, #0
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	4d0b      	ldr	r5, [pc, #44]	; (8005e4c <__libc_init_array+0x40>)
 8005e1e:	4c0c      	ldr	r4, [pc, #48]	; (8005e50 <__libc_init_array+0x44>)
 8005e20:	f000 fcf6 	bl	8006810 <_init>
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	2600      	movs	r6, #0
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	08006950 	.word	0x08006950
 8005e48:	08006950 	.word	0x08006950
 8005e4c:	08006950 	.word	0x08006950
 8005e50:	08006958 	.word	0x08006958

08005e54 <malloc>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <malloc+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f000 b87f 	b.w	8005f5c <_malloc_r>
 8005e5e:	bf00      	nop
 8005e60:	2000000c 	.word	0x2000000c

08005e64 <free>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <free+0xc>)
 8005e66:	4601      	mov	r1, r0
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	f000 b80b 	b.w	8005e84 <_free_r>
 8005e6e:	bf00      	nop
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <memset>:
 8005e74:	4402      	add	r2, r0
 8005e76:	4603      	mov	r3, r0
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <memset+0xa>
 8005e7c:	4770      	bx	lr
 8005e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e82:	e7f9      	b.n	8005e78 <memset+0x4>

08005e84 <_free_r>:
 8005e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e86:	2900      	cmp	r1, #0
 8005e88:	d044      	beq.n	8005f14 <_free_r+0x90>
 8005e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8e:	9001      	str	r0, [sp, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f1a1 0404 	sub.w	r4, r1, #4
 8005e96:	bfb8      	it	lt
 8005e98:	18e4      	addlt	r4, r4, r3
 8005e9a:	f000 f95b 	bl	8006154 <__malloc_lock>
 8005e9e:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <_free_r+0x94>)
 8005ea0:	9801      	ldr	r0, [sp, #4]
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	b933      	cbnz	r3, 8005eb4 <_free_r+0x30>
 8005ea6:	6063      	str	r3, [r4, #4]
 8005ea8:	6014      	str	r4, [r2, #0]
 8005eaa:	b003      	add	sp, #12
 8005eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eb0:	f000 b956 	b.w	8006160 <__malloc_unlock>
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d908      	bls.n	8005eca <_free_r+0x46>
 8005eb8:	6825      	ldr	r5, [r4, #0]
 8005eba:	1961      	adds	r1, r4, r5
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	bf01      	itttt	eq
 8005ec0:	6819      	ldreq	r1, [r3, #0]
 8005ec2:	685b      	ldreq	r3, [r3, #4]
 8005ec4:	1949      	addeq	r1, r1, r5
 8005ec6:	6021      	streq	r1, [r4, #0]
 8005ec8:	e7ed      	b.n	8005ea6 <_free_r+0x22>
 8005eca:	461a      	mov	r2, r3
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	b10b      	cbz	r3, 8005ed4 <_free_r+0x50>
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	d9fa      	bls.n	8005eca <_free_r+0x46>
 8005ed4:	6811      	ldr	r1, [r2, #0]
 8005ed6:	1855      	adds	r5, r2, r1
 8005ed8:	42a5      	cmp	r5, r4
 8005eda:	d10b      	bne.n	8005ef4 <_free_r+0x70>
 8005edc:	6824      	ldr	r4, [r4, #0]
 8005ede:	4421      	add	r1, r4
 8005ee0:	1854      	adds	r4, r2, r1
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	6011      	str	r1, [r2, #0]
 8005ee6:	d1e0      	bne.n	8005eaa <_free_r+0x26>
 8005ee8:	681c      	ldr	r4, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	6053      	str	r3, [r2, #4]
 8005eee:	4421      	add	r1, r4
 8005ef0:	6011      	str	r1, [r2, #0]
 8005ef2:	e7da      	b.n	8005eaa <_free_r+0x26>
 8005ef4:	d902      	bls.n	8005efc <_free_r+0x78>
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	e7d6      	b.n	8005eaa <_free_r+0x26>
 8005efc:	6825      	ldr	r5, [r4, #0]
 8005efe:	1961      	adds	r1, r4, r5
 8005f00:	428b      	cmp	r3, r1
 8005f02:	bf04      	itt	eq
 8005f04:	6819      	ldreq	r1, [r3, #0]
 8005f06:	685b      	ldreq	r3, [r3, #4]
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	bf04      	itt	eq
 8005f0c:	1949      	addeq	r1, r1, r5
 8005f0e:	6021      	streq	r1, [r4, #0]
 8005f10:	6054      	str	r4, [r2, #4]
 8005f12:	e7ca      	b.n	8005eaa <_free_r+0x26>
 8005f14:	b003      	add	sp, #12
 8005f16:	bd30      	pop	{r4, r5, pc}
 8005f18:	20000448 	.word	0x20000448

08005f1c <sbrk_aligned>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4e0e      	ldr	r6, [pc, #56]	; (8005f58 <sbrk_aligned+0x3c>)
 8005f20:	460c      	mov	r4, r1
 8005f22:	6831      	ldr	r1, [r6, #0]
 8005f24:	4605      	mov	r5, r0
 8005f26:	b911      	cbnz	r1, 8005f2e <sbrk_aligned+0x12>
 8005f28:	f000 f88c 	bl	8006044 <_sbrk_r>
 8005f2c:	6030      	str	r0, [r6, #0]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 f887 	bl	8006044 <_sbrk_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d00a      	beq.n	8005f50 <sbrk_aligned+0x34>
 8005f3a:	1cc4      	adds	r4, r0, #3
 8005f3c:	f024 0403 	bic.w	r4, r4, #3
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d007      	beq.n	8005f54 <sbrk_aligned+0x38>
 8005f44:	1a21      	subs	r1, r4, r0
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f87c 	bl	8006044 <_sbrk_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d101      	bne.n	8005f54 <sbrk_aligned+0x38>
 8005f50:	f04f 34ff 	mov.w	r4, #4294967295
 8005f54:	4620      	mov	r0, r4
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	2000044c 	.word	0x2000044c

08005f5c <_malloc_r>:
 8005f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	1ccd      	adds	r5, r1, #3
 8005f62:	f025 0503 	bic.w	r5, r5, #3
 8005f66:	3508      	adds	r5, #8
 8005f68:	2d0c      	cmp	r5, #12
 8005f6a:	bf38      	it	cc
 8005f6c:	250c      	movcc	r5, #12
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	4607      	mov	r7, r0
 8005f72:	db01      	blt.n	8005f78 <_malloc_r+0x1c>
 8005f74:	42a9      	cmp	r1, r5
 8005f76:	d905      	bls.n	8005f84 <_malloc_r+0x28>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	2600      	movs	r6, #0
 8005f7e:	4630      	mov	r0, r6
 8005f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f84:	4e2e      	ldr	r6, [pc, #184]	; (8006040 <_malloc_r+0xe4>)
 8005f86:	f000 f8e5 	bl	8006154 <__malloc_lock>
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	461c      	mov	r4, r3
 8005f8e:	bb34      	cbnz	r4, 8005fde <_malloc_r+0x82>
 8005f90:	4629      	mov	r1, r5
 8005f92:	4638      	mov	r0, r7
 8005f94:	f7ff ffc2 	bl	8005f1c <sbrk_aligned>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	d14d      	bne.n	800603a <_malloc_r+0xde>
 8005f9e:	6834      	ldr	r4, [r6, #0]
 8005fa0:	4626      	mov	r6, r4
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d140      	bne.n	8006028 <_malloc_r+0xcc>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4638      	mov	r0, r7
 8005fac:	eb04 0803 	add.w	r8, r4, r3
 8005fb0:	f000 f848 	bl	8006044 <_sbrk_r>
 8005fb4:	4580      	cmp	r8, r0
 8005fb6:	d13a      	bne.n	800602e <_malloc_r+0xd2>
 8005fb8:	6821      	ldr	r1, [r4, #0]
 8005fba:	3503      	adds	r5, #3
 8005fbc:	1a6d      	subs	r5, r5, r1
 8005fbe:	f025 0503 	bic.w	r5, r5, #3
 8005fc2:	3508      	adds	r5, #8
 8005fc4:	2d0c      	cmp	r5, #12
 8005fc6:	bf38      	it	cc
 8005fc8:	250c      	movcc	r5, #12
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff ffa5 	bl	8005f1c <sbrk_aligned>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d02b      	beq.n	800602e <_malloc_r+0xd2>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	442b      	add	r3, r5
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	e00e      	b.n	8005ffc <_malloc_r+0xa0>
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	1b52      	subs	r2, r2, r5
 8005fe2:	d41e      	bmi.n	8006022 <_malloc_r+0xc6>
 8005fe4:	2a0b      	cmp	r2, #11
 8005fe6:	d916      	bls.n	8006016 <_malloc_r+0xba>
 8005fe8:	1961      	adds	r1, r4, r5
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	6025      	str	r5, [r4, #0]
 8005fee:	bf18      	it	ne
 8005ff0:	6059      	strne	r1, [r3, #4]
 8005ff2:	6863      	ldr	r3, [r4, #4]
 8005ff4:	bf08      	it	eq
 8005ff6:	6031      	streq	r1, [r6, #0]
 8005ff8:	5162      	str	r2, [r4, r5]
 8005ffa:	604b      	str	r3, [r1, #4]
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f104 060b 	add.w	r6, r4, #11
 8006002:	f000 f8ad 	bl	8006160 <__malloc_unlock>
 8006006:	f026 0607 	bic.w	r6, r6, #7
 800600a:	1d23      	adds	r3, r4, #4
 800600c:	1af2      	subs	r2, r6, r3
 800600e:	d0b6      	beq.n	8005f7e <_malloc_r+0x22>
 8006010:	1b9b      	subs	r3, r3, r6
 8006012:	50a3      	str	r3, [r4, r2]
 8006014:	e7b3      	b.n	8005f7e <_malloc_r+0x22>
 8006016:	6862      	ldr	r2, [r4, #4]
 8006018:	42a3      	cmp	r3, r4
 800601a:	bf0c      	ite	eq
 800601c:	6032      	streq	r2, [r6, #0]
 800601e:	605a      	strne	r2, [r3, #4]
 8006020:	e7ec      	b.n	8005ffc <_malloc_r+0xa0>
 8006022:	4623      	mov	r3, r4
 8006024:	6864      	ldr	r4, [r4, #4]
 8006026:	e7b2      	b.n	8005f8e <_malloc_r+0x32>
 8006028:	4634      	mov	r4, r6
 800602a:	6876      	ldr	r6, [r6, #4]
 800602c:	e7b9      	b.n	8005fa2 <_malloc_r+0x46>
 800602e:	230c      	movs	r3, #12
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4638      	mov	r0, r7
 8006034:	f000 f894 	bl	8006160 <__malloc_unlock>
 8006038:	e7a1      	b.n	8005f7e <_malloc_r+0x22>
 800603a:	6025      	str	r5, [r4, #0]
 800603c:	e7de      	b.n	8005ffc <_malloc_r+0xa0>
 800603e:	bf00      	nop
 8006040:	20000448 	.word	0x20000448

08006044 <_sbrk_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_sbrk_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fc f80e 	bl	8002070 <_sbrk>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_sbrk_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_sbrk_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20000450 	.word	0x20000450

08006064 <_raise_r>:
 8006064:	291f      	cmp	r1, #31
 8006066:	b538      	push	{r3, r4, r5, lr}
 8006068:	4604      	mov	r4, r0
 800606a:	460d      	mov	r5, r1
 800606c:	d904      	bls.n	8006078 <_raise_r+0x14>
 800606e:	2316      	movs	r3, #22
 8006070:	6003      	str	r3, [r0, #0]
 8006072:	f04f 30ff 	mov.w	r0, #4294967295
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800607a:	b112      	cbz	r2, 8006082 <_raise_r+0x1e>
 800607c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006080:	b94b      	cbnz	r3, 8006096 <_raise_r+0x32>
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f830 	bl	80060e8 <_getpid_r>
 8006088:	462a      	mov	r2, r5
 800608a:	4601      	mov	r1, r0
 800608c:	4620      	mov	r0, r4
 800608e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006092:	f000 b817 	b.w	80060c4 <_kill_r>
 8006096:	2b01      	cmp	r3, #1
 8006098:	d00a      	beq.n	80060b0 <_raise_r+0x4c>
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	d103      	bne.n	80060a6 <_raise_r+0x42>
 800609e:	2316      	movs	r3, #22
 80060a0:	6003      	str	r3, [r0, #0]
 80060a2:	2001      	movs	r0, #1
 80060a4:	e7e7      	b.n	8006076 <_raise_r+0x12>
 80060a6:	2400      	movs	r4, #0
 80060a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060ac:	4628      	mov	r0, r5
 80060ae:	4798      	blx	r3
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7e0      	b.n	8006076 <_raise_r+0x12>

080060b4 <raise>:
 80060b4:	4b02      	ldr	r3, [pc, #8]	; (80060c0 <raise+0xc>)
 80060b6:	4601      	mov	r1, r0
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	f7ff bfd3 	b.w	8006064 <_raise_r>
 80060be:	bf00      	nop
 80060c0:	2000000c 	.word	0x2000000c

080060c4 <_kill_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	; (80060e4 <_kill_r+0x20>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	4611      	mov	r1, r2
 80060d0:	602b      	str	r3, [r5, #0]
 80060d2:	f7fb ffb3 	bl	800203c <_kill>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	d102      	bne.n	80060e0 <_kill_r+0x1c>
 80060da:	682b      	ldr	r3, [r5, #0]
 80060dc:	b103      	cbz	r3, 80060e0 <_kill_r+0x1c>
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	bd38      	pop	{r3, r4, r5, pc}
 80060e2:	bf00      	nop
 80060e4:	20000450 	.word	0x20000450

080060e8 <_getpid_r>:
 80060e8:	f7fb bfa0 	b.w	800202c <_getpid>

080060ec <sniprintf>:
 80060ec:	b40c      	push	{r2, r3}
 80060ee:	b530      	push	{r4, r5, lr}
 80060f0:	4b17      	ldr	r3, [pc, #92]	; (8006150 <sniprintf+0x64>)
 80060f2:	1e0c      	subs	r4, r1, #0
 80060f4:	681d      	ldr	r5, [r3, #0]
 80060f6:	b09d      	sub	sp, #116	; 0x74
 80060f8:	da08      	bge.n	800610c <sniprintf+0x20>
 80060fa:	238b      	movs	r3, #139	; 0x8b
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006102:	b01d      	add	sp, #116	; 0x74
 8006104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006108:	b002      	add	sp, #8
 800610a:	4770      	bx	lr
 800610c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006110:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006114:	bf14      	ite	ne
 8006116:	f104 33ff 	addne.w	r3, r4, #4294967295
 800611a:	4623      	moveq	r3, r4
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006124:	9002      	str	r0, [sp, #8]
 8006126:	9006      	str	r0, [sp, #24]
 8006128:	f8ad 3016 	strh.w	r3, [sp, #22]
 800612c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800612e:	ab21      	add	r3, sp, #132	; 0x84
 8006130:	a902      	add	r1, sp, #8
 8006132:	4628      	mov	r0, r5
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	f000 f875 	bl	8006224 <_svfiprintf_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	bfbc      	itt	lt
 800613e:	238b      	movlt	r3, #139	; 0x8b
 8006140:	602b      	strlt	r3, [r5, #0]
 8006142:	2c00      	cmp	r4, #0
 8006144:	d0dd      	beq.n	8006102 <sniprintf+0x16>
 8006146:	9b02      	ldr	r3, [sp, #8]
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e7d9      	b.n	8006102 <sniprintf+0x16>
 800614e:	bf00      	nop
 8006150:	2000000c 	.word	0x2000000c

08006154 <__malloc_lock>:
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <__malloc_lock+0x8>)
 8006156:	f000 baf9 	b.w	800674c <__retarget_lock_acquire_recursive>
 800615a:	bf00      	nop
 800615c:	20000454 	.word	0x20000454

08006160 <__malloc_unlock>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__malloc_unlock+0x8>)
 8006162:	f000 baf4 	b.w	800674e <__retarget_lock_release_recursive>
 8006166:	bf00      	nop
 8006168:	20000454 	.word	0x20000454

0800616c <__ssputs_r>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	688e      	ldr	r6, [r1, #8]
 8006172:	429e      	cmp	r6, r3
 8006174:	4682      	mov	sl, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4690      	mov	r8, r2
 800617a:	461f      	mov	r7, r3
 800617c:	d838      	bhi.n	80061f0 <__ssputs_r+0x84>
 800617e:	898a      	ldrh	r2, [r1, #12]
 8006180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006184:	d032      	beq.n	80061ec <__ssputs_r+0x80>
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	6909      	ldr	r1, [r1, #16]
 800618a:	eba5 0901 	sub.w	r9, r5, r1
 800618e:	6965      	ldr	r5, [r4, #20]
 8006190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006198:	3301      	adds	r3, #1
 800619a:	444b      	add	r3, r9
 800619c:	106d      	asrs	r5, r5, #1
 800619e:	429d      	cmp	r5, r3
 80061a0:	bf38      	it	cc
 80061a2:	461d      	movcc	r5, r3
 80061a4:	0553      	lsls	r3, r2, #21
 80061a6:	d531      	bpl.n	800620c <__ssputs_r+0xa0>
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7ff fed7 	bl	8005f5c <_malloc_r>
 80061ae:	4606      	mov	r6, r0
 80061b0:	b950      	cbnz	r0, 80061c8 <__ssputs_r+0x5c>
 80061b2:	230c      	movs	r3, #12
 80061b4:	f8ca 3000 	str.w	r3, [sl]
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	6921      	ldr	r1, [r4, #16]
 80061ca:	464a      	mov	r2, r9
 80061cc:	f000 fac0 	bl	8006750 <memcpy>
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	6126      	str	r6, [r4, #16]
 80061de:	6165      	str	r5, [r4, #20]
 80061e0:	444e      	add	r6, r9
 80061e2:	eba5 0509 	sub.w	r5, r5, r9
 80061e6:	6026      	str	r6, [r4, #0]
 80061e8:	60a5      	str	r5, [r4, #8]
 80061ea:	463e      	mov	r6, r7
 80061ec:	42be      	cmp	r6, r7
 80061ee:	d900      	bls.n	80061f2 <__ssputs_r+0x86>
 80061f0:	463e      	mov	r6, r7
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	4632      	mov	r2, r6
 80061f6:	4641      	mov	r1, r8
 80061f8:	f000 fab8 	bl	800676c <memmove>
 80061fc:	68a3      	ldr	r3, [r4, #8]
 80061fe:	1b9b      	subs	r3, r3, r6
 8006200:	60a3      	str	r3, [r4, #8]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	4433      	add	r3, r6
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	2000      	movs	r0, #0
 800620a:	e7db      	b.n	80061c4 <__ssputs_r+0x58>
 800620c:	462a      	mov	r2, r5
 800620e:	f000 fac7 	bl	80067a0 <_realloc_r>
 8006212:	4606      	mov	r6, r0
 8006214:	2800      	cmp	r0, #0
 8006216:	d1e1      	bne.n	80061dc <__ssputs_r+0x70>
 8006218:	6921      	ldr	r1, [r4, #16]
 800621a:	4650      	mov	r0, sl
 800621c:	f7ff fe32 	bl	8005e84 <_free_r>
 8006220:	e7c7      	b.n	80061b2 <__ssputs_r+0x46>
	...

08006224 <_svfiprintf_r>:
 8006224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006228:	4698      	mov	r8, r3
 800622a:	898b      	ldrh	r3, [r1, #12]
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	b09d      	sub	sp, #116	; 0x74
 8006230:	4607      	mov	r7, r0
 8006232:	460d      	mov	r5, r1
 8006234:	4614      	mov	r4, r2
 8006236:	d50e      	bpl.n	8006256 <_svfiprintf_r+0x32>
 8006238:	690b      	ldr	r3, [r1, #16]
 800623a:	b963      	cbnz	r3, 8006256 <_svfiprintf_r+0x32>
 800623c:	2140      	movs	r1, #64	; 0x40
 800623e:	f7ff fe8d 	bl	8005f5c <_malloc_r>
 8006242:	6028      	str	r0, [r5, #0]
 8006244:	6128      	str	r0, [r5, #16]
 8006246:	b920      	cbnz	r0, 8006252 <_svfiprintf_r+0x2e>
 8006248:	230c      	movs	r3, #12
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	e0d1      	b.n	80063f6 <_svfiprintf_r+0x1d2>
 8006252:	2340      	movs	r3, #64	; 0x40
 8006254:	616b      	str	r3, [r5, #20]
 8006256:	2300      	movs	r3, #0
 8006258:	9309      	str	r3, [sp, #36]	; 0x24
 800625a:	2320      	movs	r3, #32
 800625c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006260:	f8cd 800c 	str.w	r8, [sp, #12]
 8006264:	2330      	movs	r3, #48	; 0x30
 8006266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006410 <_svfiprintf_r+0x1ec>
 800626a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800626e:	f04f 0901 	mov.w	r9, #1
 8006272:	4623      	mov	r3, r4
 8006274:	469a      	mov	sl, r3
 8006276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800627a:	b10a      	cbz	r2, 8006280 <_svfiprintf_r+0x5c>
 800627c:	2a25      	cmp	r2, #37	; 0x25
 800627e:	d1f9      	bne.n	8006274 <_svfiprintf_r+0x50>
 8006280:	ebba 0b04 	subs.w	fp, sl, r4
 8006284:	d00b      	beq.n	800629e <_svfiprintf_r+0x7a>
 8006286:	465b      	mov	r3, fp
 8006288:	4622      	mov	r2, r4
 800628a:	4629      	mov	r1, r5
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff ff6d 	bl	800616c <__ssputs_r>
 8006292:	3001      	adds	r0, #1
 8006294:	f000 80aa 	beq.w	80063ec <_svfiprintf_r+0x1c8>
 8006298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800629a:	445a      	add	r2, fp
 800629c:	9209      	str	r2, [sp, #36]	; 0x24
 800629e:	f89a 3000 	ldrb.w	r3, [sl]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80a2 	beq.w	80063ec <_svfiprintf_r+0x1c8>
 80062a8:	2300      	movs	r3, #0
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295
 80062ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b2:	f10a 0a01 	add.w	sl, sl, #1
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	9307      	str	r3, [sp, #28]
 80062ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062be:	931a      	str	r3, [sp, #104]	; 0x68
 80062c0:	4654      	mov	r4, sl
 80062c2:	2205      	movs	r2, #5
 80062c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c8:	4851      	ldr	r0, [pc, #324]	; (8006410 <_svfiprintf_r+0x1ec>)
 80062ca:	f7f9 ffa9 	bl	8000220 <memchr>
 80062ce:	9a04      	ldr	r2, [sp, #16]
 80062d0:	b9d8      	cbnz	r0, 800630a <_svfiprintf_r+0xe6>
 80062d2:	06d0      	lsls	r0, r2, #27
 80062d4:	bf44      	itt	mi
 80062d6:	2320      	movmi	r3, #32
 80062d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062dc:	0711      	lsls	r1, r2, #28
 80062de:	bf44      	itt	mi
 80062e0:	232b      	movmi	r3, #43	; 0x2b
 80062e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ea:	2b2a      	cmp	r3, #42	; 0x2a
 80062ec:	d015      	beq.n	800631a <_svfiprintf_r+0xf6>
 80062ee:	9a07      	ldr	r2, [sp, #28]
 80062f0:	4654      	mov	r4, sl
 80062f2:	2000      	movs	r0, #0
 80062f4:	f04f 0c0a 	mov.w	ip, #10
 80062f8:	4621      	mov	r1, r4
 80062fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062fe:	3b30      	subs	r3, #48	; 0x30
 8006300:	2b09      	cmp	r3, #9
 8006302:	d94e      	bls.n	80063a2 <_svfiprintf_r+0x17e>
 8006304:	b1b0      	cbz	r0, 8006334 <_svfiprintf_r+0x110>
 8006306:	9207      	str	r2, [sp, #28]
 8006308:	e014      	b.n	8006334 <_svfiprintf_r+0x110>
 800630a:	eba0 0308 	sub.w	r3, r0, r8
 800630e:	fa09 f303 	lsl.w	r3, r9, r3
 8006312:	4313      	orrs	r3, r2
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	46a2      	mov	sl, r4
 8006318:	e7d2      	b.n	80062c0 <_svfiprintf_r+0x9c>
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	1d19      	adds	r1, r3, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	9103      	str	r1, [sp, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	bfbb      	ittet	lt
 8006326:	425b      	neglt	r3, r3
 8006328:	f042 0202 	orrlt.w	r2, r2, #2
 800632c:	9307      	strge	r3, [sp, #28]
 800632e:	9307      	strlt	r3, [sp, #28]
 8006330:	bfb8      	it	lt
 8006332:	9204      	strlt	r2, [sp, #16]
 8006334:	7823      	ldrb	r3, [r4, #0]
 8006336:	2b2e      	cmp	r3, #46	; 0x2e
 8006338:	d10c      	bne.n	8006354 <_svfiprintf_r+0x130>
 800633a:	7863      	ldrb	r3, [r4, #1]
 800633c:	2b2a      	cmp	r3, #42	; 0x2a
 800633e:	d135      	bne.n	80063ac <_svfiprintf_r+0x188>
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	9203      	str	r2, [sp, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	bfb8      	it	lt
 800634c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006350:	3402      	adds	r4, #2
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006420 <_svfiprintf_r+0x1fc>
 8006358:	7821      	ldrb	r1, [r4, #0]
 800635a:	2203      	movs	r2, #3
 800635c:	4650      	mov	r0, sl
 800635e:	f7f9 ff5f 	bl	8000220 <memchr>
 8006362:	b140      	cbz	r0, 8006376 <_svfiprintf_r+0x152>
 8006364:	2340      	movs	r3, #64	; 0x40
 8006366:	eba0 000a 	sub.w	r0, r0, sl
 800636a:	fa03 f000 	lsl.w	r0, r3, r0
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	4303      	orrs	r3, r0
 8006372:	3401      	adds	r4, #1
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637a:	4826      	ldr	r0, [pc, #152]	; (8006414 <_svfiprintf_r+0x1f0>)
 800637c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006380:	2206      	movs	r2, #6
 8006382:	f7f9 ff4d 	bl	8000220 <memchr>
 8006386:	2800      	cmp	r0, #0
 8006388:	d038      	beq.n	80063fc <_svfiprintf_r+0x1d8>
 800638a:	4b23      	ldr	r3, [pc, #140]	; (8006418 <_svfiprintf_r+0x1f4>)
 800638c:	bb1b      	cbnz	r3, 80063d6 <_svfiprintf_r+0x1b2>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	3307      	adds	r3, #7
 8006392:	f023 0307 	bic.w	r3, r3, #7
 8006396:	3308      	adds	r3, #8
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639c:	4433      	add	r3, r6
 800639e:	9309      	str	r3, [sp, #36]	; 0x24
 80063a0:	e767      	b.n	8006272 <_svfiprintf_r+0x4e>
 80063a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063a6:	460c      	mov	r4, r1
 80063a8:	2001      	movs	r0, #1
 80063aa:	e7a5      	b.n	80062f8 <_svfiprintf_r+0xd4>
 80063ac:	2300      	movs	r3, #0
 80063ae:	3401      	adds	r4, #1
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	4619      	mov	r1, r3
 80063b4:	f04f 0c0a 	mov.w	ip, #10
 80063b8:	4620      	mov	r0, r4
 80063ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063be:	3a30      	subs	r2, #48	; 0x30
 80063c0:	2a09      	cmp	r2, #9
 80063c2:	d903      	bls.n	80063cc <_svfiprintf_r+0x1a8>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0c5      	beq.n	8006354 <_svfiprintf_r+0x130>
 80063c8:	9105      	str	r1, [sp, #20]
 80063ca:	e7c3      	b.n	8006354 <_svfiprintf_r+0x130>
 80063cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80063d0:	4604      	mov	r4, r0
 80063d2:	2301      	movs	r3, #1
 80063d4:	e7f0      	b.n	80063b8 <_svfiprintf_r+0x194>
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462a      	mov	r2, r5
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <_svfiprintf_r+0x1f8>)
 80063de:	a904      	add	r1, sp, #16
 80063e0:	4638      	mov	r0, r7
 80063e2:	f3af 8000 	nop.w
 80063e6:	1c42      	adds	r2, r0, #1
 80063e8:	4606      	mov	r6, r0
 80063ea:	d1d6      	bne.n	800639a <_svfiprintf_r+0x176>
 80063ec:	89ab      	ldrh	r3, [r5, #12]
 80063ee:	065b      	lsls	r3, r3, #25
 80063f0:	f53f af2c 	bmi.w	800624c <_svfiprintf_r+0x28>
 80063f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063f6:	b01d      	add	sp, #116	; 0x74
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fc:	ab03      	add	r3, sp, #12
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	462a      	mov	r2, r5
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <_svfiprintf_r+0x1f8>)
 8006404:	a904      	add	r1, sp, #16
 8006406:	4638      	mov	r0, r7
 8006408:	f000 f87a 	bl	8006500 <_printf_i>
 800640c:	e7eb      	b.n	80063e6 <_svfiprintf_r+0x1c2>
 800640e:	bf00      	nop
 8006410:	08006914 	.word	0x08006914
 8006414:	0800691e 	.word	0x0800691e
 8006418:	00000000 	.word	0x00000000
 800641c:	0800616d 	.word	0x0800616d
 8006420:	0800691a 	.word	0x0800691a

08006424 <_printf_common>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	4616      	mov	r6, r2
 800642a:	4699      	mov	r9, r3
 800642c:	688a      	ldr	r2, [r1, #8]
 800642e:	690b      	ldr	r3, [r1, #16]
 8006430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006434:	4293      	cmp	r3, r2
 8006436:	bfb8      	it	lt
 8006438:	4613      	movlt	r3, r2
 800643a:	6033      	str	r3, [r6, #0]
 800643c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006440:	4607      	mov	r7, r0
 8006442:	460c      	mov	r4, r1
 8006444:	b10a      	cbz	r2, 800644a <_printf_common+0x26>
 8006446:	3301      	adds	r3, #1
 8006448:	6033      	str	r3, [r6, #0]
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	0699      	lsls	r1, r3, #26
 800644e:	bf42      	ittt	mi
 8006450:	6833      	ldrmi	r3, [r6, #0]
 8006452:	3302      	addmi	r3, #2
 8006454:	6033      	strmi	r3, [r6, #0]
 8006456:	6825      	ldr	r5, [r4, #0]
 8006458:	f015 0506 	ands.w	r5, r5, #6
 800645c:	d106      	bne.n	800646c <_printf_common+0x48>
 800645e:	f104 0a19 	add.w	sl, r4, #25
 8006462:	68e3      	ldr	r3, [r4, #12]
 8006464:	6832      	ldr	r2, [r6, #0]
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	42ab      	cmp	r3, r5
 800646a:	dc26      	bgt.n	80064ba <_printf_common+0x96>
 800646c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006470:	1e13      	subs	r3, r2, #0
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	bf18      	it	ne
 8006476:	2301      	movne	r3, #1
 8006478:	0692      	lsls	r2, r2, #26
 800647a:	d42b      	bmi.n	80064d4 <_printf_common+0xb0>
 800647c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006480:	4649      	mov	r1, r9
 8006482:	4638      	mov	r0, r7
 8006484:	47c0      	blx	r8
 8006486:	3001      	adds	r0, #1
 8006488:	d01e      	beq.n	80064c8 <_printf_common+0xa4>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	68e5      	ldr	r5, [r4, #12]
 800648e:	6832      	ldr	r2, [r6, #0]
 8006490:	f003 0306 	and.w	r3, r3, #6
 8006494:	2b04      	cmp	r3, #4
 8006496:	bf08      	it	eq
 8006498:	1aad      	subeq	r5, r5, r2
 800649a:	68a3      	ldr	r3, [r4, #8]
 800649c:	6922      	ldr	r2, [r4, #16]
 800649e:	bf0c      	ite	eq
 80064a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064a4:	2500      	movne	r5, #0
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bfc4      	itt	gt
 80064aa:	1a9b      	subgt	r3, r3, r2
 80064ac:	18ed      	addgt	r5, r5, r3
 80064ae:	2600      	movs	r6, #0
 80064b0:	341a      	adds	r4, #26
 80064b2:	42b5      	cmp	r5, r6
 80064b4:	d11a      	bne.n	80064ec <_printf_common+0xc8>
 80064b6:	2000      	movs	r0, #0
 80064b8:	e008      	b.n	80064cc <_printf_common+0xa8>
 80064ba:	2301      	movs	r3, #1
 80064bc:	4652      	mov	r2, sl
 80064be:	4649      	mov	r1, r9
 80064c0:	4638      	mov	r0, r7
 80064c2:	47c0      	blx	r8
 80064c4:	3001      	adds	r0, #1
 80064c6:	d103      	bne.n	80064d0 <_printf_common+0xac>
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d0:	3501      	adds	r5, #1
 80064d2:	e7c6      	b.n	8006462 <_printf_common+0x3e>
 80064d4:	18e1      	adds	r1, r4, r3
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	2030      	movs	r0, #48	; 0x30
 80064da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064de:	4422      	add	r2, r4
 80064e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064e8:	3302      	adds	r3, #2
 80064ea:	e7c7      	b.n	800647c <_printf_common+0x58>
 80064ec:	2301      	movs	r3, #1
 80064ee:	4622      	mov	r2, r4
 80064f0:	4649      	mov	r1, r9
 80064f2:	4638      	mov	r0, r7
 80064f4:	47c0      	blx	r8
 80064f6:	3001      	adds	r0, #1
 80064f8:	d0e6      	beq.n	80064c8 <_printf_common+0xa4>
 80064fa:	3601      	adds	r6, #1
 80064fc:	e7d9      	b.n	80064b2 <_printf_common+0x8e>
	...

08006500 <_printf_i>:
 8006500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	7e0f      	ldrb	r7, [r1, #24]
 8006506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006508:	2f78      	cmp	r7, #120	; 0x78
 800650a:	4691      	mov	r9, r2
 800650c:	4680      	mov	r8, r0
 800650e:	460c      	mov	r4, r1
 8006510:	469a      	mov	sl, r3
 8006512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006516:	d807      	bhi.n	8006528 <_printf_i+0x28>
 8006518:	2f62      	cmp	r7, #98	; 0x62
 800651a:	d80a      	bhi.n	8006532 <_printf_i+0x32>
 800651c:	2f00      	cmp	r7, #0
 800651e:	f000 80d8 	beq.w	80066d2 <_printf_i+0x1d2>
 8006522:	2f58      	cmp	r7, #88	; 0x58
 8006524:	f000 80a3 	beq.w	800666e <_printf_i+0x16e>
 8006528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006530:	e03a      	b.n	80065a8 <_printf_i+0xa8>
 8006532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006536:	2b15      	cmp	r3, #21
 8006538:	d8f6      	bhi.n	8006528 <_printf_i+0x28>
 800653a:	a101      	add	r1, pc, #4	; (adr r1, 8006540 <_printf_i+0x40>)
 800653c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006540:	08006599 	.word	0x08006599
 8006544:	080065ad 	.word	0x080065ad
 8006548:	08006529 	.word	0x08006529
 800654c:	08006529 	.word	0x08006529
 8006550:	08006529 	.word	0x08006529
 8006554:	08006529 	.word	0x08006529
 8006558:	080065ad 	.word	0x080065ad
 800655c:	08006529 	.word	0x08006529
 8006560:	08006529 	.word	0x08006529
 8006564:	08006529 	.word	0x08006529
 8006568:	08006529 	.word	0x08006529
 800656c:	080066b9 	.word	0x080066b9
 8006570:	080065dd 	.word	0x080065dd
 8006574:	0800669b 	.word	0x0800669b
 8006578:	08006529 	.word	0x08006529
 800657c:	08006529 	.word	0x08006529
 8006580:	080066db 	.word	0x080066db
 8006584:	08006529 	.word	0x08006529
 8006588:	080065dd 	.word	0x080065dd
 800658c:	08006529 	.word	0x08006529
 8006590:	08006529 	.word	0x08006529
 8006594:	080066a3 	.word	0x080066a3
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	1d1a      	adds	r2, r3, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	602a      	str	r2, [r5, #0]
 80065a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0a3      	b.n	80066f4 <_printf_i+0x1f4>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	6829      	ldr	r1, [r5, #0]
 80065b0:	0606      	lsls	r6, r0, #24
 80065b2:	f101 0304 	add.w	r3, r1, #4
 80065b6:	d50a      	bpl.n	80065ce <_printf_i+0xce>
 80065b8:	680e      	ldr	r6, [r1, #0]
 80065ba:	602b      	str	r3, [r5, #0]
 80065bc:	2e00      	cmp	r6, #0
 80065be:	da03      	bge.n	80065c8 <_printf_i+0xc8>
 80065c0:	232d      	movs	r3, #45	; 0x2d
 80065c2:	4276      	negs	r6, r6
 80065c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065c8:	485e      	ldr	r0, [pc, #376]	; (8006744 <_printf_i+0x244>)
 80065ca:	230a      	movs	r3, #10
 80065cc:	e019      	b.n	8006602 <_printf_i+0x102>
 80065ce:	680e      	ldr	r6, [r1, #0]
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065d6:	bf18      	it	ne
 80065d8:	b236      	sxthne	r6, r6
 80065da:	e7ef      	b.n	80065bc <_printf_i+0xbc>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	1d19      	adds	r1, r3, #4
 80065e2:	6029      	str	r1, [r5, #0]
 80065e4:	0601      	lsls	r1, r0, #24
 80065e6:	d501      	bpl.n	80065ec <_printf_i+0xec>
 80065e8:	681e      	ldr	r6, [r3, #0]
 80065ea:	e002      	b.n	80065f2 <_printf_i+0xf2>
 80065ec:	0646      	lsls	r6, r0, #25
 80065ee:	d5fb      	bpl.n	80065e8 <_printf_i+0xe8>
 80065f0:	881e      	ldrh	r6, [r3, #0]
 80065f2:	4854      	ldr	r0, [pc, #336]	; (8006744 <_printf_i+0x244>)
 80065f4:	2f6f      	cmp	r7, #111	; 0x6f
 80065f6:	bf0c      	ite	eq
 80065f8:	2308      	moveq	r3, #8
 80065fa:	230a      	movne	r3, #10
 80065fc:	2100      	movs	r1, #0
 80065fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006602:	6865      	ldr	r5, [r4, #4]
 8006604:	60a5      	str	r5, [r4, #8]
 8006606:	2d00      	cmp	r5, #0
 8006608:	bfa2      	ittt	ge
 800660a:	6821      	ldrge	r1, [r4, #0]
 800660c:	f021 0104 	bicge.w	r1, r1, #4
 8006610:	6021      	strge	r1, [r4, #0]
 8006612:	b90e      	cbnz	r6, 8006618 <_printf_i+0x118>
 8006614:	2d00      	cmp	r5, #0
 8006616:	d04d      	beq.n	80066b4 <_printf_i+0x1b4>
 8006618:	4615      	mov	r5, r2
 800661a:	fbb6 f1f3 	udiv	r1, r6, r3
 800661e:	fb03 6711 	mls	r7, r3, r1, r6
 8006622:	5dc7      	ldrb	r7, [r0, r7]
 8006624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006628:	4637      	mov	r7, r6
 800662a:	42bb      	cmp	r3, r7
 800662c:	460e      	mov	r6, r1
 800662e:	d9f4      	bls.n	800661a <_printf_i+0x11a>
 8006630:	2b08      	cmp	r3, #8
 8006632:	d10b      	bne.n	800664c <_printf_i+0x14c>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	07de      	lsls	r6, r3, #31
 8006638:	d508      	bpl.n	800664c <_printf_i+0x14c>
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	6861      	ldr	r1, [r4, #4]
 800663e:	4299      	cmp	r1, r3
 8006640:	bfde      	ittt	le
 8006642:	2330      	movle	r3, #48	; 0x30
 8006644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800664c:	1b52      	subs	r2, r2, r5
 800664e:	6122      	str	r2, [r4, #16]
 8006650:	f8cd a000 	str.w	sl, [sp]
 8006654:	464b      	mov	r3, r9
 8006656:	aa03      	add	r2, sp, #12
 8006658:	4621      	mov	r1, r4
 800665a:	4640      	mov	r0, r8
 800665c:	f7ff fee2 	bl	8006424 <_printf_common>
 8006660:	3001      	adds	r0, #1
 8006662:	d14c      	bne.n	80066fe <_printf_i+0x1fe>
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	b004      	add	sp, #16
 800666a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666e:	4835      	ldr	r0, [pc, #212]	; (8006744 <_printf_i+0x244>)
 8006670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006674:	6829      	ldr	r1, [r5, #0]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	f851 6b04 	ldr.w	r6, [r1], #4
 800667c:	6029      	str	r1, [r5, #0]
 800667e:	061d      	lsls	r5, r3, #24
 8006680:	d514      	bpl.n	80066ac <_printf_i+0x1ac>
 8006682:	07df      	lsls	r7, r3, #31
 8006684:	bf44      	itt	mi
 8006686:	f043 0320 	orrmi.w	r3, r3, #32
 800668a:	6023      	strmi	r3, [r4, #0]
 800668c:	b91e      	cbnz	r6, 8006696 <_printf_i+0x196>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	f023 0320 	bic.w	r3, r3, #32
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	2310      	movs	r3, #16
 8006698:	e7b0      	b.n	80065fc <_printf_i+0xfc>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	f043 0320 	orr.w	r3, r3, #32
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	2378      	movs	r3, #120	; 0x78
 80066a4:	4828      	ldr	r0, [pc, #160]	; (8006748 <_printf_i+0x248>)
 80066a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066aa:	e7e3      	b.n	8006674 <_printf_i+0x174>
 80066ac:	0659      	lsls	r1, r3, #25
 80066ae:	bf48      	it	mi
 80066b0:	b2b6      	uxthmi	r6, r6
 80066b2:	e7e6      	b.n	8006682 <_printf_i+0x182>
 80066b4:	4615      	mov	r5, r2
 80066b6:	e7bb      	b.n	8006630 <_printf_i+0x130>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	6826      	ldr	r6, [r4, #0]
 80066bc:	6961      	ldr	r1, [r4, #20]
 80066be:	1d18      	adds	r0, r3, #4
 80066c0:	6028      	str	r0, [r5, #0]
 80066c2:	0635      	lsls	r5, r6, #24
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0x1cc>
 80066c8:	6019      	str	r1, [r3, #0]
 80066ca:	e002      	b.n	80066d2 <_printf_i+0x1d2>
 80066cc:	0670      	lsls	r0, r6, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0x1c8>
 80066d0:	8019      	strh	r1, [r3, #0]
 80066d2:	2300      	movs	r3, #0
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	4615      	mov	r5, r2
 80066d8:	e7ba      	b.n	8006650 <_printf_i+0x150>
 80066da:	682b      	ldr	r3, [r5, #0]
 80066dc:	1d1a      	adds	r2, r3, #4
 80066de:	602a      	str	r2, [r5, #0]
 80066e0:	681d      	ldr	r5, [r3, #0]
 80066e2:	6862      	ldr	r2, [r4, #4]
 80066e4:	2100      	movs	r1, #0
 80066e6:	4628      	mov	r0, r5
 80066e8:	f7f9 fd9a 	bl	8000220 <memchr>
 80066ec:	b108      	cbz	r0, 80066f2 <_printf_i+0x1f2>
 80066ee:	1b40      	subs	r0, r0, r5
 80066f0:	6060      	str	r0, [r4, #4]
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	6123      	str	r3, [r4, #16]
 80066f6:	2300      	movs	r3, #0
 80066f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066fc:	e7a8      	b.n	8006650 <_printf_i+0x150>
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	462a      	mov	r2, r5
 8006702:	4649      	mov	r1, r9
 8006704:	4640      	mov	r0, r8
 8006706:	47d0      	blx	sl
 8006708:	3001      	adds	r0, #1
 800670a:	d0ab      	beq.n	8006664 <_printf_i+0x164>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	079b      	lsls	r3, r3, #30
 8006710:	d413      	bmi.n	800673a <_printf_i+0x23a>
 8006712:	68e0      	ldr	r0, [r4, #12]
 8006714:	9b03      	ldr	r3, [sp, #12]
 8006716:	4298      	cmp	r0, r3
 8006718:	bfb8      	it	lt
 800671a:	4618      	movlt	r0, r3
 800671c:	e7a4      	b.n	8006668 <_printf_i+0x168>
 800671e:	2301      	movs	r3, #1
 8006720:	4632      	mov	r2, r6
 8006722:	4649      	mov	r1, r9
 8006724:	4640      	mov	r0, r8
 8006726:	47d0      	blx	sl
 8006728:	3001      	adds	r0, #1
 800672a:	d09b      	beq.n	8006664 <_printf_i+0x164>
 800672c:	3501      	adds	r5, #1
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	9903      	ldr	r1, [sp, #12]
 8006732:	1a5b      	subs	r3, r3, r1
 8006734:	42ab      	cmp	r3, r5
 8006736:	dcf2      	bgt.n	800671e <_printf_i+0x21e>
 8006738:	e7eb      	b.n	8006712 <_printf_i+0x212>
 800673a:	2500      	movs	r5, #0
 800673c:	f104 0619 	add.w	r6, r4, #25
 8006740:	e7f5      	b.n	800672e <_printf_i+0x22e>
 8006742:	bf00      	nop
 8006744:	08006925 	.word	0x08006925
 8006748:	08006936 	.word	0x08006936

0800674c <__retarget_lock_acquire_recursive>:
 800674c:	4770      	bx	lr

0800674e <__retarget_lock_release_recursive>:
 800674e:	4770      	bx	lr

08006750 <memcpy>:
 8006750:	440a      	add	r2, r1
 8006752:	4291      	cmp	r1, r2
 8006754:	f100 33ff 	add.w	r3, r0, #4294967295
 8006758:	d100      	bne.n	800675c <memcpy+0xc>
 800675a:	4770      	bx	lr
 800675c:	b510      	push	{r4, lr}
 800675e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006766:	4291      	cmp	r1, r2
 8006768:	d1f9      	bne.n	800675e <memcpy+0xe>
 800676a:	bd10      	pop	{r4, pc}

0800676c <memmove>:
 800676c:	4288      	cmp	r0, r1
 800676e:	b510      	push	{r4, lr}
 8006770:	eb01 0402 	add.w	r4, r1, r2
 8006774:	d902      	bls.n	800677c <memmove+0x10>
 8006776:	4284      	cmp	r4, r0
 8006778:	4623      	mov	r3, r4
 800677a:	d807      	bhi.n	800678c <memmove+0x20>
 800677c:	1e43      	subs	r3, r0, #1
 800677e:	42a1      	cmp	r1, r4
 8006780:	d008      	beq.n	8006794 <memmove+0x28>
 8006782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800678a:	e7f8      	b.n	800677e <memmove+0x12>
 800678c:	4402      	add	r2, r0
 800678e:	4601      	mov	r1, r0
 8006790:	428a      	cmp	r2, r1
 8006792:	d100      	bne.n	8006796 <memmove+0x2a>
 8006794:	bd10      	pop	{r4, pc}
 8006796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800679a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800679e:	e7f7      	b.n	8006790 <memmove+0x24>

080067a0 <_realloc_r>:
 80067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a4:	4680      	mov	r8, r0
 80067a6:	4614      	mov	r4, r2
 80067a8:	460e      	mov	r6, r1
 80067aa:	b921      	cbnz	r1, 80067b6 <_realloc_r+0x16>
 80067ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	4611      	mov	r1, r2
 80067b2:	f7ff bbd3 	b.w	8005f5c <_malloc_r>
 80067b6:	b92a      	cbnz	r2, 80067c4 <_realloc_r+0x24>
 80067b8:	f7ff fb64 	bl	8005e84 <_free_r>
 80067bc:	4625      	mov	r5, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	f000 f81b 	bl	80067fe <_malloc_usable_size_r>
 80067c8:	4284      	cmp	r4, r0
 80067ca:	4607      	mov	r7, r0
 80067cc:	d802      	bhi.n	80067d4 <_realloc_r+0x34>
 80067ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067d2:	d812      	bhi.n	80067fa <_realloc_r+0x5a>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4640      	mov	r0, r8
 80067d8:	f7ff fbc0 	bl	8005f5c <_malloc_r>
 80067dc:	4605      	mov	r5, r0
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0ed      	beq.n	80067be <_realloc_r+0x1e>
 80067e2:	42bc      	cmp	r4, r7
 80067e4:	4622      	mov	r2, r4
 80067e6:	4631      	mov	r1, r6
 80067e8:	bf28      	it	cs
 80067ea:	463a      	movcs	r2, r7
 80067ec:	f7ff ffb0 	bl	8006750 <memcpy>
 80067f0:	4631      	mov	r1, r6
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7ff fb46 	bl	8005e84 <_free_r>
 80067f8:	e7e1      	b.n	80067be <_realloc_r+0x1e>
 80067fa:	4635      	mov	r5, r6
 80067fc:	e7df      	b.n	80067be <_realloc_r+0x1e>

080067fe <_malloc_usable_size_r>:
 80067fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006802:	1f18      	subs	r0, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	bfbc      	itt	lt
 8006808:	580b      	ldrlt	r3, [r1, r0]
 800680a:	18c0      	addlt	r0, r0, r3
 800680c:	4770      	bx	lr
	...

08006810 <_init>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr

0800681c <_fini>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr
